[
  {
    "id": "xueguangma/arbitrage_free_securities_market.json",
    "question": "Consider an arbitrage-free securities market model, in which the risk-free interest rate is constant. There are two nondividend-paying stocks whose price processes are:\n$S_1(t)=S_1(0)e^{0.1t+0.2Z(t)}$\n$S_2(t)=S_2(0)e^{0.125t+0.3Z(t)}$\nwhere $Z(t)$ is a standard Brownian motion ant $t\\ge0$. What is the continuously compounded risk-free interest rate?",
    "prediction": 0.1125,
    "answer": 0.02,
    "rationale": "def solve():\n  # In an arbitrage-free securities market model with constant risk-free interest rate, the risk-free interest rate can be calculated as the average of the drifts of the stocks.\n  drift_stock1 = 0.1\n  drift_stock2 = 0.125\n\n  risk_free_interest_rate = (drift_stock1 + drift_stock2) / 2\n\n  return risk_free_interest_rate",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/orthogonal-similarity1.json",
    "question": "If A and B are both orthogonal square matrices, and det A = -det B. What is det(A+B)? Return the numerical value.",
    "prediction": 0,
    "answer": 0.0,
    "rationale": "def solve():\n    # Since A and B are orthogonal square matrices, A * A_transpose = B * B_transpose = I (Identity matrix)\n    # Also, det A = -det B\n    # We need to find det(A + B)\n    # Let's use the property det(A) * det(A_transpose) = det(A * A_transpose) = det(I)\n    # det(I) = 1 (determinant of identity matrix is 1)\n    # det A * det A_transpose = 1\n    # det A * det B = 1 (since A_transpose = B)\n    # det A * (-det A) = 1\n    # -det A ** 2 = 1\n    # This equation is not possible, as the square of any determinant cannot be negative.\n    # Therefore, the given conditions are not possible for orthogonal square matrices A and B.\n    return None",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/relativity4.json",
    "question": "Across what potential difference in V does an electron have to be accelerated to reach the speed v = 1.8 x 10^7 m/s? Calculate this relativistically.",
    "prediction": 923.5664493703806,
    "answer": 924.0,
    "rationale": "def solve():\n    import math\n\n    # Constants\n    e = 1.60217662e-19  # Charge of an electron in C\n    m_e = 9.10938356e-31  # Mass of an electron in kg\n    c = 3.0e8  # Speed of light in m/s\n    v = 1.8e7  # Given speed in m/s\n\n    # Relativistic mass\n    gamma = 1 / math.sqrt(1 - (v / c)**2)\n    m_rel = m_e * gamma\n\n    # Kinetic energy\n    KE = (m_rel - m_e) * c**2\n\n    # Potential difference\n    V = KE / e\n\n    return V",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/econ_micro_4.json",
    "question": "Each day Paul, who is in third grade, eats lunch at school. He likes only Twinkies (t) and soda (s), and these provide him a utility of utility = U(t,s) = \\sqrt{ts}. If Twinkies cost $0.10 each and soda costs $0.25 per cup, Paul's mom gives him $1, how many Twinkies should Paul buy to maximize utility?",
    "prediction": 5,
    "answer": 5,
    "rationale": "def solve():\n    import numpy as np\n\n    twinkie_cost = 0.10\n    soda_cost = 0.25\n    budget = 1\n\n    max_utility = 0\n    optimal_twinkies = 0\n\n    for t in range(int(budget / twinkie_cost) + 1):\n        s = (budget - t * twinkie_cost) / soda_cost\n        utility = np.sqrt(t * s)\n        if utility > max_utility:\n            max_utility = utility\n            optimal_twinkies = t\n\n    return optimal_twinkies",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/series_convergen3.json",
    "question": "Does the following series $\\sum_{i=0}^{\\infty} \\frac{n^2 ln(n)}{n!}$ converge?",
    "prediction": 1,
    "answer": 1.0,
    "rationale": "def solve():\n    import math\n\n    # Set the tolerance for convergence\n    tolerance = 1e-10\n\n    # Initialize the sum and the current term\n    sum_series = 0\n    current_term = 1\n\n    # Initialize the index\n    n = 0\n\n    # Iterate until the current term is smaller than the tolerance\n    while current_term > tolerance:\n        # Update the sum\n        sum_series += current_term\n\n        # Increment the index\n        n += 1\n\n        # Calculate the next term\n        current_term = (n**2 * math.log(n)) / math.factorial(n)\n\n    return sum_series",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/Lagrange's_theorem.json",
    "question": "Is there a y bewteen x and x+h such that $sin(x+h) - sinx = h * cos(y)$?",
    "prediction": true,
    "answer": true,
    "rationale": "Yes, this statement is true according to the Mean Value Theorem. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "mingyin/Arzela-Ascoli-theorem1.json",
    "question": "Let M be the set of bounded functions (i.e. \\sup_{x\\in[a,b]}|f(x)|<\\infty) in C[0,1]. Is the set ${F(x)=\\int_0^x f(t) dt | f \\in M }$ a sequentially compact set? Answer 1 for yes and 0 for no. Furthermore, it can be proved using 1. Arzel\u00e0-Ascoli theorem, 2. Riesz representation theorem, 3. Banach fixed point theorem, 4. None of the above. Return the answers of the two questions in a list. For example, if you think the answer is no and Riesz representation theorem, then return [0,2].",
    "prediction": [
      0,
      4
    ],
    "answer": [
      1,
      1
    ],
    "rationale": "def solve():\n    ans = [0, 4]\n    return ans",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "wenhuchen/rectangle2.json",
    "question": "Square ABCD. CT: tangent to semicircle. Find the angle \u2220CTD. Return the numeric value.",
    "prediction": 0,
    "answer": 63.4,
    "rationale": "def solve():\n    # Since CT is tangent to the semicircle, the angle between CT and the radius of the semicircle is 90 degrees.\n    # Let's denote the center of the semicircle as O.\n    # Triangle CTO is a right triangle with a right angle at T.\n    # Since ABCD is a square, angle CDO is also 90 degrees.\n    # Now, we can find angle CTD by subtracting angle CTO from angle CDO.\n    angle_CDO = 90\n    angle_CTO = 90\n    angle_CTD = angle_CDO - angle_CTO\n    return angle_CTD",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/differential_equation3.json",
    "question": "Find the solutions y of the differential equation y'=(t^2+3y^2)/2ty with y(1) = 1. What is y(2)?",
    "prediction": 3.464064516499578,
    "answer": 3.464,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.integrate import solve_ivp\n\n    def dydt(t, y):\n        return (t**2 + 3*y**2) / (2*t*y)\n\n    t_eval = np.linspace(1, 2, 100)\n    sol = solve_ivp(dydt, (1, 2), [1], t_eval=t_eval)\n\n    y_2 = sol.y[0][-1]\n    return y_2",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/semiconductor2.json",
    "question": "Assume a temperature of 300 K and find the wavelength of the photon necessary to cause an electron to jump from the valence to the conduction band in germanium in nm.",
    "prediction": 1851.976074682766,
    "answer": 1850.0,
    "rationale": "def solve():\n    # Constants\n    h = 6.626e-34  # Planck's constant (Js)\n    c = 3e8  # Speed of light (m/s)\n    eV_to_J = 1.602e-19  # Conversion factor from eV to J\n\n    # Energy gap in germanium (eV)\n    energy_gap = 0.67\n\n    # Convert energy gap to Joules\n    energy_gap_J = energy_gap * eV_to_J\n\n    # Calculate the wavelength (m)\n    wavelength = h * c / energy_gap_J\n\n    # Convert wavelength to nm\n    wavelength_nm = wavelength * 1e9\n\n    return wavelength_nm",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/optics2.json",
    "question": "An object 11cm tall is 9cm from a mirror. If the image distance is -3cm from the mirror, what is the image height in terms of cm?",
    "prediction": 3.6666666666666665,
    "answer": 3.67,
    "rationale": "def solve():\n  object_height = 11\n  object_distance = 9\n  image_distance = -3\n\n  # Using the mirror formula: (1/f = 1/do + 1/di)\n  # And the magnification formula: (M = -di/do = hi/ho)\n  # We can find the image height (hi) as follows:\n  image_height = (-image_distance / object_distance) * object_height\n\n  return image_height",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/wave3.json",
    "question": "Calculate the de Broglie Wavelength, in nm, of an electron with kinetic energy 50 eV.",
    "prediction": 0.17345420174629406,
    "answer": 0.17,
    "rationale": "def solve():\n  import math\n\n  # Constants\n  h = 6.626e-34  # Planck's constant in J*s\n  eV_to_J = 1.602e-19  # Conversion factor from eV to J\n  m_e = 9.109e-31  # Mass of electron in kg\n  nm_to_m = 1e-9  # Conversion factor from nm to m\n\n  # Kinetic energy in J\n  KE = 50 * eV_to_J\n\n  # Calculate the velocity of the electron using KE = 0.5 * m_e * v^2\n  v = math.sqrt((2 * KE) / m_e)\n\n  # Calculate the de Broglie wavelength using \u03bb = h / (m_e * v)\n  wavelength = h / (m_e * v)\n\n  # Convert the wavelength to nm\n  wavelength_nm = wavelength / nm_to_m\n\n  return wavelength_nm",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/math_algebra_4.json",
    "question": "Is the set of 3 * 3 matrices in reduced row-echelon form a subspace of R^{3 * 3}?",
    "prediction": false,
    "answer": false,
    "rationale": "To determine if the set of 3 * 3 matrices in reduced row-echelon form is a subspace of R^{3 * 3}, we need to check if it satisfies the three conditions for a subspace:\n\n1. The zero vector is in the set.\n2. The set is closed under addition.\n3. The set is closed under scalar multiplication.\n\n1. The zero vector (the 3 * 3 matrix with all elements equal to 0) is in reduced row-echelon form, so the first condition is satisfied.\n\n2. Let's consider two 3 * 3 matrices A and B in reduced row-echelon form. When we add them together, the resulting matrix C may not be in reduced row-echelon form. For example:\n\nA = | 1 0 0 |    B = | 1 0 0 |    C = A + B = | 2 0 0 |\n    | 0 1 0 |        | 0 1 0 |                | 0 2 0 |\n    | 0 0 1 |        | 0 0 1 |                | 0 0 2 |\n\nMatrix C is not in reduced row-echelon form, so the set is not closed under addition.\n\n3. Let's consider a 3 * 3 matrix A in reduced row-echelon form and a scalar k. When we multiply A by k, the resulting matrix D may not be in reduced row-echelon form. For example:\n\nA = | 1 0 0 |    k = 2    D = kA = | 2 0 0 |\n    | 0 1 0 |                        | 0 2 0 |\n    | 0 0 1 |                        | 0 0 2 |\n\nMatrix D is not in reduced row-echelon form, so the set is not closed under scalar multiplication.\n\nSince the set of 3 * 3 matrices in reduced row-echelon form does not satisfy all three conditions for a subspace, it is not a subspace of R^{3 * 3}. Therefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "maxku/cv-imageprocessing8-fourier2.json",
    "question": "In the process of searching circles in an image, object O is detected. The contour of the object O is represented with the Fourier Descriptors (-20,60,-20,20,-20,21,-20,20). Given that the Fourier Descriptors of a circle are (0,40,0,0,0,0,0,0). Is the object O a circle-like polygon in the image? Bear in mind that there is some high frequency noise in the image. You should take this into account when you make your judgment.",
    "prediction": true,
    "answer": false,
    "rationale": "To determine if object O is a circle-like polygon, we need to compare its Fourier Descriptors with those of a circle. The Fourier Descriptors of a circle are (0,40,0,0,0,0,0,0), and the Fourier Descriptors of object O are (-20,60,-20,20,-20,21,-20,20).\n\nConsidering the high-frequency noise in the image, we can assume that the non-zero values in the higher-order Fourier Descriptors of object O are due to noise. Therefore, we can focus on the first two Fourier Descriptors, which are -20 and 60 for object O, and 0 and 40 for a circle.\n\nThe first Fourier Descriptor represents the average intensity of the contour, which is not relevant for our comparison. The second Fourier Descriptor represents the radius of the circle. In this case, the second Fourier Descriptor of object O is 60, which is close to the second Fourier Descriptor of a circle, 40.\n\nTaking the high-frequency noise into account and comparing the second Fourier Descriptor, we can conclude that object O is likely a circle-like polygon in the image. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "mingyin/double-integral5.json",
    "question": "Let $I(R)=\\iint_{x^2+y^2 \\leq R^2}(\\frac{1+2 x^2}{1+x^4+6x^2y^2+y^4}-\\frac{1+y^2}{2+x^4+y^4}) dx dy$. What is the limit of $I(R)$ as $R$ goes to infinity?",
    "prediction": 0,
    "answer": 1.53978589,
    "rationale": "import sympy as sp\ndef solve():\n    r, theta = sp.symbols('r theta')\n    R = sp.Symbol('R', positive=True, real=True)\n\n    # Convert the integrand to polar coordinates\n    x = r * sp.cos(theta)\n    y = r * sp.sin(theta)\n    integrand = ((1 + 2 * x**2) / (1 + x**4 + 6 * x**2 * y**2 + y**4) - (1 + y**2) / (2 + x**4 + y**4)) * r\n\n    # Integrate over theta and r\n    integral_theta = sp.integrate(integrand, (theta, 0, 2 * sp.pi))\n    integral_r = sp.integrate(integral_theta, (r, 0, R))\n\n    # Compute the limit as R goes to infinity\n    ans = sp.limit(integral_r, R, sp.oo)\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xinyi/angular_momentum.json",
    "question": "Under some circumstances, a star can collapse into an extremely dense object made mostly of neutrons and called a neutron star. The density of a neutron star is roughly $10^14$ times as great as that of ordinary solid matter. Suppose we represent the star as a uniform, solid, rigid sphere, both before and after the collapse. The star's initial radius was $7 \\tims 10^5$ km (comparable to our sun); its final radius is 16 km. If the original star rotated once in 30 days, find the angular speed (in rad/s) of the neutron star.",
    "prediction": 4639.818432493606,
    "answer": 4600.0,
    "rationale": "def solve():\n  import math\n\n  # Constants\n  initial_radius = 7e5 * 1000  # km to meters\n  final_radius = 16 * 1000  # km to meters\n  initial_rotation_period = 30 * 24 * 60 * 60  # days to seconds\n\n  # Initial angular speed (in rad/s)\n  initial_angular_speed = 2 * math.pi / initial_rotation_period\n\n  # Using the conservation of angular momentum (I1 * w1 = I2 * w2)\n  # I1 = (2/5) * M * R1^2, I2 = (2/5) * M * R2^2\n  # w1 = initial_angular_speed, w2 = final_angular_speed\n  # M cancels out, so we have:\n  # (2/5) * R1^2 * w1 = (2/5) * R2^2 * w2\n  # w2 = (R1^2 / R2^2) * w1\n  final_angular_speed = (initial_radius**2 / final_radius**2) * initial_angular_speed\n\n  return final_angular_speed",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/certainty_equivalent.json",
    "question": "An investor has utility function $U(x) = x^{1/4}$ for salary. He has a new job offer which pays $80,000 with a bonus. The bonus will be $0, $10000, $20000, $30000, $40000, $50000, or $60000, each with equal probability. What is the certainty equivalent value of this job offer?",
    "prediction": 108610.03827861235,
    "answer": 108610,
    "rationale": "def solve():\n    import numpy as np\n\n    # Utility function\n    def U(x):\n        return x**(1/4)\n\n    # Salary and bonus values\n    salary = 80000\n    bonus_values = np.array([0, 10000, 20000, 30000, 40000, 50000, 60000])\n\n    # Calculate expected utility\n    expected_utility = np.mean([U(salary + bonus) for bonus in bonus_values])\n\n    # Find the certainty equivalent value\n    ce_value = (expected_utility**4)\n\n    return ce_value",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "mingyin/Limit-of-sequence2.json",
    "question": "what is the limit of $(n!)^{1/n}/n$ as n goes to infinity? Round the answer to the thousands decimal.",
    "prediction": 0,
    "answer": 0.367879441,
    "rationale": "def solve():\n    import math\n\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    n = 1000\n    limit = (factorial(n) ** (1/n)) / n\n    ans = round(limit, 3)\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/signalprocessing19-period.json",
    "question": "Fig. Q7a shows the amplitude spectrum of a real-value discrete time signal x[n]. Determine the period of signal x[n] (in samples).",
    "prediction": 0,
    "answer": 8,
    "rationale": "",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/taylor_expansion1.json",
    "question": "Let $P_5(x)$ be the fifth-degree Taylor polynomial approximation for f(x)=sin(x), centered at x=0. What is the Lagrange error of the polynomial approximation to sin(1)?.",
    "prediction": 1.6059043836821613e-10,
    "answer": 0.000198,
    "rationale": "def solve():\n    import math\n\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def taylor_polynomial_term(x, n):\n        return ((-1)**n) * (x**(2*n + 1)) / factorial(2*n + 1)\n\n    def taylor_polynomial_approximation(x, degree):\n        approximation = 0\n        for n in range(degree + 1):\n            approximation += taylor_polynomial_term(x, n)\n        return approximation\n\n    def lagrange_error(x, degree):\n        max_error = abs(x**(2*degree + 3)) / factorial(2*degree + 3)\n        return max_error\n\n    degree = 5\n    x = 1\n    error = lagrange_error(x, degree)\n    return error",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/Descartes_Rule_of_Signs.json",
    "question": "Determine the number of positive real zero of the given function: $f(x)=x^5+4*x^4-3x^2+x-6$.",
    "prediction": 0,
    "answer": [
      3,
      1
    ],
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the function and its derivative\n    def f(x):\n        return x**5 + 4*x**4 - 3*x**2 + x - 6\n\n    def df(x):\n        return 5*x**4 + 16*x**3 - 6*x + 1\n\n    # Find the critical points\n    critical_points = []\n    for x in np.linspace(0, 2, 1000):\n        if np.abs(df(x)) < 1e-3:\n            critical_points.append(x)\n\n    # Check the number of positive real zeros\n    positive_real_zeros = 0\n    for cp in critical_points:\n        if f(cp) * f(cp - 1e-3) < 0:\n            positive_real_zeros += 1\n\n    return positive_real_zeros",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "mingyin/taylor-expansion1.json",
    "question": "Suppose that $X_1,X_2,...$ are real numbers between 0 and 1 that are chosen independently and uniformly at random. Let $S=\\sum_{i=1}^k X_i/2^i$, where $k$ is the least positive integer such that $X_k<X_{k+1}$, or $k=\\infty$ if there is no such integer. Find the expected value of S.",
    "prediction": 0.2971320216619385,
    "answer": 0.29744254,
    "rationale": "def solve():\n    import numpy as np\n\n    # Number of simulations\n    n_simulations = 1000000\n\n    # Initialize the sum\n    total_sum = 0\n\n    for _ in range(n_simulations):\n        k = 1\n        X_prev = np.random.uniform(0, 1)\n        X_next = np.random.uniform(0, 1)\n\n        # Find the least positive integer k such that X_k < X_{k+1}\n        while X_prev >= X_next:\n            total_sum += X_prev / (2 ** k)\n            k += 1\n            X_prev = X_next\n            X_next = np.random.uniform(0, 1)\n\n        # Add the last term\n        total_sum += X_prev / (2 ** k)\n\n    # Calculate the expected value\n    expected_value = total_sum / n_simulations\n\n    return expected_value",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "maxku/cv-imageprocessing9-digital-image.json",
    "question": "Calculate the required memory size in Mebibytes (MiB) (in 3 sig.fig.)  for storing a frame in 1080p if the sampling scheme R'G'B' 4:4:4 is used. Note that there are 1920 \u00d7 1080 pixels in one 1080p frame. Each pixel contains three primary-colour components. Each primary-colour component requires 1 byte of memory for storage. 1 Mebibyte has 1024^2 bytes.",
    "prediction": 5.933,
    "answer": 5.93,
    "rationale": "def solve():\n    # Constants\n    width = 1920\n    height = 1080\n    components = 3\n    bytes_per_component = 1\n    bytes_per_mebibyte = 1024**2\n\n    # Calculate the memory size in bytes\n    memory_size_bytes = width * height * components * bytes_per_component\n\n    # Convert the memory size to Mebibytes\n    memory_size_mebibytes = memory_size_bytes / bytes_per_mebibyte\n\n    # Round the result to 3 significant figures\n    ans = round(memory_size_mebibytes, 3)\n\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/physics_coulombs_law.json",
    "question": "Point charges q1=50\u03bcC and  q2=\u221225\u03bcC are placed 1.0 m apart. What is the force on a third charge q3=20\u03bcC placed midway between q1 and q2?",
    "prediction": 17.975103584599996,
    "answer": 53.94,
    "rationale": "def solve():\n  import math\n\n  # Constants\n  k = 8.9875517923 * 10**9  # Coulomb's constant, N m^2 C^-2\n\n  # Charges\n  q1 = 50 * 10**-6  # 50 \u03bcC\n  q2 = -25 * 10**-6  # -25 \u03bcC\n  q3 = 20 * 10**-6  # 20 \u03bcC\n\n  # Distances\n  d = 1.0  # 1.0 m\n  d_mid = d / 2  # 0.5 m\n\n  # Calculate the force between q1 and q3\n  force_q1_q3 = k * q1 * q3 / (d_mid**2)\n\n  # Calculate the force between q2 and q3\n  force_q2_q3 = k * q2 * q3 / (d_mid**2)\n\n  # Calculate the net force on q3\n  net_force = force_q1_q3 + force_q2_q3\n\n  return net_force",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/linear-dependence3.json",
    "question": "suppose the 10-by-10 matrix A has the form: if i \\neq j, A_{i,j}=a_i*b_j; if i=j,  A_{i,j}=1+a_i*b_j for all 1<=i,j<=10. Here a_i = 1/i, b_i=1/(i+1). Find the determinant of A. return the numeric.",
    "prediction": 1.9090909090909098,
    "answer": 1.9,
    "rationale": "def solve():\n    import numpy as np\n\n    # Initialize the matrix A\n    A = np.zeros((10, 10))\n\n    # Define a_i and b_i\n    a = [1 / (i + 1) for i in range(10)]\n    b = [1 / (i + 2) for i in range(10)]\n\n    # Fill the matrix A\n    for i in range(10):\n        for j in range(10):\n            if i != j:\n                A[i, j] = a[i] * b[j]\n            else:\n                A[i, j] = 1 + a[i] * b[j]\n\n    # Calculate the determinant of A\n    det_A = np.linalg.det(A)\n\n    return det_A",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/Vitali-cover-theorem1.json",
    "question": "the monotone function f on [0,1] is differentiable almost everywhere. This can be proved by: (a) Fubini Theorem; (b) Tonelli Theorem; (c) Vitali Cover Theorem; (d) None of the above. Which option is correct?",
    "prediction": "(d)",
    "answer": "(c)",
    "rationale": "Therefore, the answer is (d) None of the above.",
    "answer_type": "option",
    "correct": false
  },
  {
    "id": "xueguangma/margin_call.json",
    "question": "An investor is looking to purchase a security for $100 with an initial margin of 50% (meaning the investor is using $50 of his money to purchase the security and borrowing the remaining $50 from a broker). In addition, the maintenance margin is 25%. At what price of the security will the investor receive a margin call?",
    "prediction": 66.66666666666667,
    "answer": 66.67,
    "rationale": "def solve():\n  initial_investment = 50\n  borrowed_amount = 50\n  maintenance_margin = 0.25\n\n  # Calculate the total equity at the maintenance margin\n  total_equity = borrowed_amount / (1 - maintenance_margin)\n\n  # Calculate the price of the security at the margin call\n  margin_call_price = total_equity / (initial_investment + borrowed_amount)\n\n  return margin_call_price * 100",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/math_algebra_3_5.json",
    "question": "Consider an m * n matrix A and an n * m matrix B (with n != m) such that AB = I_m. Are the columns of A linearly independent?",
    "prediction": true,
    "answer": false,
    "rationale": "Since AB = I_m, where I_m is the identity matrix of size m * m, it means that the product of matrices A and B results in the identity matrix. This implies that the columns of A are linearly independent because they form the identity matrix when multiplied by the columns of B. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "xueguangma/forward_rate_2.json",
    "question": "If the spot rates for 1 and 2 years are $s_1=6.3%$ and $s_2=6.9%, what is the forward rate $f_{1,2}$?",
    "prediction": 0.07503386641580434,
    "answer": 0.075,
    "rationale": "def solve():\n  s1 = 0.063\n  s2 = 0.069\n\n  f12 = ((1 + s2)**2 / (1 + s1)) - 1\n\n  return f12",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/wiener_process2.json",
    "question": "Let W(t) be the standard Brownian motion, and 0 < s < t. Find the conditional PDF of W(s = 1/2) given that W(t = 1) = 2. What are the mean and variance? Return the list of [mean, variance].",
    "prediction": [
      1.0,
      0.25
    ],
    "answer": [
      1,
      0
    ],
    "rationale": "def solve():\n    import numpy as np\n\n    # Given values\n    s = 1/2\n    t = 1\n    W_t = 2\n\n    # Conditional mean and variance\n    mean = W_t * s / t\n    variance = s * (1 - s)\n\n    return [mean, variance]",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "xueguangma/real_exchange_rate.json",
    "question": "assume you are Indonesian. In 2010, the rupiah exchange rate was around IDR15,000/USD, and the consumer price index in Indonesia and the United States was at 100. In 2019, the exchange rate changed to IDR14,000/USD. Simultaneously, Indonesia\u2019s inflation rose 5% due to the consumer price index rising to 105. Meanwhile, the United States\u2019 inflation rate rose 10% due to the consumer price index rising to 110. Whats the real exchange rate?",
    "prediction": 14666.666666666666,
    "answer": 14666.67,
    "rationale": "def solve():\n  exchange_rate_2010 = 15000\n  exchange_rate_2019 = 14000\n  cpi_indonesia_2010 = 100\n  cpi_indonesia_2019 = 105\n  cpi_usa_2010 = 100\n  cpi_usa_2019 = 110\n\n  real_exchange_rate = (exchange_rate_2019 * cpi_usa_2019) / cpi_indonesia_2019\n  return real_exchange_rate",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/fourier-analysis2.json",
    "question": "suppose $x=\\sqrt{17}/17$. what is the value of $\\frac{2}{\\pi} \\int_0^{+\\infty} \\frac{\\sin ^2 t}{t^2} cos(2xt) dt$? Rounding it to the hundredths place and return the value.",
    "prediction": 0.76,
    "answer": 0.757,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.integrate import quad\n\n    x = np.sqrt(17) / 17\n\n    def integrand(t):\n        return (2 / np.pi) * (np.sin(t) ** 2) / (t ** 2) * np.cos(2 * x * t)\n\n    ans, _ = quad(integrand, 0, np.inf)\n    return round(ans, 2)",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/linear-dependence2.json",
    "question": "suppose a,b,c,\\alpha,\\beta,\\gamma are six real numbers with a^2+b^2+c^2>0.  In addition, $a=b*cos(\\gamma)+c*cos(\\beta), b=c*cos(\\alpha)+a*cos(\\gamma), c=a*cos(\\beta)+b*cos(\\alpha)$. What is the value of $cos^2(\\alpha)+cos^2(\\beta)+cos^2(\\gamma)+2*cos(\\alpha)*cos(\\beta)*cos(\\gamma)? return the numeric.",
    "prediction": 0,
    "answer": 1.0,
    "rationale": "def solve():\n    import sympy as sp\n\n    a, b, c, alpha, beta, gamma = sp.symbols('a b c alpha beta gamma', real=True)\n    eq1 = a - (b * sp.cos(gamma) + c * sp.cos(beta))\n    eq2 = b - (c * sp.cos(alpha) + a * sp.cos(gamma))\n    eq3 = c - (a * sp.cos(beta) + b * sp.cos(alpha))\n\n    # Square each equation and sum them\n    sum_eq = eq1**2 + eq2**2 + eq3**2\n\n    # Replace a^2 + b^2 + c^2 with x\n    x = sp.Symbol('x', real=True)\n    sum_eq = sum_eq.subs(a**2 + b**2 + c**2, x)\n\n    # Simplify the equation\n    sum_eq = sp.simplify(sum_eq)\n\n    # Divide the equation by x\n    sum_eq = sum_eq / x\n\n    # The required expression is equal to the sum_eq\n    ans = sum_eq\n\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/mueller1.json",
    "question": "Perform 2 iterations with the M\u00fcller method for the following equation: x^3 - 1/2 = 0, x_0 = 0, x_1 = 1, x_2 = 1/2. What's the decimal value of x_3?",
    "prediction": 0.7422960011882245,
    "answer": 0.7929,
    "rationale": "def solve():\n    import cmath\n\n    def f(x):\n        return x**3 - 1/2\n\n    x0 = 0\n    x1 = 1\n    x2 = 1/2\n\n    for _ in range(2):\n        q = (x2 - x1) / (x1 - x0)\n        A = q * f(x2) - q * (1 + q) * f(x1) + q**2 * f(x0)\n        B = (2 * q + 1) * f(x2) - (1 + q)**2 * f(x1) + q**2 * f(x0)\n        C = (1 + q) * f(x2)\n\n        r = x2 - (x2 - x1) * min(abs(B + cmath.sqrt(B**2 - 4 * A * C)), abs(B - cmath.sqrt(B**2 - 4 * A * C))) / (2 * A)\n\n        x0, x1, x2 = x1, x2, r\n\n    return x2.real",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/cv-colorsci3-rgb.json",
    "question": "Given 3 Colors whose RGB representations are given as follows: Color 1: (0.5, 0.5, 0.5), Color 2: (0.4, 0.6, 0.5), Color 3: (0.3, 0.7, 0.5), Which Color does not carry chrominance (Color) Information? Answer with 1 or 2 or 3.",
    "prediction": 1,
    "answer": 1,
    "rationale": "def solve():\n    color1 = (0.5, 0.5, 0.5)\n    color2 = (0.4, 0.6, 0.5)\n    color3 = (0.3, 0.7, 0.5)\n\n    def is_gray(color):\n        return color[0] == color[1] == color[2]\n\n    if is_gray(color1):\n        return 1\n    elif is_gray(color2):\n        return 2\n    elif is_gray(color3):\n        return 3\n    else:\n        return \"None of the colors are gray\"",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "elainewan/math_real_analysis_additional_1.json",
    "question": "Let (x_n) be a sequence defined by x_1 = 2 and x_{n+1} = 1 + 1/(1 + x_n). If (x_n) converges, what must its limit be in decimals?",
    "prediction": 1.4142135624,
    "answer": 1.414,
    "rationale": "def solve():\n    def next_x(x):\n        return 1 + 1 / (1 + x)\n\n    x = 2\n    prev_x = None\n    epsilon = 1e-10\n\n    while prev_x is None or abs(x - prev_x) > epsilon:\n        prev_x = x\n        x = next_x(x)\n\n    return round(x, 10)",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/Equivalence-of-Norms-Theorem1.json",
    "question": "Suppose C[0,1] denotes the space of all the continuous functions on the interval [0,1]. Is (C[0,1],\\|\\cdot\\|_1 ) a Banach space? Here $\\|f(x)\\|_1=\\int_0^1 |f(t)|dt$ with $f\\in C[0,1]$. Answer 1 for yes and 0 for no.",
    "prediction": 0,
    "answer": 0.0,
    "rationale": "def solve():\n    # The given norm is the L1 norm\n    # We need to check if (C[0,1], ||.||_1) is a Banach space\n    # A Banach space is a complete normed vector space\n    # In this case, (C[0,1], ||.||_1) is not a Banach space because it is not complete\n    # Counterexample: consider the sequence of continuous functions f_n(x) = x^n on [0,1]\n    # This sequence converges pointwise to a discontinuous function (0 for x in [0,1) and 1 for x=1)\n    # Therefore, (C[0,1], ||.||_1) is not a Banach space\n    ans = 0\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xinyi/shannon_lower_bound.json",
    "question": "Consider a source X uniform on $\\{1,2,\\ldots,m\\}$ with a distortion measure $d(x, \\hat{x})$ that satisfies the following property: all rows and columns of the distortion matrix are permutations of the set $\\{d_1, d_2, \\ldots, d_m\\}$. Then the Shannon lower bound is tight. i.e. $R(D)=H(X)-\\phi(D)$. True or False?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "wenhuchen/derivative2.json",
    "question": "Does the function $y=xe^{-x^2/2}$, does it satisfy the equation $xy' = (1 - x^2)y$",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if the function $y=xe^{-x^2/2}$ satisfies the equation $xy' = (1 - x^2)y$, we need to find the derivative of the function with respect to $x$ and then plug it into the equation.\n\nThe function is $y=xe^{-x^2/2}$. Let's find its derivative $y'$:\n\nUsing the product rule, we have:\n\n$y' = (1)e^{-x^2/2} + x(-x)e^{-x^2/2}$\n\n$y' = e^{-x^2/2} - x^2e^{-x^2/2}$\n\nNow, let's plug $y$ and $y'$ into the equation $xy' = (1 - x^2)y$:\n\n$x(e^{-x^2/2} - x^2e^{-x^2/2}) = (1 - x^2)(xe^{-x^2/2})$\n\nNow, let's simplify the equation:\n\n$xe^{-x^2/2} - x^3e^{-x^2/2} = xe^{-x^2/2} - x^3e^{-x^2/2}$\n\nAs we can see, both sides of the equation are equal. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "xueguangma/binomial_lattice.json",
    "question": "The stock of the CCC Corporation is currently valued at $12 and is assumed to possess all the properties of geometric Brownian motion. It has an expected annual return of 15%, an annual volatility of 20%, and the annual risk-free is 10%. Using a binomial lattice, determine the price of a call option on CCC stock maturing in 10 monthes time with a strike price of $14 (Let the distance between nodes on your tree be 1 month in length).",
    "prediction": 0.5325027228053618,
    "answer": 53.0,
    "rationale": "def solve():\n    import math\n\n    # Parameters\n    S0 = 12  # initial stock price\n    K = 14  # strike price\n    T = 10 / 12  # time to maturity (in years)\n    r = 0.1  # risk-free interest rate\n    sigma = 0.2  # volatility\n    n = 10  # number of time steps in the binomial tree\n\n    # Calculate the time step size\n    dt = T / n\n\n    # Calculate the up and down factors\n    u = math.exp(sigma * math.sqrt(dt))\n    d = 1 / u\n\n    # Calculate the risk-neutral probability\n    q = (math.exp(r * dt) - d) / (u - d)\n\n    # Initialize the binomial tree\n    tree = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    # Calculate the stock prices at each node\n    for i in range(n + 1):\n        for j in range(i + 1):\n            tree[i][j] = S0 * (u ** j) * (d ** (i - j))\n\n    # Calculate the option values at the final nodes\n    for j in range(n + 1):\n        tree[n][j] = max(tree[n][j] - K, 0)\n\n    # Backward induction to find the option value at the root node\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1):\n            tree[i][j] = math.exp(-r * dt) * (q * tree[i + 1][j + 1] + (1 - q) * tree[i + 1][j])\n\n    # Return the option value at the root node\n    return tree[0][0]",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/atom1.json",
    "question": "Find the fraction of 7.7-MeV alpha particles that is deflected at an angle of 90\u00b0 or more from a gold foil of 10^-6 m thickness.",
    "prediction": 4.1749204770070525e-06,
    "answer": 4e-05,
    "rationale": "import math\ndef solve():\n    Z = 79  # atomic number of gold\n    e = 1.6 * 10**-19  # elementary charge in C\n    epsilon0 = 8.85 * 10**-12  # vacuum permittivity in C^2 / N m^2\n    E = 7.7 * 10**6 * 1.6 * 10**-19  # energy of the alpha particle in J\n    theta = math.radians(90)  # scattering angle in radians\n\n    # Calculate the impact parameter (b) for a scattering angle of 90\u00b0\n    b_90 = (2 * Z * e**2) / (4 * math.pi * epsilon0 * E * math.sin(theta/2))\n\n    # Calculate the fraction of alpha particles that have an impact parameter less than or equal to b_90\n    fraction = (b_90 / (10**-6)) * 100\n\n    return fraction",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/vieta's_formula5.json",
    "question": "The product of two of the four roots of the quartic equation x^4 - 18x^3 +kx2 + 200x - 1984 = 0 is -32. Determine the value of k.",
    "prediction": 0,
    "answer": 86,
    "rationale": "def solve():\n    from sympy import symbols, Eq, solve\n\n    x, k = symbols('x k')\n    quartic_eq = x**4 - 18*x**3 + k*x**2 + 200*x - 1984\n    roots = solve(quartic_eq, x)\n\n    # Since the product of two of the roots is -32, we can try all possible pairs of roots\n    for i in range(len(roots)):\n        for j in range(i+1, len(roots)):\n            if roots[i] * roots[j] == -32:\n                # We found the pair of roots, now we can find the value of k\n                k_value = solve(roots[i].subs(x, roots[j]), k)[0]\n                return k_value",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/cv-imageprocessing14-chaincode.json",
    "question": "Figure Q8 shows the contour of an object. Represent it with an 4-directional chain code. Represent the answer as a list with each digit as a element.",
    "prediction": [
      1.528,
      0.0
    ],
    "answer": [
      0,
      0,
      3,
      3,
      3,
      3,
      2,
      3,
      2,
      2,
      1,
      2,
      1,
      1,
      1,
      0,
      0,
      1
    ],
    "rationale": "",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_2_13.json",
    "question": "What is \\lim_{x \\to 0} (x \\lfloor 1/x \rfloor)?",
    "prediction": 1,
    "answer": 1,
    "rationale": "def solve():\n    import sympy as sp\n\n    x = sp.Symbol('x')\n    floor_term = sp.floor(1/x)\n    limit_expression = x * floor_term\n    ans = sp.limit(limit_expression, x, 0)\n\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/kinetics1.json",
    "question": "A gun is designed that can launch a projectile of mass 10 kg at a speed of 200 m/s. The gun is placed close to a straight, horizontal railway line and aligned such that the projectile will land further down the line. A small rail car of mass 200 kg and travelling at a speed of 100 m/s passes the gun just as it is fired. Assuming the gun and the car are at the same level, at what angle upwards must the projectile be fired so that it lands in the rail car?",
    "prediction": 0.14051846271702578,
    "answer": 60.0,
    "rationale": "def solve():\n    import math\n\n    # Constants\n    mass_projectile = 10  # kg\n    speed_projectile = 200  # m/s\n    mass_railcar = 200  # kg\n    speed_railcar = 100  # m/s\n\n    # Calculate the horizontal distance the railcar will travel during the time the projectile is in the air\n    time_in_air = (2 * mass_projectile * speed_projectile) / (mass_railcar * speed_railcar)\n    horizontal_distance = speed_railcar * time_in_air\n\n    # Calculate the angle required for the projectile to land in the railcar\n    angle_radians = math.atan((speed_projectile**2 - math.sqrt(speed_projectile**4 - (9.81 * horizontal_distance)**2)) / (9.81 * horizontal_distance))\n    angle_degrees = math.degrees(angle_radians)\n\n    return angle_degrees",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_14.json",
    "question": "Does r(t) = [8 - 4t^3, 2 + 5t^2, 9t^3] parametrize a line?",
    "prediction": false,
    "answer": false,
    "rationale": "To determine if r(t) parametrizes a line, we need to check if the derivative of r(t) is a constant vector.\n\nThe derivative of r(t) is:\n\nr'(t) = [-12t^2, 10t, 27t^2]\n\nNow, let's check if r'(t) is a constant vector:\n\nr'(t) is not a constant vector because its components are functions of t.\n\nTherefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "mingyin/series3.json",
    "question": "Let $a_0=5/2$ and $a_k=(a_{k-1})^2-2$ for $k\\geq 1$. Compute $\\prod_{k=0}^{\\infty}(1-1/a_k)$ in closed form.",
    "prediction": 0,
    "answer": 0.42857,
    "rationale": "def solve():\n    a_0 = 5/2\n    a_k = a_0\n    product = 1\n\n    for _ in range(1000):  # We will iterate 1000 times to approximate the infinite product\n        term = 1 - 1/a_k\n        product *= term\n        a_k = a_k**2 - 2\n\n    return product",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/fourier6-FT.json",
    "question": "If x(n) and X(k) are an N-point DFT pair, then x(n+N)=x(n). Is it true?",
    "prediction": 0,
    "answer": true,
    "rationale": "Yes, this statement is true. In the context of the Discrete Fourier Transform (DFT), the time-domain signal x(n) is periodic with a period of N. Therefore, x(n+N) = x(n) for all n.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "mingyin/inversion-theorem1.json",
    "question": "what is the value of $\\int_{-infty}^{+infty} sin(3*t)*sin(t/\\pi)/t^2 dt$?",
    "prediction": 1.0008829308809417,
    "answer": 1.0,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.integrate import quad\n\n    def integrand(t):\n        return np.sin(3 * t) * np.sin(t / np.pi) / t**2\n\n    ans, _ = quad(integrand, -np.inf, np.inf)\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/modulararithmetic4.json",
    "question": "Let S be the set of integers between 1 and 2^40 that contain two 1\u2019s when written in base 2. What is the probability that a random integer from S is divisible by 9?",
    "prediction": 0.17051282051282052,
    "answer": 0.1705,
    "rationale": "def solve():\n    import itertools\n\n    # Calculate the number of integers between 1 and 2^40\n    total_integers = 2**40\n\n    # Generate all combinations of positions for two 1's in a 40-bit binary number\n    positions = list(itertools.combinations(range(40), 2))\n\n    # Count the number of integers in S (with two 1's in their binary representation)\n    count_S = len(positions)\n\n    # Count the number of integers in S that are divisible by 9\n    count_divisible_by_9 = 0\n    for position in positions:\n        # Calculate the integer corresponding to the binary number with 1's at the given positions\n        integer = 2**position[0] + 2**position[1]\n\n        # Check if the integer is divisible by 9\n        if integer % 9 == 0:\n            count_divisible_by_9 += 1\n\n    # Calculate the probability\n    probability = count_divisible_by_9 / count_S\n\n    return probability",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "panlu/wave_length1.json",
    "question": "A ship uses a sonar system to locate underwater objects. Find the wavelength of a 262-Hz wave in water. (Unit: m)",
    "prediction": 5.7251908396946565,
    "answer": 5.65,
    "rationale": "def solve():\n  speed_of_sound = 1500  # m/s\n  frequency = 262  # Hz\n  wavelength = speed_of_sound / frequency\n  return wavelength",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xinyi/newtons_laws_1.json",
    "question": "While a person is walking, his arms swing through approximately a 45\u00b0 angle in 0.5s.As a reasonable approximation, we can assume that the arm moves with constant speed during each swing. A typical arm is 70.0 cm long, measured from the shoulder joint. What is the acceleration (in metre per second squared) of a 1.0 g drop of blood in the fingertips at the bottom of the swing?",
    "prediction": 1.7271807701906376,
    "answer": 1.73,
    "rationale": "def solve():\n  import math\n\n  # Constants\n  angle = 45  # degrees\n  time = 0.5  # seconds\n  arm_length = 0.7  # meters\n  mass = 0.001  # kg (1.0 g)\n\n  # Convert angle to radians\n  angle_rad = math.radians(angle)\n\n  # Calculate the arc length\n  arc_length = arm_length * angle_rad\n\n  # Calculate the linear speed\n  linear_speed = arc_length / time\n\n  # Calculate the centripetal acceleration\n  centripetal_acceleration = (linear_speed ** 2) / arm_length\n\n  return centripetal_acceleration",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/t_test3.json",
    "question": "The following data related the rubber percentage of two types of rubber plants, where the sample have been drawn independently. Test for their mean difference. Type 1: 6.21 5.70 6.04 4.47 5.22 4.45 4.84 5.84 5.88 5.82 6.09 5.59 6.06 5.59 6.74 5.55, Type 2: 4.28 7.71 6.48 7.71 7.37 7.20 7.06 6.40 8.93 5.91 5.51 6.36. Are there difference between these two rubber plants?",
    "prediction": true,
    "answer": true,
    "rationale": "To test for the mean difference between the two types of rubber plants, we will use the two-sample t-test. First, we need to calculate the mean, standard deviation, and sample size for each type.\n\nType 1:\nMean: (6.21 + 5.70 + 6.04 + 4.47 + 5.22 + 4.45 + 4.84 + 5.84 + 5.88 + 5.82 + 6.09 + 5.59 + 6.06 + 5.59 + 6.74 + 5.55) / 16 = 5.61\nStandard deviation: 0.74\nSample size: 16\n\nType 2:\nMean: (4.28 + 7.71 + 6.48 + 7.71 + 7.37 + 7.20 + 7.06 + 6.40 + 8.93 + 5.91 + 5.51 + 6.36) / 12 = 6.52\nStandard deviation: 1.34\nSample size: 12\n\nNow, we can perform the two-sample t-test using the following formula:\n\nt = (mean1 - mean2) / sqrt((sd1^2 / n1) + (sd2^2 / n2))\n\nt = (5.61 - 6.52) / sqrt((0.74^2 / 16) + (1.34^2 / 12)) = -2.34\n\nNow, we need to find the critical t-value for a two-tailed test with a significance level of 0.05 and degrees of freedom (df) equal to the smaller of n1 - 1 and n2 - 1, which is min(15, 11) = 11. The critical t-value for a two-tailed test with df = 11 and \u03b1 = 0.05 is approximately \u00b12.201.\n\nSince the calculated t-value (-2.34) is less than the critical t-value (-2.201), we reject the null hypothesis that there is no difference between the means of the two types of rubber plants.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "tonyxia/statisticalphysics4.json",
    "question": "Compute the mean molecular speed v in the heavy gas radon (Rn) in m/s",
    "prediction": 6.0677565592826305e-21,
    "answer": 167.0,
    "rationale": "",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/cv-colorsci4-hsi.json",
    "question": "Given 2 colors whose HSI representations are given as follows: which color looks closer to blue? (a) Color 1: $(\\pi, 0.3,0.5)$, (b) Color 2: $(0.5 \\pi, 0.8,0.3)$",
    "prediction": "(b)",
    "answer": "(a)",
    "rationale": "To determine which color looks closer to blue, we need to compare the hue values of the given colors to the hue value of blue. In the HSI color space, blue has a hue value of $\\frac{2}{3}\\pi$.\n\nColor 1 has a hue value of $\\pi$, and Color 2 has a hue value of $0.5\\pi$. We can calculate the difference between the hue values of the given colors and blue:\n\nDifference for Color 1: $|\\pi - \\frac{2}{3}\\pi| = \\frac{1}{3}\\pi$\nDifference for Color 2: $|0.5\\pi - \\frac{2}{3}\\pi| = \\frac{1}{6}\\pi$\n\nSince the difference for Color 2 is smaller than the difference for Color 1, Color 2 looks closer to blue. Therefore, the answer is (b).",
    "answer_type": "option",
    "correct": false
  },
  {
    "id": "jianyu_xu/Ramsey_5.json",
    "question": "Coloring the edges of a complete graph with n vertices in 2 colors (red and blue), what is the smallest n that guarantees there is either a 4-clique in red or a 5-clique in blue?",
    "prediction": 3,
    "answer": 25,
    "rationale": "def solve():\n    def ramsey_theory(r, b):\n        n = 1\n        while True:\n            red_cliques = n * (n - 1) // 2 - (n - r + 1) * (n - r) // 2\n            blue_cliques = n * (n - 1) // 2 - (n - b + 1) * (n - b) // 2\n            if red_cliques + blue_cliques >= n * (n - 1) // 2:\n                return n\n            n += 1\n\n    ans = ramsey_theory(4, 5)\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/Lebesgue-measure1.json",
    "question": "Let $A=\\{n+\\sum_{p=1}^{\\infty} a_p 2^{-2p}: n \\in \\mathbf{Z}, a_p=0 or 1 \\}$. What is the Lebesgue measure of A?",
    "prediction": 1.25,
    "answer": 0.0,
    "rationale": "def solve():\n    # The Lebesgue measure of A can be calculated as follows:\n    # Since the sum is a geometric series, we can find the sum as:\n    # sum = a_1 * (1 - r^2) / (1 - r), where a_1 = 1 and r = 1/4\n    sum_of_series = 1 * (1 - (1/4)**2) / (1 - 1/4)\n    \n    # The Lebesgue measure of A is the sum of the series\n    ans = sum_of_series\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "panlu/gravitational_force2.json",
    "question": "A robotic lander with an earth weight of 3430 N is sent to Mars, which has radius $R_M=3.40 \\times 10^6 m$ and mass $m_M=6.42 \\times$ $10^{23} kg$. Find the acceleration there due to gravity. (Unit: $m/s^2$)",
    "prediction": 3.7066614186851212,
    "answer": 3.7,
    "rationale": "def solve():\n  # Constants\n  G = 6.67430e-11  # Gravitational constant, m^3 kg^-1 s^-2\n  m_M = 6.42e23  # Mass of Mars, kg\n  R_M = 3.40e6  # Radius of Mars, m\n\n  # Calculate the acceleration due to gravity on Mars\n  g_Mars = G * m_M / (R_M ** 2)\n\n  return g_Mars",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/future_value_1.json",
    "question": "For a $1,000 investment, what is the future value of the investment if the interest rate is 8% compounded annually for 3 years?",
    "prediction": 1259.7120000000002,
    "answer": 1259.71,
    "rationale": "def solve():\n  principal = 1000\n  interest_rate = 0.08\n  years = 3\n\n  future_value = principal * (1 + interest_rate) ** years\n  return future_value",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/martingale2.json",
    "question": "Let $W(t)$ be a Bownian motion, Let $E[exp(i*W(t))]:= E[cos(W(t))+i*sin(W(t))]$, where $i=\\sqrt{-1}$. Is $M(t):=exp(i*W(t))/E[exp(i*W(t))]$ a matingale? Return 1 for yes and 0 for no.",
    "prediction": 1,
    "answer": 1.0,
    "rationale": "def solve():\n    import numpy as np\n\n    # The given question is a theoretical one and requires knowledge of stochastic processes.\n    # We can use the property of martingales to determine if M(t) is a martingale or not.\n    # A process M(t) is a martingale if E[M(t+s) | F(t)] = M(t) for all s > 0, where F(t) is the filtration at time t.\n\n    # Let's consider the given process M(t) = exp(i*W(t)) / E[exp(i*W(t))]\n    # We know that E[exp(i*W(t))] = E[cos(W(t)) + i*sin(W(t))] = E[cos(W(t))] + i*E[sin(W(t))]\n    # Since W(t) is a Brownian motion, it has a normal distribution with mean 0 and variance t.\n    # Therefore, E[cos(W(t))] = cos(0) = 1 and E[sin(W(t))] = sin(0) = 0\n    # So, E[exp(i*W(t))] = 1 + 0i = 1\n\n    # Now, M(t) = exp(i*W(t)) / 1 = exp(i*W(t))\n    # Let's compute E[M(t+s) | F(t)]:\n    # E[M(t+s) | F(t)] = E[exp(i*W(t+s)) | F(t)] = E[exp(i*(W(t) + W(s))) | F(t)]\n    # Since W(t) and W(s) are independent, we can write:\n    # E[exp(i*(W(t) + W(s))) | F(t)] = E[exp(i*W(t)) * exp(i*W(s)) | F(t)]\n    # Using the property of conditional expectation, we get:\n    # E[exp(i*W(t)) * exp(i*W(s)) | F(t)] = E[exp(i*W(t)) | F(t)] * E[exp(i*W(s))]\n    # We know that E[exp(i*W(t)) | F(t)] = exp(i*W(t)) and E[exp(i*W(s))] = 1\n    # Therefore, E[M(t+s) | F(t)] = exp(i*W(t)) * 1 = exp(i*W(t)) = M(t)\n\n    # Since E[M(t+s) | F(t)] = M(t) for all s > 0, M(t) is a martingale.\n    ans = 1\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "jianyu_xu/Burnside_2.json",
    "question": "How many ways are there to color the faces of a cube with three colors, up to rotation?",
    "prediction": 33,
    "answer": 57,
    "rationale": "def solve():\n    # There are 3 cases to consider:\n    # 1. All faces have the same color\n    # 2. Two faces have one color, two faces have another color, and the remaining two faces have the third color\n    # 3. Four faces have one color, and the remaining two faces have the other two colors\n\n    # Case 1: All faces have the same color\n    case1 = 3\n\n    # Case 2: Two faces have one color, two faces have another color, and the remaining two faces have the third color\n    # There are 3 ways to choose the first color, 2 ways to choose the second color, and 1 way to choose the third color\n    # There are 3 ways to arrange the colors on the cube\n    case2 = 3 * 2 * 1 * 3\n\n    # Case 3: Four faces have one color, and the remaining two faces have the other two colors\n    # There are 3 ways to choose the color for the four faces, and 2 ways to choose the color for one of the remaining faces\n    # There are 2 ways to arrange the colors on the cube\n    case3 = 3 * 2 * 2\n\n    ans = case1 + case2 + case3\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "elainewan/math_abstact_algebra_7_4.json",
    "question": "G = Q, and G is under the operation a * b = a + b + 3. Is G a group?",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if G is a group under the given operation, we need to check if it satisfies the four group axioms:\n\n1. Closure: For all a, b in G, a * b = a + b + 3 must also be in G.\n2. Associativity: For all a, b, c in G, (a * b) * c = a * (b * c).\n3. Identity element: There exists an element e in G such that for all a in G, a * e = e * a = a.\n4. Inverse element: For each element a in G, there exists an element b in G such that a * b = b * a = e, where e is the identity element.\n\nLet's check each axiom:\n\n1. Closure: Since G = Q (the set of rational numbers), the sum of any two rational numbers and 3 will also be a rational number. So, closure holds.\n\n2. Associativity: For all a, b, c in G,\n(a * b) * c = (a + b + 3) * c = (a + b + 3) + c + 3 = a + b + c + 6\na * (b * c) = a * (b + c + 3) = a + (b + c + 3) + 3 = a + b + c + 6\nSince (a * b) * c = a * (b * c), associativity holds.\n\n3. Identity element: Let's find e such that a * e = a for all a in G.\na * e = a + e + 3\nTo satisfy this equation, e must be -3. So, the identity element e = -3.\n\n4. Inverse element: Let's find the inverse element b for each element a in G such that a * b = e.\na * b = a + b + 3 = -3 (since e = -3)\nTo satisfy this equation, b must be -a - 6. So, the inverse element b = -a - 6.\n\nSince G satisfies all four group axioms, it is a group under the given operation. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "wenhuchen/vieta's_formula.json",
    "question": "Let m and n be the roots of the equation 2x^2 + 15x + 16 = 0. What is the value of 1/m + 1/n?",
    "prediction": -0.9374999999999999,
    "answer": -0.9375,
    "rationale": "def solve():\n    import math\n\n    # Coefficients of the quadratic equation\n    a = 2\n    b = 15\n    c = 16\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Find the roots of the equation\n    m = (-b + math.sqrt(discriminant)) / (2*a)\n    n = (-b - math.sqrt(discriminant)) / (2*a)\n\n    # Calculate the value of 1/m + 1/n\n    ans = (1/m) + (1/n)\n\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "panlu/similarity5.json",
    "question": "In triangle ACD, B is located on the side AC, and E is located on the side AD. If AB = 3, AC = 5, CD = 3.5, ED = 3, and EB \u2225 DC, what is the length of AD?",
    "prediction": 4.73392015141785,
    "answer": 7.5,
    "rationale": "def solve():\n    # Given values\n    AB = 3\n    AC = 5\n    CD = 3.5\n    ED = 3\n\n    # Since EB is parallel to DC, triangle ABE is similar to triangle ADC\n    # Therefore, the ratio of corresponding sides is equal\n    # AB/AC = BE/CD\n    BE = (AB * CD) / AC\n\n    # Now, we can find AE using the Pythagorean theorem in triangle ABE\n    AE = ((AB ** 2) + (BE ** 2)) ** 0.5\n\n    # Finally, we can find AD using the Pythagorean theorem in triangle AED\n    AD = ((AE ** 2) + (ED ** 2)) ** 0.5\n\n    return AD",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xinyi/Concavity_of_second_law_of_thermodynamics.json",
    "question": "$H(X_n|X_0)$ is a concave function of n for a stationary Markov process. True or False?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "elainewan/math_algebra_3_2.json",
    "question": "Are the vectors v_1 = [1,2,3], v_2 = [4,5,6], v_3 = [7,8,9] linearly independent?",
    "prediction": false,
    "answer": false,
    "rationale": "To determine if the vectors v_1 = [1,2,3], v_2 = [4,5,6], and v_3 = [7,8,9] are linearly independent, we can check if the determinant of the matrix formed by these vectors is non-zero.\n\nThe matrix formed by these vectors is:\n\n| 1  4  7 |\n| 2  5  8 |\n| 3  6  9 |\n\nCalculating the determinant:\n\n| 1  4  7 |     | 5  8 |     | 2  8 |     | 2  5 |\n| 2  5  8 | = 1 | 6  9 | - 4 | 3  9 | + 7 | 3  6 |\n| 3  6  9 |     |       |     |       |     |       |\n\n= 1((5 * 9) - (6 * 8)) - 4((2 * 9) - (3 * 8)) + 7((2 * 6) - (3 * 5))\n\n= 1(-3) - 4(-6) + 7(-3)\n\n= -3 + 24 - 21\n\n= 0\n\nSince the determinant is 0, the vectors are not linearly independent.\n\nTherefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "elainewan/econ_micro_16.json",
    "question": "Suppose there are 8,000 hours in a year (actually there are 8,760) and that an individual has a potential market wage of $5 per hour. Suppose a rich uncle dies and leaves the individual an annual income of $4,000 per year. If he or she devotes 75 percent of full income to leisure, how many hours will be worked?",
    "prediction": 2200.0,
    "answer": 1400,
    "rationale": "def solve():\n  # Constants\n  hours_in_year = 8000\n  wage_per_hour = 5\n  annual_income = 4000\n\n  # Calculate full income\n  full_income = hours_in_year * wage_per_hour + annual_income\n\n  # Calculate income devoted to leisure\n  leisure_income = 0.75 * full_income\n\n  # Calculate income devoted to work\n  work_income = full_income - leisure_income\n\n  # Calculate hours worked\n  hours_worked = work_income / wage_per_hour\n\n  return hours_worked",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "jianyu_xu/Graph_2.json",
    "question": "How many labeled trees are there on 6 vertices?",
    "prediction": 1296,
    "answer": 1296,
    "rationale": "def solve():\n  n = 6\n  return n ** (n - 2)",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/kepler's_law2.json",
    "question": "The mass of Earth is 5.97x10^24 kg, the mass of the Moon is 7.35x10^22 kg, and the mean distance of the Moon from the center of Earth is 3.84x105 km. The magnitude of the gravitational force exerted by Earth on the Moon is X * 10^20 N. What is X? Return a numeric value.",
    "prediction": 1.9861175323486322,
    "answer": 1.99,
    "rationale": "def solve():\n    # import library\n    import math\n\n    # Constants\n    G = 6.67430 * 10**(-11)  # Gravitational constant, m^3 kg^-1 s^-2\n    mass_earth = 5.97 * 10**24  # kg\n    mass_moon = 7.35 * 10**22  # kg\n    distance = 3.84 * 10**8  # m (converted from km to m)\n\n    # Calculate the gravitational force\n    force = G * mass_earth * mass_moon / distance**2\n\n    # Convert the force to the required format\n    ans = force / 10**20\n\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/integral-theorem3.json",
    "question": "What is the value of the integral $\\int_2^4 \\frac{\\sqrt{log(9-x)}}{\\sqrt{log(9-x)}+\\sqrt{log(x+3)}} dx$?",
    "prediction": 0,
    "answer": 1.0,
    "rationale": "def solve():\n  import numpy as np\n  from scipy.integrate import quad\n\n  def integrand(x):\n    return np.sqrt(np.log(9 - x)) / (np.sqrt(np.log(9 - x)) + np.sqrt(np.log(x + 3)))",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/math_abstact_algebra_7_8.json",
    "question": "Are groups Z_4 * Z_2 and D_4 isomorphic?",
    "prediction": true,
    "answer": false,
    "rationale": "To determine if the groups Z_4 * Z_2 and D_4 are isomorphic, we can compare their orders and structures.\n\nThe order of Z_4 * Z_2 is 4 * 2 = 8, and the order of D_4 (the dihedral group of order 8) is also 8. Since they have the same order, they could potentially be isomorphic.\n\nNow let's examine their structures. Z_4 * Z_2 is the direct product of two cyclic groups, Z_4 and Z_2. It has elements of the form (a, b), where a is an element of Z_4 and b is an element of Z_2. The group operation is component-wise addition modulo the respective orders of the cyclic groups.\n\nD_4 is the group of symmetries of a square, which includes rotations and reflections. It has 8 elements: the identity, three rotations (90, 180, and 270 degrees), and four reflections (across the horizontal, vertical, and two diagonal axes).\n\nTo check if these groups are isomorphic, we can look for a one-to-one correspondence between their elements that preserves the group operation. We can try to map the elements of Z_4 * Z_2 to the elements of D_4 as follows:\n\n(0, 0) -> identity\n(1, 0) -> 90-degree rotation\n(2, 0) -> 180-degree rotation\n(3, 0) -> 270-degree rotation\n(0, 1) -> horizontal reflection\n(1, 1) -> vertical reflection\n(2, 1) -> diagonal reflection 1\n(3, 1) -> diagonal reflection 2\n\nThis mapping preserves the group operation, as the product of two elements in Z_4 * Z_2 corresponds to the composition of their images in D_4. Therefore, the groups Z_4 * Z_2 and D_4 are isomorphic.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "maxku/signalprocessing9-signalrep.json",
    "question": "The following signal $x_1(t)=\\cos (3 \\pi t)-4 \\cos (5 \\pi t-0.5 \\pi)$ can be expressed as $x_1(t)=\\operatorname{Real}\\left(A e^{j \\pi B t}\\right)+\\operatorname{Real}\\left(D e^{j \\pi E t}\\right)$. What are B,E?",
    "prediction": 0,
    "answer": [
      3,
      5
    ],
    "rationale": "def solve():\n    import sympy as sp\n\n    t = sp.Symbol('t')\n    x1 = sp.cos(3 * sp.pi * t) - 4 * sp.cos(5 * sp.pi * t - 0.5 * sp.pi)\n\n    # Express x1 in terms of exponential\n    x1_exp = sp.expand(sp.re(sp.exp(sp.I * 3 * sp.pi * t)) - 4 * sp.re(sp.exp(sp.I * (5 * sp.pi * t - 0.5 * sp.pi)))))\n\n    # Check if x1 and x1_exp are equal\n    if sp.simplify(x1 - x1_exp) == 0:\n        B = 3\n        E = 5\n    else:\n        B = None\n        E = None\n\n    return [B, E]",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "panlu/kite1.json",
    "question": "The diagonals of kite WXYZ intersect at P. If XP = 8, PZ = 8, WP = 6, and PY = 24, find ZY.",
    "prediction": 18.76166303929372,
    "answer": 25.3,
    "rationale": "def solve():\n  # Given values\n  XP = 8\n  PZ = 8\n  WP = 6\n  PY = 24\n\n  # Using the properties of kite, we know that XP = PZ and WP = PY/2\n  # So, we can find WY using the Pythagorean theorem\n  WY = ((PY / 2) ** 2 + XP ** 2) ** 0.5\n\n  # Now, we can find ZY using the Pythagorean theorem again\n  ZY = (WY ** 2 + (PY / 2) ** 2) ** 0.5\n\n  return ZY",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xueguangma/delta_gamma_approximation.json",
    "question": "Assume that the Black-Scholes framework holds. The price of a nondividened-paying stock is $30. The price of a put option on this stock is $4.00. You are given $(i) $\\Delta=-0.28$. (ii) $\\Gamma=0.10$ Using the delta-gamma approximation, determine the price of the put option if the stock price changes to $31.50.",
    "prediction": 3.6925,
    "answer": 3.7,
    "rationale": "def solve():\n    initial_stock_price = 30\n    put_option_price = 4\n    delta = -0.28\n    gamma = 0.10\n    new_stock_price = 31.50\n\n    # Delta-Gamma approximation formula\n    price_change = new_stock_price - initial_stock_price\n    new_put_option_price = put_option_price + delta * price_change + 0.5 * gamma * (price_change ** 2)\n\n    return new_put_option_price",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "jianyu_xu/derangement_1.json",
    "question": "How many ways are there to arrange 9 people in a line such that no one is standing in their correct position?",
    "prediction": 133496,
    "answer": 133496,
    "rationale": "def solve():\n    import math\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    n = 9\n    ans = derangement(n)\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "xinyi/markov_inequality.json",
    "question": "Let $X$ be uniformly distributed over $\\{1, 2, \\ldots, m\\}$. Assume $m=2^n$ . We ask random questions: Is $X\\in S_1$? Is $X\\in S_2$? ... until only one integer remains. All $2^m$ subsets of $\\{1, 2, \\ldots, m\\}$ are equally likely. Suppose we ask $n+\\sqrt{n}$ random questions. Use Markov's inequality to find the probability of error (one or more wrong objects remaining) when $n$ goes to infinity?",
    "prediction": 0.000999000999000999,
    "answer": 0.0,
    "rationale": "def solve():\n    import math\n\n    def markov_inequality(n):\n        return 1 / (1 + math.sqrt(n))\n\n    n = 1000000  # Large value of n to approximate the limit as n goes to infinity\n    error_probability = markov_inequality(n)\n\n    return error_probability",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xueguangma/maclaurin_series.json",
    "question": "If $|x|$ is less than 0.7, then if we use fifth Maclaurin polynomial approximate $sin(x)$ the error is less than 0.0001. Is this correct? Answer True or False.",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if this statement is correct, we need to find the error bound for the fifth-degree Maclaurin polynomial approximation of sin(x). The Maclaurin polynomial for sin(x) is given by:\n\n$sin(x) \u2248 x - \\frac{x^3}{3!} + \\frac{x^5}{5!} - \\frac{x^7}{7!} + ...$\n\nThe error bound for a Maclaurin polynomial is given by the Lagrange error bound formula:\n\n$|R_n(x)| \u2264 \\frac{M}{(n+1)!}|x|^{n+1}$\n\nwhere $R_n(x)$ is the remainder (error) after the nth term, M is the maximum value of the (n+1)th derivative of the function on the interval, and n is the degree of the polynomial.\n\nFor the fifth-degree Maclaurin polynomial (n=5), we need to find the maximum value of the 6th derivative of sin(x) on the interval $|x| < 0.7$. The 6th derivative of sin(x) is sin(x) itself, and the maximum value of sin(x) on the given interval is sin(0.7) \u2248 0.6442.\n\nNow, we can plug in the values into the Lagrange error bound formula:\n\n$|R_5(x)| \u2264 \\frac{0.6442}{6!}|x|^6$\n\nSince $|x| < 0.7$, the maximum error occurs when $|x| = 0.7$:\n\n$|R_5(x)| \u2264 \\frac{0.6442}{720}(0.7)^6 \u2248 0.000039$\n\nThe error is less than 0.0001 as stated in the question. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "wenhuchen/parallelogram2.json",
    "question": "ABCD is a parallelogram. E is the midpoint, F is also a midpoint. Area of AFG = 10, Area of EGH = 3. What is Area CDH?",
    "prediction": -3,
    "answer": 7,
    "rationale": "def solve():\n    # Given area of AFG and EGH\n    area_AFG = 10\n    area_EGH = 3\n\n    # Since E and F are midpoints, area of AFG = area of EFG\n    area_EFG = area_AFG\n\n    # Area of parallelogram ABCD = 2 * area of triangle AFG\n    area_ABCD = 2 * area_AFG\n\n    # Area of parallelogram ABCD = area of triangle AFG + area of triangle EFG + area of triangle EGH + area of triangle CDH\n    # area_ABCD = area_AFG + area_EFG + area_EGH + area_CDH\n    # area_CDH = area_ABCD - area_AFG - area_EFG - area_EGH\n    area_CDH = area_ABCD - area_AFG - area_EFG - area_EGH\n\n    return area_CDH",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_2_6.json",
    "question": "What is \\lim_{x \\to 0} (csc(x) - cot(x))?",
    "prediction": 0.0,
    "answer": 0,
    "rationale": "def solve():\n    import math\n\n    def csc(x):\n        return 1 / math.sin(x)\n\n    def cot(x):\n        return 1 / math.tan(x)\n\n    x = 1e-10  # A very small value close to 0\n    ans = csc(x) - cot(x)\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "xueguangma/dividend_discount_model_2.json",
    "question": "Phased Solutions Inc. has paid the following dividends per share from 2011 to 2020:\n2011 | 2012 | 2013 | 2014 | 2015 | 2016 | 2017 | 2018 | 2019 | 2020\n$0.70 | $0.80 | $0.925 | $1.095 | $1.275 | $1.455 | $1.590 | $1.795 | $1.930 | $2.110\nIf you plan to hold this stock for 10 years, believe Phased Solutions will continue this dividend pattern forever, and you want to earn 17% on your investment, what would you be willing to pay per share of Phased Solutions stock as of January 1, 2021?",
    "prediction": 60.27422623691943,
    "answer": 60.23,
    "rationale": "def solve():\n    dividends = [0.70, 0.80, 0.925, 1.095, 1.275, 1.455, 1.590, 1.795, 1.930, 2.110]\n    required_rate_of_return = 0.17\n\n    # Calculate the dividend growth rate\n    dividend_growth_rate = (dividends[-1] / dividends[0]) ** (1 / (len(dividends) - 1)) - 1\n\n    # Calculate the expected dividend for the next year (2021)\n    expected_dividend_2021 = dividends[-1] * (1 + dividend_growth_rate)\n\n    # Calculate the stock price using the Gordon Growth Model\n    stock_price = expected_dividend_2021 / (required_rate_of_return - dividend_growth_rate)\n\n    return stock_price",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "jianyu_xu/Multinomial_4.json",
    "question": "In how many ways can we form a 7-digit number using the digits 1, 2, 2, 3, 3, 3, 3?",
    "prediction": 105,
    "answer": 105,
    "rationale": "def solve():\n    from math import factorial\n\n    # We have 7 digits in total, with 1 occurring once, 2 occurring twice, and 3 occurring four times.\n    # We can use the formula for permutations with repetitions: n! / (n1! * n2! * ... * nk!)\n    n = 7\n    n1 = 1\n    n2 = 2\n    n3 = 4\n\n    ans = factorial(n) // (factorial(n1) * factorial(n2) * factorial(n3))\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "elainewan/math_algebra_6.json",
    "question": "For a matrix A, is the function F(A) = det A from the linear space R^{3*3} to R a linear transformation?",
    "prediction": false,
    "answer": false,
    "rationale": "To determine if F(A) = det A is a linear transformation, we need to check if it satisfies the two properties of linearity:\n\n1. F(A + B) = F(A) + F(B)\n2. F(cA) = cF(A), where c is a scalar.\n\nLet's consider two 3x3 matrices A and B, and a scalar c.\n\n1. F(A + B) = det(A + B)\n   F(A) + F(B) = det(A) + det(B)\n\nIn general, det(A + B) \u2260 det(A) + det(B). Therefore, the first property of linearity is not satisfied.\n\n2. F(cA) = det(cA)\n   cF(A) = c * det(A)\n\nFor a 3x3 matrix, det(cA) = c\u00b3 * det(A). Therefore, F(cA) \u2260 cF(A) in general, and the second property of linearity is not satisfied.\n\nSince both properties of linearity are not satisfied, F(A) = det A is not a linear transformation.\n\nTherefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "elainewan/econ_micro_18_2.json",
    "question": "Suppose there is a 50-50 chance that an individual with logarithmic utility from wealth and with a current wealth of $20,000 will suffer a loss of $10,000 from a car accident. Insurance is competitively provided at actuarially fair rates. Compute the utility if the individual buys full insurance.",
    "prediction": 9.615805480084347,
    "answer": 9.616,
    "rationale": "import math\ndef solve():\n  wealth = 20000\n  premium = 5000\n  wealth_after_insurance = wealth - premium\n  utility = math.log(wealth_after_insurance)\n  return utility",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/dividend_discount_model_5.json",
    "question": "CheckMate forecasts that its dividend will grow at 20% per year for the next four years before settling down at a constant 8% forever. Dividend (current year,2016) = $12; expected rate of return = 15%. What is the fair value of the stock now?",
    "prediction": 272.9522713663423,
    "answer": 273.0,
    "rationale": "def solve():\n    dividend = 12\n    growth_rate_short_term = 0.20\n    growth_rate_long_term = 0.08\n    expected_rate_of_return = 0.15\n\n    # Calculate dividends for the next four years\n    dividends = [dividend * (1 + growth_rate_short_term)**i for i in range(1, 5)]\n\n    # Calculate the dividend for the fifth year\n    dividend_5 = dividends[-1] * (1 + growth_rate_long_term)\n\n    # Calculate the present value of the dividends for the first four years\n    present_value_dividends = sum([d / (1 + expected_rate_of_return)**i for i, d in enumerate(dividends, 1)])\n\n    # Calculate the present value of the perpetuity starting from the fifth year\n    present_value_perpetuity = dividend_5 / (expected_rate_of_return - growth_rate_long_term)\n    present_value_perpetuity_discounted = present_value_perpetuity / (1 + expected_rate_of_return)**4\n\n    # Calculate the fair value of the stock\n    fair_value = present_value_dividends + present_value_perpetuity_discounted\n\n    return fair_value",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "maxku/ipnetwork18-tcp.json",
    "question": "Consider a 900 Kbytes file stored in a web server. Client A sends a request to the server to retrieve the file from a remote location. There are 3 links (2 intermediate nodes) between server and client and each has a transmission rate of 10Mbps. Given that the segment size is 15 Kbytes, the round trip time (RTT) between the server and client is 30ms, the initial slow-start threshold is 8 and the client's buffer has a storage space of 150 K bytes. Assume that TCP Reno is used, there is no loss during transmission and the headers of protocols are ignored. It is noted that the segments do experience a store-and-forward delay in intermediate routers. Determine how many ms client A takes to receive the whole file from the server after sending a request.",
    "prediction": 1087.8719999999998,
    "answer": 918,
    "rationale": "def solve():\n    file_size = 900 * 1024 * 8  # 900 Kbytes in bits\n    segment_size = 15 * 1024 * 8  # 15 Kbytes in bits\n    transmission_rate = 10 * 10**6  # 10 Mbps in bps\n    rtt = 30 * 10**-3  # 30 ms in seconds\n    slow_start_threshold = 8\n    buffer_size = 150 * 1024 * 8  # 150 Kbytes in bits\n\n    # Calculate the time to transmit one segment\n    time_per_segment = segment_size / transmission_rate\n\n    # Calculate the number of segments\n    num_segments = file_size / segment_size\n\n    # Calculate the time to transmit all segments\n    total_time = 0\n    cwnd = 1\n    while num_segments > 0:\n        if cwnd < slow_start_threshold:\n            cwnd *= 2\n        else:\n            cwnd += 1\n\n        num_segments -= cwnd\n        total_time += rtt + (cwnd * time_per_segment)\n\n    return total_time * 1000  # Convert seconds to milliseconds",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "panlu/thermal_stress1.json",
    "question": "An aluminum cylinder 10 cm long, with a cross-sectional area of 20 $cm^2$ is used as a spacer between two steel walls. At 17.2\u00b0C it just slips between the walls. Calculate the stress in the cylinder and the total force it exerts on each wall when it warms to 22.3\u00b0C assuming that the walls are perfectly rigid and a constant distance apart. (Unit: 10^4 N)",
    "prediction": 1.6257780000000004,
    "answer": -1.7,
    "rationale": "def solve():\n  # Constants\n  length = 10  # cm\n  area = 20  # cm^2\n  initial_temp = 17.2  # \u00b0C\n  final_temp = 22.3  # \u00b0C\n  alpha = 23.1e-6  # Coefficient of linear expansion for aluminum (1/\u00b0C)\n  young_modulus = 69e9  # Young's modulus for aluminum (Pa)\n\n  # Convert area to m^2\n  area_m2 = area * 1e-4\n\n  # Calculate the change in temperature\n  delta_temp = final_temp - initial_temp\n\n  # Calculate the change in length\n  delta_length = length * alpha * delta_temp\n\n  # Calculate the strain\n  strain = delta_length / length\n\n  # Calculate the stress\n  stress = young_modulus * strain\n\n  # Calculate the total force\n  force = stress * area_m2\n\n  # Convert force to 10^4 N\n  force_10_4N = force / 1e4\n\n  return force_10_4N",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xueguangma/put_call_parity_1.json",
    "question": "Suppose a European call option on a barrel of crude oil with a strike price of $50 and a maturity of one-month, trades for $5. What is the price of the put premium with identical strike price and time until expiration, if the one-month risk-free rate is 2% and the spot price of the underlying asset is $52?",
    "prediction": 2.9167360725469322,
    "answer": 2.92,
    "rationale": "def solve():\n  import math\n\n  # Given values\n  call_premium = 5\n  strike_price = 50\n  maturity = 1/12\n  risk_free_rate = 0.02\n  spot_price = 52\n\n  # Calculate the present value of the strike price\n  pv_strike_price = strike_price * math.exp(-risk_free_rate * maturity)\n\n  # Use put-call parity to find the put premium\n  put_premium = call_premium - spot_price + pv_strike_price\n\n  return put_premium",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/photoelectric1.json",
    "question": "Light of wavelength 400 nm is incident upon lithium (phi = 2.93 eV). Calculate the photon energy in eV.",
    "prediction": 3.1017507720000004,
    "answer": 3.1,
    "rationale": "def solve():\n    import math\n\n    # Constants\n    wavelength = 400e-9  # Wavelength in meters\n    phi = 2.93  # Work function of lithium in eV\n    h = 4.135667696e-15  # Planck's constant in eV*s\n    c = 3e8  # Speed of light in m/s\n\n    # Calculate the photon energy\n    photon_energy = h * c / wavelength\n\n    return photon_energy",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xinyi/concavity.json",
    "question": "Consider a source X with a distortion measure $d(x, \\hat{x})$ that satisfies the following property: all columns of the distortion matrix are permutations of the set $\\{d_1, d_2, \\ldots, d_m\\}$. The function $\\phi(D) = \\max_{b:\\sum_{i=1}^m p_i d_i \\leq D} H(p)$ is concave. True or False?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "wenhuchen/Liouville\u2019s_theorem2.json",
    "question": "Let f be an entire function such that |f(z)| $\\geq$ 1 for every z in C. Is f is a constant function?",
    "prediction": true,
    "answer": true,
    "rationale": "Yes, f is a constant function. This can be proved using Liouville's theorem, which states that every bounded entire function is constant. Since |f(z)| $\\geq$ 1 for every z in C, f is bounded. Therefore, by Liouville's theorem, f is a constant function.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "maxku/cv-imageprocessing13-chaincode.json",
    "question": "Represent the contour of the object shown in the figure in a clockwise direction with a 4-directional chain code. Use the left upper corner as the starting point. The answer need to be normalized with respect to the orientation of the object. Represent the answer as a list with each digit as a element.",
    "prediction": [
      1.528,
      0.0
    ],
    "answer": [
      1,
      0,
      1,
      1,
      3,
      0,
      1,
      1,
      3,
      1,
      1,
      3
    ],
    "rationale": "",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "panlu/kite2.json",
    "question": "The diagonals of rhombus FGHJ intersect at K. If m\u2220FJH = 82, find m\u2220KHJ.",
    "prediction": 41.0,
    "answer": 49,
    "rationale": "def solve():\n    angle_FJH = 82\n    angle_KHJ = angle_FJH / 2\n    return angle_KHJ",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/Fundamental-Theorem-of-Calculus4.json",
    "question": "Let $F_0(x)=log(x)$. For $n\\geq 0$ and $x>0$, let $F_{n+1}(x)=\\int_0^x F_n(t)dt$. Evaluate $\\lim _{n \\rightarrow \\infty} (n! F_n(1))/(log(n))$.",
    "prediction": 0,
    "answer": -1.0,
    "rationale": "def solve():\n    import math\n\n    def F_n(x, n):\n        if n == 0:\n            return math.log(x)\n        else:\n            return integrate(F_n, x, n - 1)\n\n    def integrate(func, x, n):\n        step = 0.001\n        integral = 0\n        t = 0\n        while t < x:\n            integral += func(t, n) * step\n            t += step\n        return integral\n\n    def limit(n):\n        return (math.factorial(n) * F_n(1, n)) / math.log(n)\n\n    n = 1\n    prev_limit = limit(n)\n    n += 1\n    current_limit = limit(n)\n    epsilon = 1e-6\n\n    while abs(current_limit - prev_limit) > epsilon:\n        prev_limit = current_limit\n        n += 1\n        current_limit = limit(n)\n\n    return current_limit",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "jianyu_xu/Multinomial_3.json",
    "question": "In how many ways can we form a 7-digit number using the digits 1, 2, 2, 3, 3, 3, 4?",
    "prediction": 420,
    "answer": 420,
    "rationale": "def solve():\n    from math import factorial\n\n    # We have 7 digits in total, with 1 occurring once, 2 occurring twice, 3 occurring thrice, and 4 occurring once.\n    # We can use the formula for permutations with repetitions: n! / (n1! * n2! * ... * nk!)\n    # where n is the total number of digits, and n1, n2, ..., nk are the counts of each digit.\n\n    total_digits = 7\n    count_1 = 1\n    count_2 = 2\n    count_3 = 3\n    count_4 = 1\n\n    ans = factorial(total_digits) // (factorial(count_1) * factorial(count_2) * factorial(count_3) * factorial(count_4))\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/series_convergen2.json",
    "question": "Does the following series $\\sum_{i=0}^{\\infty} \\frac{n-1}{n^3+1}$ converge?",
    "prediction": 0,
    "answer": 1.0,
    "rationale": "def solve():\n    import math\n\n    def series_term(n):\n        return (n - 1) / (n ** 3 + 1)\n\n    def is_convergent(epsilon):\n        n = 1\n        partial_sum = 0\n        term = series_term(n)\n        while term > epsilon:\n            partial_sum += term\n            n += 1\n            term = series_term(n)\n        return partial_sum\n\n    epsilon = 1e-10\n    ans = is_convergent(epsilon)\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/basic-electronics-7-4.json",
    "question": "Determine the AC power gain for the emitter-follower in the figure. Assume that $\\beta_{ac} = 175$",
    "prediction": 1.0,
    "answer": 24.1,
    "rationale": "",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/ipnetwork5-mac.json",
    "question": "In a CSMA/CD network with a data rate of 10 Mbps, the minimum frame size is found to be 512 bits for the correct operation of the collision detection process. What should be the minimum frame size (in bits) if we increase the data rate to 1 Gbps?",
    "prediction": 51200,
    "answer": 51200,
    "rationale": "def solve():\n  initial_data_rate = 10 * (10**6)  # 10 Mbps\n  final_data_rate = 1 * (10**9)  # 1 Gbps\n  initial_frame_size = 512  # bits\n\n  # Since the minimum frame size is directly proportional to the data rate,\n  # we can use the formula: final_frame_size = (final_data_rate * initial_frame_size) / initial_data_rate\n  final_frame_size = (final_data_rate * initial_frame_size) / initial_data_rate\n\n  return int(final_frame_size)",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "xinyi/rotation.json",
    "question": "While riding a multispeed bicycle, the rider can select the radius of the rear sprocket that is fixed to the rear axle. The front sprocket of a bicycle has radius 12.0 cm. If the angular speed of the front sprocket is 0.6 rev/s, what is the radius (in cm) of the rear sprocket for which the tangential speed of a point on the rim of the rear wheel will be 5 m/s? The rear wheel has radius 0.330 m.",
    "prediction": 2.985769657971739,
    "answer": 2.99,
    "rationale": "def solve():\n    import math\n\n    front_sprocket_radius = 12.0  # in cm\n    front_sprocket_angular_speed = 0.6  # rev/s\n    rear_wheel_radius = 0.330  # in m\n    desired_tangential_speed = 5  # m/s\n\n    # Convert front sprocket radius to meters\n    front_sprocket_radius /= 100  # in m\n\n    # Calculate the linear speed of the front sprocket\n    front_sprocket_linear_speed = front_sprocket_radius * front_sprocket_angular_speed * 2 * math.pi  # m/s\n\n    # Calculate the angular speed of the rear wheel\n    rear_wheel_angular_speed = desired_tangential_speed / rear_wheel_radius  # rad/s\n\n    # Calculate the linear speed of the rear sprocket\n    rear_sprocket_linear_speed = front_sprocket_linear_speed  # m/s\n\n    # Calculate the radius of the rear sprocket\n    rear_sprocket_radius = rear_sprocket_linear_speed / rear_wheel_angular_speed  # in m\n\n    # Convert the rear sprocket radius to cm\n    rear_sprocket_radius *= 100  # in cm\n\n    return rear_sprocket_radius",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/put_call_parity_2.json",
    "question": "You are given: (i) The current exchange rate is 0.011$/\u00a5. (ii) A four-year dollar-denominated European put option on yen with a strike price of $0.008 sells for $0.0005. (iii) The continuously compounded risk-free interest rate on dollars is 3%. (iv) The continuously compounded risk-free interest rate on yen is 1.5%. Calculate the price of a four-year yen-denominated European put option on dollars with a strike price of \u00a5125.",
    "prediction": -117.02428379625593,
    "answer": 42.77325,
    "rationale": "def solve():\n    import math\n\n    # Given values\n    exchange_rate = 0.011  # $/\u00a5\n    put_option_price = 0.0005  # $\n    strike_price_dollar = 0.008  # $\n    risk_free_rate_dollar = 0.03  # continuously compounded\n    risk_free_rate_yen = 0.015  # continuously compounded\n    time_to_maturity = 4  # years\n    strike_price_yen = 125  # \u00a5\n\n    # Calculate the price of a yen-denominated European put option on dollars\n    # Using put-call parity and converting the strike price to yen\n    strike_price_yen_converted = strike_price_yen * exchange_rate  # $\n    put_option_price_yen = (put_option_price * math.exp(risk_free_rate_dollar * time_to_maturity) -\n                            strike_price_yen_converted * math.exp(-risk_free_rate_yen * time_to_maturity) +\n                            strike_price_dollar * math.exp(-risk_free_rate_dollar * time_to_maturity)) / exchange_rate\n\n    return put_option_price_yen",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/stopping-time1.json",
    "question": "If T_1 and T_2 are stopping times with respect to a filtration F. Is T_1+T_2 stopping time? Is max(T_1, T_2} stopping time? Is min(T_1, T_2} stopping time? Answer 1 for yes and 0 for no. Return the answers of the three questions as a list.",
    "prediction": [
      0,
      1,
      1
    ],
    "answer": [
      1,
      1,
      1
    ],
    "rationale": "def solve():\n    T1_plus_T2_stopping_time = 0\n    max_T1_T2_stopping_time = 1\n    min_T1_T2_stopping_time = 1\n\n    ans = [T1_plus_T2_stopping_time, max_T1_T2_stopping_time, min_T1_T2_stopping_time]\n    return ans",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "maxku/graphtheory1-vertexcover.json",
    "question": "Let a undirected graph G with edges E = {<2,1>,<2,0>,<2,3>,<1,4>,<4,3>}, which <A,B> represent Node A is connected to Node B. What is the minimum vertex cover of G? Represent the vertex cover in a list of ascending order.",
    "prediction": [
      2,
      4
    ],
    "answer": [
      2,
      4
    ],
    "rationale": "def solve():\n    # import library\n    import itertools\n\n    # implement the code\n    def is_vertex_cover(graph, cover):\n        for edge in graph:\n            if edge[0] not in cover and edge[1] not in cover:\n                return False\n        return True\n\n    graph = [(2, 1), (2, 0), (2, 3), (1, 4), (4, 3)]\n    nodes = set(itertools.chain.from_iterable(graph))\n    min_cover = None\n\n    for i in range(1, len(nodes) + 1):\n        for combination in itertools.combinations(nodes, i):\n            if is_vertex_cover(graph, combination):\n                min_cover = sorted(list(combination))\n                break\n        if min_cover is not None:\n            break\n\n    return min_cover",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "jianyu_xu/Binomial_6.json",
    "question": "A pizza parlor offers 8 different toppings. In how many ways can a customer order a pizza with 3 toppings?",
    "prediction": 56,
    "answer": 56,
    "rationale": "def solve():\n  import math\n  n = 8\n  k = 3\n  ans = math.comb(n, k)\n  return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "elainewan/math_calculus_7_3.json",
    "question": "Let g(x) be the inverse of f(x) = x + cos(x). What is g'(1)?",
    "prediction": 0.9999999999712443,
    "answer": 1,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.optimize import root_scalar\n    from scipy.misc import derivative\n\n    def f(x):\n        return x + np.cos(x)\n\n    def g(x):\n        return root_scalar(lambda y: f(y) - x, bracket=[-10, 10]).root\n\n    def g_prime(x):\n        return 1 / derivative(f, g(x), dx=1e-6)\n\n    ans = g_prime(1)\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/Simpson's_rule2.json",
    "question": "Using n=8 approximate the value of $\\int_{0}^4 cos(1 + \\sqrt{x}) dx$ using the Simpson's rule.",
    "prediction": -2.4716013629443774,
    "answer": -2.47160136,
    "rationale": "def solve():\n    import math\n\n    def f(x):\n        return math.cos(1 + math.sqrt(x))\n\n    n = 8\n    a = 0\n    b = 4\n    h = (b - a) / n\n\n    s = f(a) + f(b)\n\n    for i in range(1, n, 2):\n        s += 4 * f(a + i * h)\n\n    for i in range(2, n-1, 2):\n        s += 2 * f(a + i * h)\n\n    ans = (h / 3) * s\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "maxku/signalprocessing8-period.json",
    "question": "Determine the period of the following signal, $$ x_1(t)=\\cos (3 \\pi t)-4 \\cos (5 \\pi t-0.5 \\pi) $$",
    "prediction": 0,
    "answer": 2,
    "rationale": "def solve():\n    import math\n\n    # Define the frequencies of the two cosine functions\n    f1 = 3 * math.pi\n    f2 = 5 * math.pi\n\n    # Calculate the periods of the two cosine functions\n    T1 = 2 * math.pi / f1\n    T2 = 2 * math.pi / f2\n\n    # Find the least common multiple of the two periods\n    def lcm(a, b):\n        return abs(a * b) // math.gcd(int(a), int(b))\n\n    # Calculate the period of the signal x1(t)\n    period = lcm(T1, T2)\n\n    return period",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/basic-electronics-6-3.json",
    "question": "A load dissipates 1.5kW of power in an ac series RC circuit. Given that the power factor is 0.75, what is its reactive power $(P_r)$? What is its apparent power $(P_a)$? Represent the answer in a list [$P_r, P_a$] with unit kVA and kVAR respectively.",
    "prediction": [
      1.3228756555322954,
      2.0
    ],
    "answer": [
      2,
      1
    ],
    "rationale": "def solve():\n    # Given values\n    power_factor = 0.75\n    power_dissipated = 1.5  # in kW\n\n    # Calculate apparent power (Pa) using the formula: Pa = Pd / power_factor\n    apparent_power = power_dissipated / power_factor  # in kVA\n\n    # Calculate reactive power (Pr) using the formula: Pr = sqrt(Pa^2 - Pd^2)\n    reactive_power = ((apparent_power ** 2) - (power_dissipated ** 2)) ** 0.5  # in kVAR\n\n    return [reactive_power, apparent_power]",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "xinyi/entropy.json",
    "question": "An ordinary deck of cards containing 26 red cards and 26 black cards is shuffled and dealt out one card at a time without replacement. Let $X_i$ be the color of the $i$th card. Compute $H(X_1,X_2,\\ldots,X_{52})$ in bits.",
    "prediction": 52.0,
    "answer": 48.8,
    "rationale": "def solve():\n    import math\n\n    # Calculate the probability of each possible outcome\n    prob_red = 26 / 52\n    prob_black = 26 / 52\n\n    # Calculate the entropy for each card\n    entropy_per_card = -prob_red * math.log2(prob_red) - prob_black * math.log2(prob_black)\n\n    # Calculate the total entropy for all 52 cards\n    total_entropy = 52 * entropy_per_card\n\n    return total_entropy",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/newton2.json",
    "question": "For the equation x^4 + 2*x^3 + x = 10, there are four roots. What is the sum of the roots using newton-raphson method.",
    "prediction": 1.437842098370032,
    "answer": -2.0,
    "rationale": "def solve():\n    import numpy as np\n\n    def f(x):\n        return x**4 + 2*x**3 + x - 10\n\n    def f_prime(x):\n        return 4*x**3 + 6*x**2 + 1\n\n    def newton_raphson(x0, tol=1e-6, max_iter=100):\n        x = x0\n        for _ in range(max_iter):\n            x_new = x - f(x) / f_prime(x)\n            if abs(x_new - x) < tol:\n                return x_new\n            x = x_new\n        return x\n\n    # Find the four roots\n    roots = []\n    initial_guesses = [-3, -1, 1, 3]\n    for guess in initial_guesses:\n        root = newton_raphson(guess)\n        roots.append(root)\n\n    # Calculate the sum of the roots\n    ans = sum(roots)\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "jianyu_xu/Ramsey_4.json",
    "question": "Coloring the edges of a complete graph with n vertices in 2 colors (red and blue), what is the smallest n that guarantees there is either a 4-clique in red or a 4-clique in blue?",
    "prediction": 0,
    "answer": 18,
    "rationale": "def solve():\n    def ramsey_number(r, b):\n        if r == 1 or b == 1:\n            return 1\n        return ramsey_number(r - 1, b) + ramsey_number(r, b - 1)\n\n    n = 1\n    while True:\n        if ramsey_number(4, n) >= 4:\n            return n",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/Limit-of-sequence5.json",
    "question": "What is $\\lim _{r \\rightarrow \\infty} (\\int_0^{\\pi/2} x^r sin(x) dx)/(r\\int_0^{\\pi/2} x^r cos(x) dx)$?",
    "prediction": 0,
    "answer": 0.63662,
    "rationale": "def solve():\n    # As r approaches infinity, the integrals will be dominated by the values near the upper limit (pi/2)\n    # We can use L'Hopital's rule to find the limit of the ratio of the integrals\n    # L'Hopital's rule states that if the limit of the ratio of two functions is indeterminate (0/0 or infinity/infinity),\n    # then the limit of the ratio of their derivatives with respect to r is the same as the original limit\n    # In this case, we have an indeterminate form of infinity/infinity, so we can apply L'Hopital's rule\n\n    # First, we need to find the derivatives of the integrals with respect to r\n    # The derivative of the first integral with respect to r is:\n    # d/dr (integral(x^r * sin(x) dx from 0 to pi/2)) = integral(x^r * ln(x) * sin(x) dx from 0 to pi/2)\n\n    # The derivative of the second integral with respect to r is:\n    # d/dr (r * integral(x^r * cos(x) dx from 0 to pi/2)) = integral(x^r * ln(x) * cos(x) dx from 0 to pi/2)\n\n    # Now we need to find the limit of the ratio of these derivatives as r approaches infinity\n    # lim (integral(x^r * ln(x) * sin(x) dx from 0 to pi/2) / integral(x^r * ln(x) * cos(x) dx from 0 to pi/2))\n\n    # As r approaches infinity, the integrals will be dominated by the values near the upper limit (pi/2)\n    # So, we can approximate the integrals by evaluating the functions at pi/2\n    # lim (integral(x^r * ln(x) * sin(x) dx from 0 to pi/2) / integral(x^r * ln(x) * cos(x) dx from 0 to pi/2))\n    # = lim ((pi/2)^r * ln(pi/2) * sin(pi/2) / ((pi/2)^r * ln(pi/2) * cos(pi/2)))\n\n    # The (pi/2)^r * ln(pi/2) terms cancel out, and sin(pi/2) = 1, cos(pi/2) = 0\n    # So the limit is 1/0, which is infinity\n\n    ans = float('inf')\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/cv-videoprocessing2-digital-video.json",
    "question": "A remote database contains 30 seconds of color motion-video. The video sequence is of the format (352 \u0301288 pixels) with RGB digitization at 30 frames per second. Find the the data rate for this motion-video in Mbits/s (3 sig. fig.).",
    "prediction": 72.991,
    "answer": 69.6,
    "rationale": "def solve():\n  # Constants\n  width = 352\n  height = 288\n  pixels = width * height\n  bits_per_pixel = 24  # RGB digitization (8 bits per color channel)\n  frames_per_second = 30\n\n  # Calculate the data rate\n  data_rate = (pixels * bits_per_pixel * frames_per_second) / (10**6)  # Mbits/s\n\n  # Round to 3 significant figures\n  ans = round(data_rate, 3)\n\n  return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/integral-theorem2.json",
    "question": "What is the value of the integral $\\int_0^{\\pi/2} 1/(1+(tan(x))^{\\sqrt{2}}) dx$?",
    "prediction": 0,
    "answer": 0.78539815,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.integrate import quad\n\n    def integrand(x):\n        return 1 / (1 + np.tan(x)**np.sqrt(2))\n\n    ans, _ = quad(integrand, 0, np.pi/2)\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/gauss_lemma2.json",
    "question": "Is 10 a quadratic residue modulo 19? Use Gauss's Lemma to answer it.",
    "prediction": false,
    "answer": false,
    "rationale": "To determine if 10 is a quadratic residue modulo 19 using Gauss's Lemma, we first need to find the Legendre symbol (10/19). According to Gauss's Lemma, we can compute the Legendre symbol by considering the least positive residues of the multiples of 10 modulo 19.\n\nLet's list the first 9 least positive residues of the multiples of 10 modulo 19:\n\n1 * 10 \u2261 10 (mod 19)\n2 * 10 \u2261 20 \u2261 1 (mod 19)\n3 * 10 \u2261 30 \u2261 11 (mod 19)\n4 * 10 \u2261 40 \u2261 2 (mod 19)\n5 * 10 \u2261 50 \u2261 12 (mod 19)\n6 * 10 \u2261 60 \u2261 3 (mod 19)\n7 * 10 \u2261 70 \u2261 13 (mod 19)\n8 * 10 \u2261 80 \u2261 4 (mod 19)\n9 * 10 \u2261 90 \u2261 14 (mod 19)\n\nNow, we count the number of least residues that are greater than 19/2 = 9.5:\n\n10, 11, 12, 13, and 14\n\nThere are 5 such residues. Therefore, the Legendre symbol (10/19) is (-1)^5 = -1. Since the Legendre symbol is -1, 10 is not a quadratic residue modulo 19.\n\nTherefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "jianyu_xu/pigeonhole_1.json",
    "question": "How many people at least shall we include in one group, such that there must exist two different people in this group whose birthdays are in the same month?",
    "prediction": 13,
    "answer": 13,
    "rationale": "def solve():\n  # There are 12 months in a year\n  months = 12\n\n  # To guarantee that there are at least two people with the same birthday month,\n  # we need to have one more person than the total number of months.\n  ans = months + 1\n\n  return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "xueguangma/black_scholes_framework_3.json",
    "question": "Your company has just written one million units of a one-year European asset-or-nothing put option on an equity index fund. The equity index fund is currently trading at 1000. It pays dividends continuously at a rate proportional to its price; the dividend yield is 2%. It has a volatility of 20%. The option\u2019s payoff will be made only if the equity index fund is down by more than 40% at the end of one year. The continuously compounded risk-free interest rate is 2.5% Using the Black-Scholes model, determine the price of the asset-or-nothing put options. Give the answer in millions.",
    "prediction": 0.23593983691869802,
    "answer": 3.6,
    "rationale": "def solve():\n    import math\n    from scipy.stats import norm\n\n    # Given parameters\n    S0 = 1000\n    K = 0.6 * S0\n    T = 1\n    r = 0.025\n    q = 0.02\n    sigma = 0.2\n    n_options = 1000000\n\n    # Black-Scholes formula for asset-or-nothing put option\n    d1 = (math.log(S0 / K) + (r - q + 0.5 * sigma ** 2) * T) / (sigma * math.sqrt(T))\n    d2 = d1 - sigma * math.sqrt(T)\n\n    put_price = K * math.exp(-r * T) * norm.cdf(-d2) - S0 * math.exp(-q * T) * norm.cdf(-d1)\n\n    # Total price in millions\n    ans = put_price * n_options / 1000000\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xinyi/random_walk_on_graph_max.json",
    "question": "Consider a random walk on a connected graph with 4 edges. What is the highest possible entropy rate? Use base 2 logarithm and return the entropy rate in bits.",
    "prediction": 1.5849625007211563,
    "answer": 1.094,
    "rationale": "def solve():\n  import math\n\n  # In a connected graph with 4 edges, the maximum number of vertices is 4.\n  # This is achieved in a star graph with a central vertex connected to 3 other vertices.\n  # In this case, the random walk has 3 possible transitions from the central vertex.\n  \n  # Calculate the probability of each transition\n  p = 1/3\n\n  # Calculate the entropy rate using the formula H = -sum(p_i * log2(p_i))\n  entropy_rate = -3 * p * math.log2(p)\n\n  return entropy_rate",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "panlu/triangle3.json",
    "question": "In triangle RST, X is located on the side RS, Y is located on the side RT, Z is located on the side ST, and XY and XZ are midsegments of \u25b3RST. If the length of side XY is 7, the length of side RT is 13, and the measure of angle YXZ is 124\u00b0, what is the length of side ST?",
    "prediction": 0,
    "answer": 14,
    "rationale": "def solve():\n    import math\n\n    # Given values\n    XY = 7\n    RT = 13\n    angle_YXZ = 124\n\n    # Midsegment theorem states that the midsegment is half the length of the third side\n    # So, XZ = 0.5 * ST\n\n    # Law of Cosines for triangle XYXZ\n    # XY^2 = XZ^2 + YZ^2 - 2 * XZ * YZ * cos(angle_YXZ)\n    # Since XY and XZ are midsegments, YZ = 0.5 * RT\n    YZ = 0.5 * RT\n\n    # Calculate the cosine of angle_YXZ\n    cos_angle_YXZ = math.cos(math.radians(angle_YXZ))\n\n    # Substitute the values in the Law of Cosines equation\n    XZ_square = (XY**2 - YZ**2 + 2 * YZ**2 * cos_angle_YXZ) / (1 - 2 * cos_angle_YXZ)\n\n    # Calculate the length of XZ\n    XZ = math.sqrt(XZ_square)\n\n    # Calculate the length of ST\n    ST = 2 * XZ\n\n    return ST",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/Poisson_process3.json",
    "question": "Let {N(t), t \\in [0, \\infty)} be a Poisson process with rate of $\\lambda = 4$ and $X_1$ be the first arrival time. Given N(t) = 1, then what is $P(X_1 <= t / 2)$?",
    "prediction": -371.36979031304446,
    "answer": 0.5,
    "rationale": "def solve():\n    import math\n\n    # Given rate lambda\n    rate_lambda = 4\n\n    # We want to find P(X_1 <= t / 2) given N(t) = 1\n    # Using the memoryless property of the exponential distribution, we have:\n    # P(X_1 <= t / 2 | N(t) = 1) = 1 - P(X_1 > t / 2 | N(t) = 1)\n    # P(X_1 > t / 2 | N(t) = 1) = P(N(t / 2) = 0 | N(t) = 1)\n    # Using conditional probability:\n    # P(N(t / 2) = 0 | N(t) = 1) = P(N(t / 2) = 0 and N(t) = 1) / P(N(t) = 1)\n    # P(N(t / 2) = 0 and N(t) = 1) = P(N(t / 2) = 0) * P(N(t) - N(t / 2) = 1)\n    # P(N(t / 2) = 0) = e^(-lambda * t / 2)\n    # P(N(t) - N(t / 2) = 1) = lambda * (1 - e^(-lambda * t / 2))\n\n    # Let's denote t / 2 as x, then we have:\n    # P(X_1 <= t / 2) = 1 - P(N(x) = 0) * P(N(t) - N(x) = 1) / P(N(t) = 1)\n    # P(N(x) = 0) = e^(-lambda * x)\n    # P(N(t) - N(x) = 1) = lambda * (1 - e^(-lambda * x))\n    # P(N(t) = 1) = lambda * e^(-lambda * t)\n\n    # Now we need to find the integral of the product of P(N(x) = 0) and P(N(t) - N(x) = 1) over x from 0 to t\n    from scipy.integrate import quad\n\n    def integrand(x):\n        return math.exp(-rate_lambda * x) * rate_lambda * (1 - math.exp(-rate_lambda * x))\n\n    integral, _ = quad(integrand, 0, 2)\n\n    # Finally, we can find P(X_1 <= t / 2) by dividing the integral by P(N(t) = 1)\n    ans = 1 - integral / (rate_lambda * math.exp(-rate_lambda * 2))\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xueguangma/present_value_2.json",
    "question": "For the 3 payments of $1000 each end-of-year, with 7% rate of return, what is the present value if the first payment is made at the end of fifth year?",
    "prediction": 2002.0781451847715,
    "answer": 2002.0781,
    "rationale": "def solve():\n  payment = 1000\n  rate_of_return = 0.07\n  first_payment_year = 5\n\n  present_value = 0\n  for i in range(first_payment_year, first_payment_year + 3):\n    present_value += payment / (1 + rate_of_return)**i\n\n  return present_value",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/martingale1.json",
    "question": "Let G_n(s) be the probability generating function of the size Z_n of the n-th generation of a branching process, where Z_0=1 and var(Z_1)>0. Let H_n be the inverse function of the function G_n, viewed as a function on the interval [0, 1].  Is M_n= {H_n(s)}^{Z_n} defines a martingale with respect to the sequence Z? Return 1 for yes and 0 for no.",
    "prediction": 0,
    "answer": 1.0,
    "rationale": "def solve():\n    # In a branching process, M_n = {H_n(s)}^{Z_n} is a martingale with respect to the sequence Z\n    # if E[M_{n+1} | Z_1, ..., Z_n] = M_n for all n.\n    # Since H_n is the inverse function of G_n, we have G_n(H_n(s)) = s.\n    # Therefore, E[M_{n+1} | Z_1, ..., Z_n] = E[{H_{n+1}(s)}^{Z_{n+1}} | Z_1, ..., Z_n]\n    # = E[{H_{n+1}(G_n(H_n(s)))}^{Z_{n+1}} | Z_1, ..., Z_n]\n    # = E[{H_{n+1}(s)}^{Z_n * Z_1} | Z_1, ..., Z_n]\n    # = {H_{n+1}(s)}^{Z_n * E[Z_1 | Z_1, ..., Z_n]}\n    # = {H_{n+1}(s)}^{Z_n * Z_1}\n    # = {H_n(s)}^{Z_n} * {H_{n+1}(s)}^{Z_1}\n    # = M_n * {H_{n+1}(s)}^{Z_1}.\n    #\n    # Since var(Z_1) > 0, Z_1 is not a constant, and thus {H_{n+1}(s)}^{Z_1} is not a constant.\n    # Therefore, E[M_{n+1} | Z_1, ..., Z_n] is not equal to M_n, and M_n is not a martingale.\n    return 0",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/basic-electronics-7-3.json",
    "question": "Determine the AC power gain for the common-emitter amplifier in the figure. Assume that $\\beta_{ac} = 100$, the internal emitter resistance $r_e = 12.3 \\Omega$.",
    "prediction": 1.0,
    "answer": 33540,
    "rationale": "def solve():\n    beta_ac = 100\n    r_e = 12.3\n\n    input_resistance = r_e\n    output_resistance = r_e / beta_ac\n\n    ac_power_gain = (output_resistance / input_resistance) * (input_resistance / output_resistance)\n    return ac_power_gain",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/basic-electronics-H3-7.json",
    "question": "Given that $V_A = V_B$, determine the value of $C_2$ (in \u03bcF) in the following circuit in the figure.",
    "prediction": [
      1.528,
      0.0
    ],
    "answer": 0.103,
    "rationale": "",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "jianyu_xu/Stirling_number_first_kind_4.json",
    "question": "In how many ways can 8 people be seated at 5 identical round tables? Each table must have at least 1 person seated.",
    "prediction": 20,
    "answer": 1960,
    "rationale": "def solve():\n    from math import comb\n\n    # We will use the stars and bars method to distribute the people among the tables.\n    # We have 8 people and 5 tables, so we need to distribute 8 - 5 = 3 \"extra\" people.\n    # We will use 4 \"dividers\" to separate the people into 5 groups (tables).\n    # So, we need to distribute 3 extra people among 4 dividers.\n    # This can be done in C(3 + 4 - 1, 3) ways, where C(n, k) is the number of combinations of n items taken k at a time.\n\n    ans = comb(3 + 4 - 1, 3)\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "jianyu_xu/Burnside_3.json",
    "question": "How many ways are there to arrange the letters in the word *BANANA* up to the symmetries of the word?",
    "prediction": 60,
    "answer": 30,
    "rationale": "def solve():\n    import math\n    # The word BANANA has 6 letters, with 1 B, 3 As, and 2 Ns.\n    # We can use the multinomial coefficient formula to find the number of ways to arrange the letters.\n    # The formula is: n! / (k1! * k2! * ... * kn!)\n    # In this case, n = 6, k1 = 1 (for B), k2 = 3 (for A), and k3 = 2 (for N).\n    ans = math.factorial(6) // (math.factorial(1) * math.factorial(3) * math.factorial(2))\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "elainewan/math_algebra_6_4.json",
    "question": "What is the determinant of the matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]?",
    "prediction": -9.51619735392994e-16,
    "answer": -3,
    "rationale": "def solve():\n  import numpy as np\n\n  A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  ans = np.linalg.det(A)\n\n  return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/derivative3.json",
    "question": "If $x=4*cost(t)$ and $y=8*sin(x)$, what is $y{''}_{xx}$ at t=pi/3?",
    "prediction": -6.719516965875927,
    "answer": -4.0,
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the given functions\n    def x(t):\n        return 4 * np.cos(t)\n\n    def y(x):\n        return 8 * np.sin(x)\n\n    # Define the first and second derivatives of x(t) with respect to t\n    def dx_dt(t):\n        return -4 * np.sin(t)\n\n    def d2x_dt2(t):\n        return -4 * np.cos(t)\n\n    # Define the first and second derivatives of y(x) with respect to x\n    def dy_dx(x):\n        return 8 * np.cos(x)\n\n    def d2y_dx2(x):\n        return -8 * np.sin(x)\n\n    # Define the chain rule for the second derivative of y with respect to t\n    def d2y_dt2(t):\n        return d2y_dx2(x(t)) * (dx_dt(t) ** 2) + dy_dx(x(t)) * d2x_dt2(t)\n\n    # Calculate the second derivative of y with respect to x at t = pi/3\n    t = np.pi / 3\n    y_xx = d2y_dt2(t) / (dx_dt(t) ** 2)\n\n    return y_xx",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/Schwarz_lemma2.json",
    "question": "Suppose that f is analytic on the closed unit disk, f(0) = 0, and $|Rf(z)| \\leq |e^z|$ for |z| < 1. What's the maximum value of f((1 + i)/2)?",
    "prediction": 1.9221155140795585,
    "answer": 17.95,
    "rationale": "def solve():\n    import cmath\n\n    # Given values\n    z = (1 + 1j) / 2\n    R = 1\n\n    # Calculate the maximum value of |e^z| on the boundary of the unit disk\n    M = max(abs(cmath.exp(cmath.rect(R, theta))) for theta in [0, cmath.pi / 2, cmath.pi, 3 * cmath.pi / 2])\n\n    # Apply Cauchy's estimate theorem\n    ans = abs(z) * M / R\n\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/ODE1.json",
    "question": "Derive the solution y = f(t) to the following IVP. $ty' - 2y = t^5sin(2t) - t^3 + 4t^4$, where $y(\\pi) = 3\\pi^4/2$. What is y(t) when $t=pi/2$.",
    "prediction": 17.862254508964188,
    "answer": 19.095,
    "rationale": "def solve():\n    from sympy import Function, Eq, dsolve, sin, pi\n    from sympy.abc import t\n\n    y = Function('y')\n    eq = Eq(t * y(t).diff(t) - 2 * y(t), t**5 * sin(2 * t) - t**3 + 4 * t**4)\n    sol = dsolve(eq, y(t), ics={y(pi): 3 * pi**4 / 2})\n    y_t = sol.subs(t, pi/2).rhs\n\n    return float(y_t)",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/gaussian-elimination1.json",
    "question": "for the matrix $A=(\\begin{array}{rrrrr} 1 & 2 & 3 & 4 & -3 \\1 & 2 & 0 & -5 & 1 \\2 & 4 & -3 & -19 & 6 \\3 & 6 & -3 & -24 & 7\\end{array})$, what is its row rank and column rank? return the two numbers as a list.",
    "prediction": [
      2,
      2
    ],
    "answer": [
      2,
      2
    ],
    "rationale": "def solve():\n    import numpy as np\n\n    A = np.array([[1, 2, 3, 4, -3],\n                  [1, 2, 0, -5, 1],\n                  [2, 4, -3, -19, 6],\n                  [3, 6, -3, -24, 7]])\n\n    row_rank = np.linalg.matrix_rank(A)\n    column_rank = np.linalg.matrix_rank(A.T)\n\n    return [row_rank, column_rank]",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "tonyxia/score4.json",
    "question": "How many labeled graphs with a score of (6, 2, 2, 2, 2, 2, 2) are there?",
    "prediction": 138940401600,
    "answer": 15,
    "rationale": "def solve():\n    import math\n\n    def nCr(n, r):\n        return math.factorial(n) // (math.factorial(r) * math.factorial(n - r))\n\n    score = (6, 2, 2, 2, 2, 2, 2)\n    n = sum(score)\n    ans = 1\n\n    for i in range(len(score)):\n        ans *= nCr(n, score[i])\n        n -= score[i]\n\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "elainewan/math_algebra_3.json",
    "question": "Is W = {[x, y] in R^2: x >= 0 and y >= 0} a subspace of R^2?",
    "prediction": false,
    "answer": false,
    "rationale": "To determine if W is a subspace of R^2, we need to check if it satisfies the three subspace properties:\n\n1. The zero vector (0, 0) is in W.\n2. W is closed under vector addition.\n3. W is closed under scalar multiplication.\n\n1. The zero vector (0, 0) is in W since both x and y are greater than or equal to 0.\n\n2. Let's check if W is closed under vector addition. Take two vectors u = [x1, y1] and v = [x2, y2] in W. Their sum is u + v = [x1 + x2, y1 + y2]. Since x1, x2, y1, and y2 are all greater than or equal to 0, their sums x1 + x2 and y1 + y2 are also greater than or equal to 0. Therefore, u + v is in W, and W is closed under vector addition.\n\n3. Now, let's check if W is closed under scalar multiplication. Take a vector u = [x, y] in W and a scalar c. The product cu = [cx, cy]. If c is positive, then cx and cy are both greater than or equal to 0, and cu is in W. However, if c is negative, then cx and cy are both negative, and cu is not in W.\n\nSince W is not closed under scalar multiplication, it is not a subspace of R^2. Therefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "elainewan/math_calculus_2_2.json",
    "question": "\\lim_{x \\to 1}(1/(x - 1) - c/(x^3 - 1)) exists. What is the value of c?",
    "prediction": 0,
    "answer": 3,
    "rationale": "def solve():\n    from sympy import symbols, limit, Eq, solve\n\n    x, c = symbols('x c')\n    expr = 1 / (x - 1) - c / (x**3 - 1)\n    lim_expr = limit(expr, x, 1)\n\n    # Since the limit exists, we can set it equal to 0 and solve for c\n    eq = Eq(lim_expr, 0)\n    c_value = solve(eq, c)[0]\n\n    return c_value",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "jianyu_xu/Graph_1.json",
    "question": "What is the smallest number of vertices in a graph that guarantees the existence of a clique of size 3 or an independent set of size 2?",
    "prediction": 0,
    "answer": 3,
    "rationale": "def solve():\n    # We will use the Pigeonhole Principle to solve this problem.\n    # Let n be the number of vertices in the graph.\n    # If there is no clique of size 3, then each vertex can have at most 1 neighbor in the clique.\n    # Therefore, there are at most n * (n - 1) / 2 edges in the graph.\n    # If there is no independent set of size 2, then each pair of vertices must be connected by an edge.\n    # Therefore, there are at least n * (n - 1) / 2 edges in the graph.\n    # By the Pigeonhole Principle, there must be a graph with n vertices that has both a clique of size 3 and an independent set of size 2.\n    # We will now find the smallest such n.\n\n    n = 1\n    while True:\n        # Calculate the number of edges in a complete graph with n vertices\n        complete_graph_edges = n * (n - 1) // 2\n\n        # Calculate the number of edges in a graph with no clique of size 3\n        no_clique_edges = n * (n - 1) // 2 - n // 3\n\n        # If the number of edges in a complete graph with n vertices is greater than the number of edges in a graph with no clique of size 3,\n        # then there must be a graph with n vertices that has both a clique of size 3 and an independent set of size 2.\n        if complete_graph_edges > no_clique_edges:\n            return n",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/Runge-Kutta_Method1.json",
    "question": "Use the Runge-Kutta method with $h=0.1$ to find approximate values for the solution of the initial value problem $y' + 2y = x^3e^{-2x}$ with y(0)=1 at $x=0.2$.",
    "prediction": 0.6705924173143673,
    "answer": 0.6705,
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the given function\n    def f(x, y):\n        return x**3 * np.exp(-2 * x) - 2 * y\n\n    # Define the Runge-Kutta method\n    def runge_kutta(x0, y0, h, x):\n        n = int((x - x0) / h)\n        for _ in range(n):\n            k1 = h * f(x0, y0)\n            k2 = h * f(x0 + h / 2, y0 + k1 / 2)\n            k3 = h * f(x0 + h / 2, y0 + k2 / 2)\n            k4 = h * f(x0 + h, y0 + k3)\n            y0 += (k1 + 2 * k2 + 2 * k3 + k4) / 6\n            x0 += h\n        return y0\n\n    # Set the initial values and step size\n    x0, y0, h, x = 0, 1, 0.1, 0.2\n\n    # Calculate the approximate value at x = 0.2\n    ans = runge_kutta(x0, y0, h, x)\n\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xinyi/channel_capacity_1.json",
    "question": "One is given a communication channel with transition probabilities $p(y|x)$ and channel capacity $C=max_{p(x)}I(X;Y)$. If we preprocesses the output by forming $Y=g(Y)$ the capacity will not improve. True or False?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "xueguangma/yield.json",
    "question": "An 8% bond with 18 years to maturity has a yield of 9%. What is the price of this bond?",
    "prediction": 912.4437489055895,
    "answer": 91.17,
    "rationale": "def solve():\n  face_value = 1000  # Assuming face value of the bond is 1000\n  coupon_rate = 0.08\n  years_to_maturity = 18\n  yield_rate = 0.09\n\n  # Calculate the present value of the bond's cash flows\n  coupon_payment = face_value * coupon_rate\n  cash_flows = [coupon_payment] * years_to_maturity\n  cash_flows[-1] += face_value  # Add the face value to the last cash flow\n\n  # Discount the cash flows using the yield rate\n  discounted_cash_flows = [cf / (1 + yield_rate)**t for t, cf in enumerate(cash_flows, start=1)]\n\n  # Calculate the bond price as the sum of the discounted cash flows\n  bond_price = sum(discounted_cash_flows)\n\n  return bond_price",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xinyi/fisher_information_3.json",
    "question": "What is the Fisher information for the distribution family $f_\\theta(x)=\\theta e^{-\\theta x}$, $x \\geq 0$? (a) $\\theta$. (b) $\\theta^2$. (c) $\\theta^{-1}$. (d) $\\theta^{-2}$. Which option is correct?",
    "prediction": 0,
    "answer": "(d)",
    "rationale": "To find the Fisher information for the distribution family $f_\\theta(x)=\\theta e^{-\\theta x}$, we first need to find the score function, which is the derivative of the log-likelihood function with respect to $\\theta$. The log-likelihood function is given by:\n\n$$\\ell(\\theta) = \\log L(\\theta) = \\sum_{i=1}^n \\log f_\\theta(x_i) = \\sum_{i=1}^n \\log(\\theta e^{-\\theta x_i}) = \\sum_{i=1}^n (\\log \\theta - \\theta x_i).$$\n\nNow, we take the derivative with respect to $\\theta$:\n\n$$\\frac{d\\ell(\\theta)}{d\\theta} = \\sum_{i=1}^n \\left(\\frac{1}{\\theta} - x_i\\right).$$\n\nThe Fisher information is the expected value of the square of the score function:\n\n$$I(\\theta) = E\\left[\\left(\\frac{d\\ell(\\theta)}{d\\theta}\\right)^2\\right] = E\\left[\\left(\\sum_{i=1}^n \\left(\\frac{1}{\\theta} - x_i\\right)\\right)^2\\right].$$\n\nSince the expectation is a linear operator, we can rewrite the Fisher information as:\n\n$$I(\\theta) = E\\left[\\sum_{i=1}^n \\left(\\frac{1}{\\theta} - x_i\\right)^2\\right] = \\sum_{i=1}^n E\\left[\\left(\\frac{1}{\\theta} - x_i\\right)^2\\right].$$\n\nFor the given distribution, the expectation of $x$ is $E[x] = \\frac{1}{\\theta}$. Therefore, we have:\n\n$$I(\\theta) = \\sum_{i=1}^n E\\left[\\left(\\frac{1}{\\theta} - x_i\\right)^2\\right] = n E\\left[\\left(\\frac{1}{\\theta} - x\\right)^2\\right] = n E\\left[\\left(\\frac{1}{\\theta} - \\frac{1}{\\theta}\\right)^2\\right] = n E[0] = 0.$$\n\nTherefore, the answer is 0.",
    "answer_type": "option",
    "correct": false
  },
  {
    "id": "tonyxia/modulararithmetic3.json",
    "question": "When 30! is computed, it ends in 7 zeros. Find the digit that immediately precedes these zeros.",
    "prediction": 8,
    "answer": 8,
    "rationale": "def solve():\n    import math\n\n    # Calculate 30!\n    factorial = math.factorial(30)\n\n    # Convert the factorial to a string\n    factorial_str = str(factorial)\n\n    # Find the index of the last non-zero digit\n    last_non_zero_index = len(factorial_str) - 1\n    while factorial_str[last_non_zero_index] == '0':\n        last_non_zero_index -= 1\n\n    # Get the digit that immediately precedes the zeros\n    ans = int(factorial_str[last_non_zero_index])\n\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "maxku/cv-imageprocessing10-digital-image.json",
    "question": "Calculate the required memory size in Mebibytes (MiB) (in 3 sig.fig.) for storing a frame in 720p if the sampling scheme Y'CbCr 4:2:0 is used. Note that There are 1280 \u00d7 720 pixels in one 720p frame. Each pixel contains three primary-colour components. Each primary-colour component requires 1 byte of memory for storage. 1 Mebibyte has 1024^2 bytes.",
    "prediction": 1.758,
    "answer": 1.32,
    "rationale": "def solve():\n  # Constants\n  frame_width = 1280\n  frame_height = 720\n  bytes_per_pixel_component = 1\n  mebibyte = 1024**2\n\n  # Calculate the number of pixels in the frame\n  total_pixels = frame_width * frame_height\n\n  # Calculate the memory size for Y'CbCr 4:2:0 sampling scheme\n  memory_size_bytes = total_pixels * (1 + 0.5 + 0.5) * bytes_per_pixel_component\n\n  # Convert the memory size to Mebibytes\n  memory_size_mebibytes = memory_size_bytes / mebibyte\n\n  # Round the memory size to 3 significant figures\n  ans = round(memory_size_mebibytes, 3)\n\n  return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "jianyu_xu/Ramsey_1.json",
    "question": "Coloring the edges of a complete graph with 6 vertices in 2 colors, how many triangles of the same color are there at least?",
    "prediction": 7,
    "answer": 2,
    "rationale": "def solve():\n    # Number of vertices in the complete graph\n    vertices = 6\n\n    # Number of colors\n    colors = 2\n\n    # Calculate the minimum number of triangles of the same color\n    ans = (vertices * (vertices - 1) // 2) // colors\n\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/volume.json",
    "question": "Find the volume of a solid bounded by the elliptical paraboloid $z=2x^2 + y^2 + 1$, the plane x+y=1, and the coordinate planes.",
    "prediction": 0,
    "answer": 0.75,
    "rationale": "from scipy.integrate import tplquad\ndef integrand(z, y, x):\n    return 1\ndef x_bounds():\n    return 0, 1\ndef y_bounds(x):\n    return 0, 1 - x\ndef z_bounds(x, y):\n    return 0, 2 * x**2 + y**2 + 1\ndef solve():\n    volume, _ = tplquad(integrand, *x_bounds(), y_bounds, z_bounds)\n    return volume",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/Sturm.json",
    "question": "Obtain the number of real roots between 0 and 3 of the equation P(x) = x^4 -4x^3 + 3x^2 + 4x - 4 = 0 using Sturm's sequence.",
    "prediction": -2,
    "answer": 2,
    "rationale": "def solve():\n    import numpy as np\n\n    def sturm_sequence(polynomial):\n        sequence = [polynomial]\n        derivative = np.polyder(polynomial)\n        sequence.append(derivative)\n\n        while True:\n            remainder = -1 * np.polydiv(sequence[-2], sequence[-1])[1]\n            if len(remainder) == 1:\n                break\n            sequence.append(remainder)\n\n        return sequence\n\n    def sign_changes(sequence, x):\n        signs = [np.sign(np.polyval(p, x)) for p in sequence]\n        return sum(1 for a, b in zip(signs, signs[1:]) if a != b)\n\n    polynomial = [1, -4, 3, 4, -4]\n    sturm_seq = sturm_sequence(polynomial)\n\n    real_roots_between_0_and_3 = sign_changes(sturm_seq, 3) - sign_changes(sturm_seq, 0)\n\n    return real_roots_between_0_and_3",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/signalprocessing7-phaseshift.json",
    "question": "Consider that the following two signals: $x(t)$ and $v(t)$ $$ x(t)=\\left\\{\\begin{array}{cc} 1 & 0 \\leq t \\leq 3 \\\\ 0 & \\text { otherwise } \\end{array} \\quad v(t)=\\left\\{\\begin{array}{cc} 1 & 0 \\leq t \\leq 2 \\\\ 0 & \\text { otherwise } \\end{array}\\right.\\right. $$ Let $y(\\tau)=\\int_{-\\infty}^{\\infty} x(\\tau-t) v(t) d t$. Let $\\tau=2.5$. Determine $y(\\tau)$.",
    "prediction": 0,
    "answer": 2,
    "rationale": "def solve():\n    import numpy as np\n\n    def x(t):\n        if 0 <= t <= 3:\n            return 1\n        else:\n            return 0\n\n    def v(t):\n        if 0 <= t <= 2:\n            return 1\n        else:\n            return 0\n\n    tau = 2.5\n    integral_range = np.linspace(-np.inf, np.inf, 10000)\n    y_tau = np.trapz([x(tau - t) * v(t) for t in integral_range], integral_range)\n\n    return y_tau",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/ipnetwork8-lan.json",
    "question": "A disadvantage of the contention approach for LANs, such as CSMA/CD, is the capacity wasted due to multiple stations attempting to access the channel at the same time. Suppose that time is divided into discrete slots, with each of 5 stations attempting to transmit with probability 0.35 during each slot. What fraction of slots is wasted due to multiple simultaneous transmission attempts?",
    "prediction": 0.6876140625,
    "answer": 0.572,
    "rationale": "def solve():\n    import math\n\n    # Number of stations\n    n = 5\n\n    # Probability of transmission attempt\n    p = 0.35\n\n    # Probability of no transmission attempt\n    q = 1 - p\n\n    # Probability of exactly one station attempting to transmit\n    prob_one_station = n * p * (q ** (n - 1))\n\n    # Fraction of slots wasted due to multiple simultaneous transmission attempts\n    ans = 1 - prob_one_station\n\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xinyi/momentum.json",
    "question": "A neutron at rest decays (breaks up) to a proton and an electron. Energy is released in the decay and appears as kinetic energy of the proton and electron. The mass of a proton is 1836 times the mass of an electron. What fraction of the total energy released goes into the kinetic energy of the proton?",
    "prediction": 0.0005443658138268918,
    "answer": 0.000544,
    "rationale": "def solve():\n  mass_proton = 1836\n  mass_electron = 1\n\n  # Using conservation of momentum, we can find the ratio of the velocities of the proton and electron\n  velocity_ratio = mass_electron / mass_proton\n\n  # The kinetic energy of a particle is given by (1/2) * mass * velocity^2\n  # We can find the ratio of the kinetic energies of the proton and electron\n  kinetic_energy_ratio = mass_proton * (velocity_ratio ** 2)\n\n  # The fraction of the total energy released that goes into the kinetic energy of the proton is\n  # the ratio of the kinetic energy of the proton to the sum of the kinetic energies of the proton and electron\n  ans = kinetic_energy_ratio / (kinetic_energy_ratio + 1)\n  return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/chebyshev2.json",
    "question": "What is the smallest number of standard deviations from the mean that we must go if we want to ensure that we have at least 50% of the data of a distribution?",
    "prediction": 0.6744897501960817,
    "answer": 1.4,
    "rationale": "def solve():\n  from scipy.stats import norm\n\n  # We want to find the z-score such that the area under the curve is 50%\n  # Since the normal distribution is symmetric, we can find the z-score for 25% on each side of the mean\n  z_score = norm.ppf(0.25)\n\n  # Since we want the smallest number of standard deviations, we take the absolute value of the z-score\n  ans = abs(z_score)\n  return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/particle1.json",
    "question": "Assume the half-life of the proton is 10^33 years. How many decays per year would you expect in a tank of water containing 350,000 liters of water?",
    "prediction": 0.01621590384760048,
    "answer": 0.08,
    "rationale": "def solve():\n  # Constants\n  half_life = 10**33  # years\n  liters_in_tank = 350000  # liters\n  water_density = 1  # g/cm^3\n  water_molar_mass = 18.01528  # g/mol\n  avogadro_number = 6.02214076e23  # mol^-1\n  liters_to_cm3 = 1000  # cm^3/liter\n\n  # Calculate the number of protons in the tank\n  mass_of_water = liters_in_tank * liters_to_cm3 * water_density  # g\n  moles_of_water = mass_of_water / water_molar_mass  # mol\n  molecules_of_water = moles_of_water * avogadro_number  # molecules\n  protons_in_tank = 2 * molecules_of_water  # 2 protons per water molecule\n\n  # Calculate the decay rate per year\n  decay_constant = 0.693 / half_life  # decay constant (per year)\n  decays_per_year = decay_constant * protons_in_tank\n\n  return decays_per_year",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "jianyu_xu/Cayley_5.json",
    "question": "How many trees are there on n (n > 1) labeled vertices with no vertices of degree 1 or 2?",
    "prediction": 0,
    "answer": 0,
    "rationale": "def solve(n):\n    if n <= 1:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        # Using the formula for the number of trees with no vertices of degree 1 or 2\n        # on n labeled vertices: T(n) = (n-2) * (n-3) / 2 + 1\n        ans = ((n - 2) * (n - 3) // 2) + 1\n        return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "xinyi/uniquely_decodeable_code.json",
    "question": "Suppose the codeword that we use to describe a random variable X always starts with a symbol chosen from the set {7, 8, 9} , followed by binary digits {0, 1}. Thus we have a ternary code for the first symbol and binary thereafter. Give the optimal uniquely decodeable code (minimum expected number of symbols) for the probability distribution $p = (16/69, 15/69, 12/69, 10/69, 8/69, 8/69)$.",
    "prediction": 2.550724637681159,
    "answer": [
      7,
      8,
      9,
      70,
      80,
      90
    ],
    "rationale": "def solve():\n    import heapq\n\n    # Given probability distribution\n    p = [16/69, 15/69, 12/69, 10/69, 8/69, 8/69]\n\n    # Initialize the heap with the given probabilities\n    heap = [[prob, [index, \"\"]] for index, prob in enumerate(p)]\n    heapq.heapify(heap)\n\n    # Huffman coding algorithm\n    while len(heap) > 1:\n        lo = heapq.heappop(heap)\n        hi = heapq.heappop(heap)\n        for pair in lo[1:]:\n            pair[1] = '0' + pair[1]\n        for pair in hi[1:]:\n            pair[1] = '1' + pair[1]\n        heapq.heappush(heap, [lo[0] + hi[0]] + lo[1:] + hi[1:])\n\n    # Extract the Huffman code from the heap\n    huff_code = sorted(heapq.heappop(heap)[1:], key=lambda p: (len(p[-1]), p))\n\n    # Replace the first symbol with the ternary code\n    for pair in huff_code:\n        if pair[0] == 0:\n            pair[1] = '7' + pair[1][1:]\n        elif pair[0] == 1:\n            pair[1] = '8' + pair[1][1:]\n        elif pair[0] == 2:\n            pair[1] = '9' + pair[1][1:]\n\n    # Calculate the expected number of symbols\n    ans = sum([len(code[1]) * p[code[0]] for code in huff_code])\n\n    return ans",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "xueguangma/effective_rates_2.json",
    "question": "What is the effective rates for 3% compounded monthly?",
    "prediction": 0.030415956913506736,
    "answer": 0.0304,
    "rationale": "def solve():\n  nominal_rate = 0.03\n  compounding_periods = 12\n\n  effective_rate = (1 + nominal_rate / compounding_periods) ** compounding_periods - 1\n  return effective_rate",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/euler-graph2.json",
    "question": "Suppose a convex 3d-object has 15 vertices and 39 edges. How many faces does it have?",
    "prediction": 26,
    "answer": 26,
    "rationale": "def solve():\n  # Using Euler's formula for convex polyhedra: V - E + F = 2\n  # Where V is the number of vertices, E is the number of edges, and F is the number of faces\n  V = 15\n  E = 39\n\n  # Rearrange the formula to find F: F = E - V + 2\n  F = E - V + 2\n\n  return F",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "jianyu_xu/multiplication_1.json",
    "question": "Given that each cone can contain two ice cream balls, how many different ice cream cones can you make if you have 6 flavors of ice cream and 5 types of cones?",
    "prediction": 75,
    "answer": 180,
    "rationale": "def solve():\n  flavors = 6\n  cone_types = 5\n  balls_in_cone = 2\n\n  # Calculate the number of different ice cream balls combinations\n  ice_cream_combinations = flavors * (flavors - 1) // 2\n\n  # Calculate the total number of different ice cream cones\n  ans = ice_cream_combinations * cone_types\n\n  return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "panlu/rigid-body3.json",
    "question": "A door 1.00 m wide, of mass 15 kg, can rotate freely about a vertical axis through its hinges. A bullet with a mass of 10 g and a speed of 400 m/s strikes the center of the door, in a direction perpendicular to the plane of the door, and embeds itself there. Find the door's angular speed. (Unit: rad/s)",
    "prediction": 0.4,
    "answer": 0.4,
    "rationale": "def solve():\n  # Constants\n  door_mass = 15  # kg\n  door_width = 1  # m\n  bullet_mass = 0.01  # kg (10 g)\n  bullet_speed = 400  # m/s\n\n  # Calculate the moment of inertia of the door\n  I_door = (1/3) * door_mass * door_width**2\n\n  # Calculate the angular momentum of the bullet\n  L_bullet = bullet_mass * bullet_speed * (door_width / 2)\n\n  # Calculate the total angular momentum (conservation of angular momentum)\n  L_total = L_bullet\n\n  # Calculate the angular speed of the door\n  angular_speed = L_total / I_door\n\n  return angular_speed",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "panlu/friction1.json",
    "question": "You want to move a 500-N crate across a level floor. To start thecrate moving, you have to pull with a 230-N horizontal force.Once the crate breaks loose and starts to move, you can keep itmoving at constant velocity with only 200 N. What are the coefficients of static and kinetic friction?",
    "prediction": [
      0.46,
      0.4
    ],
    "answer": 0.4,
    "rationale": "def solve():\n    # Given values\n    normal_force = 500  # N\n    static_force = 230  # N\n    kinetic_force = 200  # N\n\n    # Coefficient of static friction\n    static_friction = static_force / normal_force\n\n    # Coefficient of kinetic friction\n    kinetic_friction = kinetic_force / normal_force\n\n    return [static_friction, kinetic_friction]",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xueguangma/forward_price_1.json",
    "question": "consider a forward contract on a non-dividend paying stock that matures in 6 months. The current stock price is $50 and the 6-month interest rate is 4% per annum. What is the forward price, F.",
    "prediction": 51.0,
    "answer": 51.0,
    "rationale": "def solve():\n  stock_price = 50\n  interest_rate = 0.04\n  time_to_maturity = 0.5\n\n  forward_price = stock_price * (1 + interest_rate * time_to_maturity)\n  return forward_price",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "jianyu_xu/Binomial_5.json",
    "question": "In how many ways can a committee of 2 men and 3 women be selected from a group of 6 men and 8 women?",
    "prediction": 840,
    "answer": 840,
    "rationale": "def solve():\n    import math\n\n    # Calculate the number of ways to choose 2 men from 6 men\n    men_ways = math.comb(6, 2)\n\n    # Calculate the number of ways to choose 3 women from 8 women\n    women_ways = math.comb(8, 3)\n\n    # Calculate the total number of ways to form the committee\n    ans = men_ways * women_ways\n\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "jianyu_xu/Lah_number_5.json",
    "question": "How many ways are there to divide a set of 7 elements into 4 non-empty ordered subsets?",
    "prediction": 350,
    "answer": 4200,
    "rationale": "def solve():\n    from math import comb\n\n    # Using the Stirling number of the second kind formula\n    # S(n, k) = k * S(n-1, k) + S(n-1, k-1)\n    # where n is the number of elements and k is the number of subsets\n\n    n = 7\n    k = 4\n    stirling_numbers = [[0 for _ in range(k+1)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == j:\n                stirling_numbers[i][j] = 1\n            elif i < j:\n                stirling_numbers[i][j] = 0\n            else:\n                stirling_numbers[i][j] = j * stirling_numbers[i-1][j] + stirling_numbers[i-1][j-1]\n\n    ans = stirling_numbers[n][k]\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "jianyu_xu/Stirling_number_second_kind_3.json",
    "question": "In how many ways can a group of 10 people be divided into 3 non-empty subsets?",
    "prediction": 36,
    "answer": 9330,
    "rationale": "def solve():\n    from math import comb\n\n    # Using the stars and bars method, we can divide n people into k non-empty subsets.\n    # The formula is: C(n-1, k-1)\n    n = 10\n    k = 3\n    ans = comb(n-1, k-1)\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "jianyu_xu/Multinomial_2.json",
    "question": "A group of 9 people is split into 3 committees of 3 people. Committees are identical besides of members. In how many ways can this be done?",
    "prediction": 280,
    "answer": 280,
    "rationale": "def solve():\n  from math import comb\n\n  # There are 9 people and we need to choose 3 for the first committee\n  ways_to_choose_first_committee = comb(9, 3)\n\n  # There are 6 people left and we need to choose 3 for the second committee\n  ways_to_choose_second_committee = comb(6, 3)\n\n  # The last 3 people will form the third committee\n  # We divide by 3! since the committees are identical and we don't want to count the same arrangement multiple times\n  ans = (ways_to_choose_first_committee * ways_to_choose_second_committee) // 6\n\n  return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "tonyxia/nuclear1.json",
    "question": "The cross section for a 2.0-MeV neutron (a typical energy for a neutron released in fission) being absorbed by a U-238 nucleus and producing fission is 0.68 barn. For a pure U-238 sample of thickness 3.2 cm, what is the probability of a 2.0-MeV neutron producing fission?",
    "prediction": 0.10140971609801197,
    "answer": 0.1,
    "rationale": "def solve():\n  # Constants\n  cross_section = 0.68 * 10**(-24) # barn to cm^2\n  thickness = 3.2 # cm\n  atomic_mass_u238 = 238.0 # g/mol\n  avogadro_number = 6.022 * 10**23 # atoms/mol\n  density_u238 = 19.1 # g/cm^3\n\n  # Calculate the number of atoms per unit volume\n  atoms_per_unit_volume = (density_u238 * avogadro_number) / atomic_mass_u238\n\n  # Calculate the probability of a 2.0-MeV neutron producing fission\n  probability = 1 - (1 - cross_section * atoms_per_unit_volume)**thickness\n\n  return probability",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/chain_rule2.json",
    "question": "If z = \\frac{1 + e^{-2x}}{x + tan(12x)}, what's the derivative of $\\frac{\\partial z}{\\partial x}$ at $x = 1$.",
    "prediction": 0,
    "answer": -153.59,
    "rationale": "def solve():\n  import numpy as np\n\n  # Define the function z(x)\n  def z(x):\n    return (1 + np.exp(-2 * x)) / (x + np.tan(12 * x))",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_2_4.json",
    "question": "What is \\lim_{x \\to 1} ((x - 1) sin((\\pi)/(x - 1))?",
    "prediction": 9.545296484091743e-11,
    "answer": 0,
    "rationale": "def solve():\n    import math\n\n    def f(x):\n        return (x - 1) * math.sin(math.pi / (x - 1))\n\n    x = 1\n    delta = 1e-10\n    ans = f(x + delta)\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "mingyin/Fundamental-Theorem-of-Calculus1.json",
    "question": "what is the value of $\\int_{0}^\\pi (sin(123*x/2)/sin(x/2))^2dx$? Round the answer to the thousands decimal.",
    "prediction": 386.416,
    "answer": 386.4158898,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.integrate import quad\n\n    def integrand(x):\n        return (np.sin(123 * x / 2) / np.sin(x / 2)) ** 2\n\n    ans, _ = quad(integrand, 0, np.pi)\n    return round(ans, 3)",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/cramer's_rule2.json",
    "question": "For the two linear equations $2 * x + 3 * y + z = 8$ and $4 * x + 4 * y + 4z = 12$ and $x + y + 8z = 10$ with variables x, y and z. Use cramer's rule to solve these three variables.",
    "prediction": [
      -0.9999999999999997,
      3.0,
      1.0
    ],
    "answer": [
      -1,
      3,
      1
    ],
    "rationale": "def solve():\n    import numpy as np\n\n    # Coefficient matrix\n    A = np.array([[2, 3, 1], [4, 4, 4], [1, 1, 8]])\n\n    # Constants matrix\n    B = np.array([8, 12, 10])\n\n    # Check if the determinant of A is non-zero\n    det_A = np.linalg.det(A)\n    if det_A == 0:\n        return \"No unique solution\"\n\n    # Calculate the determinants of the matrices obtained by replacing the columns of A with B\n    A_x = A.copy()\n    A_x[:, 0] = B\n    det_A_x = np.linalg.det(A_x)\n\n    A_y = A.copy()\n    A_y[:, 1] = B\n    det_A_y = np.linalg.det(A_y)\n\n    A_z = A.copy()\n    A_z[:, 2] = B\n    det_A_z = np.linalg.det(A_z)\n\n    # Calculate the values of x, y, and z using Cramer's rule\n    x = det_A_x / det_A\n    y = det_A_y / det_A\n    z = det_A_z / det_A\n\n    return [x, y, z]",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "xinyi/expected_length_of_instatntaneous_code.json",
    "question": "A random variable $X$ takes on $m$ values and has entropy $H(X)$. An instantaneous ternary code is found for this source, with an average length $L=H_3(X)$ that achieves the entropy bound. Then $m$ must be odd. True or False?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "mingyin/log-concave1.json",
    "question": "Is the cumulative distribution function of the standard gaussian distribution $F(x)=1/\\sqrt{2 \\pi} \\int_{-\\infty}^x e^{-t^2/2} dt$ is log-concave?  Return 1 for yes and 0 for no.",
    "prediction": 0,
    "answer": 1.0,
    "rationale": "def solve():\n    import numpy as np\n    import scipy.integrate as integrate\n\n    def gaussian_pdf(t):\n        return (1 / np.sqrt(2 * np.pi)) * np.exp(-t**2 / 2)\n\n    def second_derivative_log_cdf(x):\n        cdf, _ = integrate.quad(gaussian_pdf, -np.inf, x)\n        pdf = gaussian_pdf(x)\n        return (x * pdf - pdf**2) / cdf**2\n\n    test_points = np.linspace(-10, 10, 1000)\n    for x in test_points:\n        if second_derivative_log_cdf(x) > 0:\n            return 0\n    return 1",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/mean-value-theorem1.json",
    "question": "suppose f is differentiable in [0,+\\infty) and f(0)=0. When x>=0, |f'(x)|<=|f(x)| where f' stands for the derivative of f. What is f(2687) and f(35)? answer the two values in a list",
    "prediction": [
      0,
      0
    ],
    "answer": [
      0,
      0
    ],
    "rationale": "def solve():\n    # Since f is differentiable in [0, +\u221e) and f(0) = 0, and |f'(x)| <= |f(x)| for x >= 0,\n    # we can conclude that f(x) = 0 for all x >= 0.\n    # Therefore, f(2687) = 0 and f(35) = 0.\n    return [0, 0]",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "xinyi/distortion_rate_function_1.json",
    "question": "The distortion rate function $D(R)=\\min_{p(\\hat{x}|x):I(X;\\hat{X})\\leq R} E(d(X,\\hat{X}))$ is nonincreasing. True or False?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "xueguangma/fair_market_value_of_a_bond.json",
    "question": "A state issues a 15 year $1000 bond that pays $25 every six months. If the current market interest rate is 4%, what is the fair market value of the bond?",
    "prediction": 1111.9822777550216,
    "answer": 1111.97,
    "rationale": "def solve():\n  face_value = 1000\n  coupon_payment = 25\n  periods = 15 * 2  # 15 years, semi-annual payments\n  market_interest_rate = 0.04 / 2  # semi-annual interest rate\n\n  # Calculate the present value of the coupon payments\n  coupon_pv = sum([coupon_payment / (1 + market_interest_rate)**i for i in range(1, periods + 1)])\n\n  # Calculate the present value of the face value\n  face_value_pv = face_value / (1 + market_interest_rate)**periods\n\n  # Calculate the fair market value of the bond\n  fair_market_value = coupon_pv + face_value_pv\n\n  return fair_market_value",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/sharpe_ratio.json",
    "question": "Let\u2019s assume that the 10-year annual return for the S&P 500 (market portfolio) is 10%, while the average annual return on Treasury bills (a good proxy for the risk-free rate) is 5%. The standard deviation is 15% over a 10-year period. Whats the market Sharpe Ratio?",
    "prediction": 0.33333333333333337,
    "answer": 0.33,
    "rationale": "def solve():\n  market_return = 0.10\n  risk_free_rate = 0.05\n  standard_deviation = 0.15\n\n  sharpe_ratio = (market_return - risk_free_rate) / standard_deviation\n  return sharpe_ratio",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/binomial_model_2.json",
    "question": "For a two-period binomial model for stock prices, you are given: (i) Each period is 6 months. (ii) The current price for a nondividend-paying stock is $70.00. (iii) u =1.181, where u is one plus the rate of capital gain on the stock per period if the price goes up. (iv) d = 0.890 , where d is one plus the rate of capital loss on the stock per period if the price goes down. (v) The continuously compounded risk-free interest rate is 5%. What is the current price of a one-year American put option on the stock with a strike price of $80.00.",
    "prediction": 9.725164029220029,
    "answer": 10.75,
    "rationale": "def solve():\n    import math\n\n    # Given values\n    S0 = 70.00\n    u = 1.181\n    d = 0.890\n    r = 0.05\n    T = 1\n    K = 80.00\n\n    # Calculate the risk-neutral probability\n    delta_t = T / 2\n    R = math.exp(r * delta_t)\n    q = (R - d) / (u - d)\n\n    # Calculate the stock prices at the end of the two periods\n    S_uu = S0 * u * u\n    S_ud = S0 * u * d\n    S_dd = S0 * d * d\n\n    # Calculate the put option payoffs at the end of the two periods\n    P_uu = max(K - S_uu, 0)\n    P_ud = max(K - S_ud, 0)\n    P_dd = max(K - S_dd, 0)\n\n    # Calculate the put option prices at the beginning of the second period\n    P_u = (q * P_uu + (1 - q) * P_ud) / R\n    P_d = (q * P_ud + (1 - q) * P_dd) / R\n\n    # Calculate the put option price at the beginning of the first period\n    P0 = (q * P_u + (1 - q) * P_d) / R\n\n    return P0",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "jianyu_xu/inclusion_and_exclusion_1.json",
    "question": "How many integers between 1 (included) and 100 (included) are divisible by either 2, 3, or 5?",
    "prediction": 74,
    "answer": 74,
    "rationale": "def solve():\n    count = 0\n    for i in range(1, 101):\n        if i % 2 == 0 or i % 3 == 0 or i % 5 == 0:\n            count += 1\n    return count",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/determinant1.json",
    "question": "For matrix A = [[2, 4, 3], [3, 0, 1], [1, 2, 5]], what is its determinant?",
    "prediction": -42,
    "answer": -42,
    "rationale": "def solve():\n  import numpy as np\n\n  A = np.array([[2, 4, 3], [3, 0, 1], [1, 2, 5]])\n  ans = np.linalg.det(A)\n  return round(ans)",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/optics4.json",
    "question": "Malus' law: $I=I_0*cos^2($\\theta$)$. Where I is the intensity of polarized light that has passed through the polarizer, I_0 is the intensity of polarized light before the polarizer, and $\\theta$ is the angle between the polarized light and the polarizer. Unpolarized light passes through a polarizer. It then passes through another polarizer at angle 40 degree to the first, and then another at angle 15 degree to the second. What percentage of the original intensity was the light coming out of the second polarizer?",
    "prediction": 29.34120444167326,
    "answer": 54.8,
    "rationale": "def solve():\n    import math\n\n    # Angle between the first and second polarizer\n    theta1 = 40\n\n    # Angle between the second and third polarizer\n    theta2 = 15\n\n    # Intensity of unpolarized light before the first polarizer\n    I0 = 1\n\n    # Intensity of polarized light after the first polarizer\n    I1 = I0 * 0.5\n\n    # Intensity of polarized light after the second polarizer\n    I2 = I1 * math.cos(math.radians(theta1))**2\n\n    # Intensity of polarized light after the third polarizer\n    I3 = I2 * math.cos(math.radians(theta2))**2\n\n    # Percentage of the original intensity after the second polarizer\n    percentage = (I2 / I0) * 100\n\n    return percentage",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/t_test1.json",
    "question": "Based on field experiments, a new variety green gram is expected to given an yield of 12.0 quintals per hectare. The variety was tested on 10 randomly selected farmers fields. The yield ( quintals/hectare) were recorded as 14.3,12.6,13.7,10.9,13.7,12.0,11.4,12.0,12.6,13.1. Do the results conform the expectation with Level of significance being 5%?",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if the results conform to the expectation with a level of significance of 5%, we will perform a one-sample t-test. The null hypothesis (H0) is that the mean yield is equal to the expected yield (12.0 quintals/hectare), and the alternative hypothesis (H1) is that the mean yield is not equal to the expected yield.\n\nFirst, we need to calculate the mean and standard deviation of the sample data:\n\nYield data: [14.3, 12.6, 13.7, 10.9, 13.7, 12.0, 11.4, 12.0, 12.6, 13.1]\nMean (x\u0304) = (14.3 + 12.6 + 13.7 + 10.9 + 13.7 + 12.0 + 11.4 + 12.0 + 12.6 + 13.1) / 10 = 126.3 / 10 = 12.63\nStandard deviation (s) = \u221a[(\u03a3(xi - x\u0304)\u00b2) / (n - 1)] = \u221a[(1.69\u00b2 + 0.03\u00b2 + 1.07\u00b2 + 1.73\u00b2 + 1.07\u00b2 + 0.63\u00b2 + 1.23\u00b2 + 0.63\u00b2 + 0.03\u00b2 + 0.47\u00b2) / 9] = \u221a[11.56] = 3.40\n\nNow, we can calculate the t-value:\n\nt = (x\u0304 - \u03bc) / (s / \u221an) = (12.63 - 12.0) / (3.40 / \u221a10) = 0.63 / 1.08 = 0.58\n\nNext, we need to find the critical t-value for a two-tailed t-test with a 5% level of significance and 9 degrees of freedom (n - 1 = 10 - 1 = 9). Using a t-table or calculator, we find the critical t-value to be approximately \u00b12.262.\n\nSince the calculated t-value (0.58) is within the range of the critical t-values (-2.262 to 2.262), we fail to reject the null hypothesis.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "maxku/ipnetwork7-lan.json",
    "question": "In a Gigabit Ethernet LAN, the average size of a frame is 1000 bytes. If a noise of 2ms occurs on the LAN, how many frames are destroyed?",
    "prediction": 250,
    "answer": 250,
    "rationale": "def solve():\n  frame_size = 1000 # bytes\n  noise_duration = 2e-3 # 2ms in seconds\n  gigabit_ethernet_speed = 1e9 # 1 Gigabit per second in bits per second\n\n  # Convert frame size to bits\n  frame_size_bits = frame_size * 8\n\n  # Calculate the number of bits destroyed by the noise\n  bits_destroyed = gigabit_ethernet_speed * noise_duration\n\n  # Calculate the number of frames destroyed\n  frames_destroyed = bits_destroyed / frame_size_bits\n\n  return int(frames_destroyed)",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "jianyu_xu/Catalan_3.json",
    "question": "In how many ways can a convex polygon with 8 sides be divided into triangles by connecting its vertices, with no intersecting lines?",
    "prediction": 132,
    "answer": 132,
    "rationale": "def solve():\n  # We can use the Catalan numbers formula to find the number of ways to divide a convex polygon into triangles\n  # The formula is: C_n = (1/(n+1)) * (2n choose n)\n  # For an 8-sided polygon, n = 8 - 2 = 6\n  n = 6\n\n  # Calculate the binomial coefficient (2n choose n)\n  from math import comb\n  binomial_coefficient = comb(2 * n, n)\n\n  # Calculate the Catalan number\n  ans = (1 / (n + 1)) * binomial_coefficient\n\n  return int(ans)",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "jianyu_xu/Multinomial_5.json",
    "question": "A box contains 4 red, 3 green, and 2 blue balls. Balls are identical besides of their colors. In how many ways can we choose 4 balls, if at least 2 are red?",
    "prediction": 49,
    "answer": 6,
    "rationale": "def solve():\n    from math import comb\n\n    # Calculate the number of ways to choose 4 balls with at least 2 red balls\n    # Case 1: 2 red, 1 green, 1 blue\n    case1 = comb(4, 2) * comb(3, 1) * comb(2, 1)\n\n    # Case 2: 3 red, 1 green\n    case2 = comb(4, 3) * comb(3, 1)\n\n    # Case 3: 4 red\n    case3 = comb(4, 4)\n\n    ans = case1 + case2 + case3\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/ODE2.json",
    "question": "Use Euler's Method to calculate the approximation of y(0.2) where y(x) is the solution of the initial-value problem that is as follows. y''+xy'+y=0 and y(0)=2 and y'(0) = 3.",
    "prediction": 2.5799999999999996,
    "answer": 2.58,
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the given functions and initial conditions\n    def f(x, y, z):\n        return z\n\n    def g(x, y, z):\n        return -x * z - y\n\n    x0, y0, z0 = 0, 2, 3\n    h = 0.1\n    n = 2\n\n    # Implement Euler's Method\n    for i in range(n):\n        x1 = x0 + h\n        y1 = y0 + h * f(x0, y0, z0)\n        z1 = z0 + h * g(x0, y0, z0)\n\n        x0, y0, z0 = x1, y1, z1\n\n    return y1",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xinyi/fisher_information_4.json",
    "question": "Let $g_\\theta(x_1,x_2)=f_\\theta(x_1)f_\\theta(x_2)$. Let $J_f(\\theta)$ be the Fisher information of $f_\\theta$.  What is the relationship between $J_f(\\theta)$ and $J_g(\\theta)$? (a) $J_g(\\theta) = 0.5J_f(\\theta)$. (b) $J_g(\\theta) = J_f(\\theta)$. (c) $J_g(\\theta) = 2J_f(\\theta)$. (d) $J_g(\\theta) = 4J_f(\\theta)$. Which option is correct?",
    "prediction": "(c)",
    "answer": "(c)",
    "rationale": "The Fisher information of a function is a measure of the amount of information that an observable random variable carries about an unknown parameter. For the given functions $f_\\theta$ and $g_\\theta$, we have $g_\\theta(x_1, x_2) = f_\\theta(x_1)f_\\theta(x_2)$. \n\nThe Fisher information of $f_\\theta$ is given by $J_f(\\theta) = E\\left[\\left(\\frac{\\partial \\log f_\\theta(X)}{\\partial \\theta}\\right)^2\\right]$, where $E$ denotes the expectation.\n\nNow, let's find the Fisher information of $g_\\theta$. We have:\n\n$\\log g_\\theta(x_1, x_2) = \\log f_\\theta(x_1) + \\log f_\\theta(x_2)$\n\nTaking the derivative with respect to $\\theta$, we get:\n\n$\\frac{\\partial \\log g_\\theta(x_1, x_2)}{\\partial \\theta} = \\frac{\\partial \\log f_\\theta(x_1)}{\\partial \\theta} + \\frac{\\partial \\log f_\\theta(x_2)}{\\partial \\theta}$\n\nNow, we can find the Fisher information of $g_\\theta$:\n\n$J_g(\\theta) = E\\left[\\left(\\frac{\\partial \\log g_\\theta(X_1, X_2)}{\\partial \\theta}\\right)^2\\right] = E\\left[\\left(\\frac{\\partial \\log f_\\theta(X_1)}{\\partial \\theta} + \\frac{\\partial \\log f_\\theta(X_2)}{\\partial \\theta}\\right)^2\\right]$\n\nUsing the properties of expectation and independence, we can simplify this expression:\n\n$J_g(\\theta) = E\\left[\\left(\\frac{\\partial \\log f_\\theta(X_1)}{\\partial \\theta}\\right)^2\\right] + 2E\\left[\\frac{\\partial \\log f_\\theta(X_1)}{\\partial \\theta}\\frac{\\partial \\log f_\\theta(X_2)}{\\partial \\theta}\\right] + E\\left[\\left(\\frac{\\partial \\log f_\\theta(X_2)}{\\partial \\theta}\\right)^2\\right]$\n\nSince $X_1$ and $X_2$ are independent, the cross term becomes zero:\n\n$J_g(\\theta) = E\\left[\\left(\\frac{\\partial \\log f_\\theta(X_1)}{\\partial \\theta}\\right)^2\\right] + E\\left[\\left(\\frac{\\partial \\log f_\\theta(X_2)}{\\partial \\theta}\\right)^2\\right]$\n\nNow, we can see that $J_g(\\theta)$ is the sum of two Fisher information terms of $f_\\theta$. Therefore, the relationship between $J_f(\\theta)$ and $J_g(\\theta)$ is:\n\n$J_g(\\theta) = 2J_f(\\theta)$\n\nTherefore, the answer is (c).",
    "answer_type": "option",
    "correct": true
  },
  {
    "id": "wenhuchen/circular1.json",
    "question": "ABCD is a square. Inscribed Circle center is O. Find the the angle of \u2220AMK. Return the numeric value.",
    "prediction": 22.5,
    "answer": 130.9,
    "rationale": "def solve():\n    # Since ABCD is a square and O is the center of the inscribed circle,\n    # all angles of the square are 90 degrees.\n    # The angle \u2220AMK is half of the angle \u2220AOK.\n    # The angle \u2220AOK is half of the angle \u2220AOB, which is 45 degrees.\n    # Therefore, the angle \u2220AMK is half of 45 degrees.\n    ans = 45 / 2\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/graphtheory12-vertexcover-hard.json",
    "question": "Let a undirected graph G with edges E = {<0,2>,<1,4>,<9,6>,<8,12>,<2,4>,<1,3>,<1,5>,<12,1>,<8,1>,<5,9>,<0,10>,<5,2>,<0,8>,<3,4>,<3,11>,<7,1>,<2,1>,<0,12>,<1,0>,<7,8>}, which <A,B> represent Node A is connected to Node B. What is the minimum vertex cover of G? Represent the vertex cover in a list of ascending order.",
    "prediction": 0,
    "answer": [
      0,
      1,
      2,
      3,
      8,
      9
    ],
    "rationale": "def solve():\n    import networkx as nx\n\n    # Create the undirected graph\n    G = nx.Graph()\n    edges = [(0, 2), (1, 4), (9, 6), (8, 12), (2, 4), (1, 3), (1, 5), (12, 1), (8, 1), (5, 9), (0, 10), (5, 2), (0, 8), (3, 4), (3, 11), (7, 1), (2, 1), (0, 12), (1, 0), (7, 8)]\n\n    # Add edges to the graph\n    G.add_edges_from(edges)\n\n    # Find the minimum vertex cover using the approximation algorithm\n    vertex_cover = nx.algorithms.approximation.vertex_cover.min_weighted_vertex_cover(G)\n\n    # Sort the vertex cover in ascending order\n    ans = sorted(list(vertex_cover))\n\n    return ans",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "tonyxia/divisibility4.json",
    "question": "Find the number of integers n, 1 \u2264 n \u2264 25 such that n^2 + 3n + 2 is divisible by 6.",
    "prediction": 17,
    "answer": 13,
    "rationale": "def solve():\n    count = 0\n    for n in range(1, 26):\n        if (n**2 + 3*n + 2) % 6 == 0:\n            count += 1\n    return count",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/stoke's_theorem1.json",
    "question": "Use Stoke's Theorem to evaluate $\\iint_S curl \\vec{F} \\cdot d \\vec{r}$ where $\\vec{F} = z^2 \\vec{i} - 3xy \\vec{j} + x^3y^3 \\vec{k}$ and $S$ is the part of $z = 5 - x^2 - y^2$ above the plane $z$=1. Assume that S is oriented upwards.",
    "prediction": 0,
    "answer": 0.0,
    "rationale": "def solve():\n    import sympy as sp\n\n    x, y, z = sp.symbols('x y z')\n\n    # Define the vector field F\n    F = sp.Matrix([z**2, -3*x*y, x**3*y**3])\n\n    # Define the surface S\n    S = 5 - x**2 - y**2\n\n    # Compute the curl of F\n    curl_F = F.diff(y, x) - F.diff(z, y) + F.diff(x, z)\n\n    # Compute the dot product of curl_F and dS\n    dS = sp.Matrix([x, y, S]).cross(sp.Matrix([1, 0, -x])).cross(sp.Matrix([0, 1, -y]))\n    curl_F_dot_dS = curl_F.dot(dS)\n\n    # Integrate curl_F_dot_dS over the region above z = 1\n    ans = sp.integrate(sp.integrate(curl_F_dot_dS, (y, -sp.sqrt(4 - x**2), sp.sqrt(4 - x**2))), (x, -2, 2))\n\n    return ans.evalf()",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/earnings_multiplier_3.json",
    "question": "Company A is currently trading at $150 per share, and earnings per share are calculated as $10. What is the P/E ratio?",
    "prediction": 15.0,
    "answer": 15.0,
    "rationale": "def solve():\n  share_price = 150\n  earnings_per_share = 10\n  pe_ratio = share_price / earnings_per_share\n  return pe_ratio",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/nuclear2.json",
    "question": "The cross section for neutrons of energy 10 eV being captured by silver is 17 barns. What is the probability of a neutron being captured as it passes through a layer of silver 2 mm thick?",
    "prediction": 0.18054078017012187,
    "answer": 0.2,
    "rationale": "import math\ndef solve():\n  molar_mass_silver = 107.87  # g/mol\n  density_silver = 10.49  # g/cm\u00b3\n  avogadro_number = 6.022e23  # atoms/mol\n  cross_section = 17  # barns\n  thickness_mm = 2  # mm\n\n  # Convert cross section to cm\u00b2\n  cross_section_cm2 = cross_section * 1e-24\n\n  # Calculate number density of silver\n  number_density = (density_silver / molar_mass_silver) * avogadro_number\n\n  # Convert thickness to cm\n  thickness_cm = thickness_mm / 10\n\n  # Calculate probability of neutron capture\n  probability = 1 - math.exp(-number_density * cross_section_cm2 * thickness_cm)\n\n  return probability",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/totient2.json",
    "question": "What is 3^(3^(3^3)) mod 100?",
    "prediction": 87,
    "answer": 87,
    "rationale": "def solve():\n  # import library\n  import math\n\n  # implement the code\n  base = 3\n  exponent = 3 ** (3 ** 3)\n  mod = 100\n\n  ans = pow(base, exponent, mod)\n  return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/compound_interest2.json",
    "question": "Calculate the interest rate (between 0 and 1) for an account that started with $5,000 and now has $13,000 and has been compounded annually for the past 12 years. Answer with the numeric value.",
    "prediction": 0.08288194398431958,
    "answer": 0.0828,
    "rationale": "def solve():\n    initial_balance = 5000\n    final_balance = 13000\n    years = 12\n\n    interest_rate = (final_balance / initial_balance) ** (1 / years) - 1\n    return interest_rate",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xinyi/law_of_large_numbers.json",
    "question": "Let $X_1, X_2, \\ldots$ be a sequence of independent indetically distributed random variables drawn according to the probability mass function $p(x) = N(0,1)$. Let $q(x)=N(1,1)$ be another probability mass function. Use natural logarithm to evaluate $\\lim -\\frac{1}{n}\\log{q(X_1,X_2,\\ldots,X_n)}$ as $n \\to \\infty$.",
    "prediction": 0,
    "answer": 1.4,
    "rationale": "import numpy as np\nfrom scipy.integrate import quad\ndef p(x):\n    return (1 / np.sqrt(2 * np.pi)) * np.exp(-x**2 / 2)\ndef q(x):\n    return (1 / np.sqrt(2 * np.pi)) * np.exp(-(x - 1)**2 / 2)\ndef integrand(x):\n    return -np.log(q(x)) * p(x)\ndef solve():\n    ans, _ = quad(integrand, -np.inf, np.inf)\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/implicit-function-theorem1.json",
    "question": "For equation x^2*y^2-3y+2x^3=0, and suppose y=f(x). Then what is the derivate f'(1) near the point (1,1) and the point (1,2)? return the answer in a list.",
    "prediction": 0,
    "answer": [
      8,
      -14
    ],
    "rationale": "def solve():\n    import sympy as sp\n\n    x, y = sp.symbols('x y')\n    f = x**2 * y**2 - 3*y + 2*x**3\n    y = sp.Function('y')(x)\n\n    # Implicit differentiation\n    dydx = -sp.diff(f, x) / sp.diff(f, y)\n\n    # Evaluate the derivative at the points (1, 1) and (1, 2)\n    ans1 = dydx.subs({x: 1, y: 1})\n    ans2 = dydx.subs({x: 1, y: 2})\n\n    return [ans1, ans2]",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "xueguangma/treynor_ratio.json",
    "question": "Let's assume that the 10-year annual return for the S&P 500 (market portfolio) is 10%, while the average annual return on Treasury bills (a good proxy for the risk-free rate) is 5%. Whats the market Treynor Ratio? Return the numeric value between 0 and 1.",
    "prediction": 0.5,
    "answer": 0.05,
    "rationale": "def solve():\n  market_return = 0.10\n  risk_free_rate = 0.05\n  market_treynor_ratio = (market_return - risk_free_rate) / market_return\n  return market_treynor_ratio",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "jianyu_xu/Lah_number_2.json",
    "question": "How many ways are there to divide a set of 5 elements into 2 non-empty ordered subsets?",
    "prediction": 30,
    "answer": 240,
    "rationale": "def solve():\n  # We can use the formula for combinations: C(n, k) = n! / (k! * (n-k)!)\n  from math import factorial\n\n  # In this case, we have n = 5 elements and we want to divide them into 2 non-empty ordered subsets.\n  # So, we can have k = 1, 2, 3, or 4 elements in the first subset.\n  ans = 0\n  for k in range(1, 5):\n    ans += factorial(5) // (factorial(k) * factorial(5 - k))\n\n  return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "elainewan/econ_micro_14_3.json",
    "question": "Suppose a monopoly market has a demand function in which quantity demanded depends not only on market price (P) but also on the amount of advertising the firm does (A, measured in dollars). The specific form of this function is Q = (20 - P)(1 + 0.1A - 0.01A^2). The monopolistic firm's cost function is given by C = 10Q + 15 + A. Suppose there is no advertising (A = 0). What output will the profit-maximizing firm choose?",
    "prediction": 5.000000000000002,
    "answer": 5,
    "rationale": "def solve():\n    from scipy.optimize import minimize_scalar\n\n    # Define the demand function\n    def demand(P, A):\n        return (20 - P) * (1 + 0.1 * A - 0.01 * A ** 2)\n\n    # Define the cost function\n    def cost(Q, A):\n        return 10 * Q + 15 + A\n\n    # Define the profit function\n    def profit(Q, A):\n        P = 20 - Q / (1 + 0.1 * A - 0.01 * A ** 2)\n        return P * Q - cost(Q, A)\n\n    # Set A = 0 (no advertising)\n    A = 0\n\n    # Find the profit-maximizing output\n    result = minimize_scalar(lambda Q: -profit(Q, A), bounds=(0, 20), method='bounded')\n    optimal_output = result.x\n\n    return optimal_output",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "xueguangma/roys_safety_first_ratio.json",
    "question": "Portfolio | Portfolio 1 | Portfolio 2 | Portfolio 3\nExpected Portfolio Return |  5.3% | 6.5% | 7.2%\nPortfolio Standard Deviation | 8.2% | 9.1% | 10.1%\n\nIf we use Roy's safety-first criterion to decide with portfolio is optimal, with a threshold return of 5%. Is portfolio 2 the optimal one? Answer True or False.",
    "prediction": false,
    "answer": false,
    "rationale": "To use Roy's safety-first criterion, we need to calculate the Safety-First Ratio (SFR) for each portfolio. The SFR is calculated as follows:\n\nSFR = (Expected Portfolio Return - Threshold Return) / Portfolio Standard Deviation\n\nFor Portfolio 1:\nSFR1 = (5.3% - 5%) / 8.2% = 0.3% / 8.2% = 0.0366\n\nFor Portfolio 2:\nSFR2 = (6.5% - 5%) / 9.1% = 1.5% / 9.1% = 0.1648\n\nFor Portfolio 3:\nSFR3 = (7.2% - 5%) / 10.1% = 2.2% / 10.1% = 0.2178\n\nNow, we compare the SFRs to determine the optimal portfolio. The optimal portfolio is the one with the highest SFR.\n\nIn this case, Portfolio 3 has the highest SFR (0.2178), followed by Portfolio 2 (0.1648) and Portfolio 1 (0.0366).\n\nTherefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "elainewan/econ_micro_16_3.json",
    "question": "Universal Fur is located in Clyde, Baffin Island, and sells high-quality fur bow ties throughout the world at a price of $5 each. The production function for fur bow ties (q) is given by q = 240x - 2x^2, where x is the quantity of pelts used each week. Pelts are supplied only by Dan's Trading Post, which obtains them by hiring Eskimo trappers at a rate of $10 per day. Dan's weekly production function for pelts is given by x = \\sqrt{l}, where l represents the number of days of Eskimo time used each week. For a quasi-competitive case in which both Universal Fur and Dan's Trading Post act as price-takers for pelts, what will be the equilibrium price (p_x) for pelt?",
    "prediction": [
      1200.0,
      20.0
    ],
    "answer": 600,
    "rationale": "def solve():\n    from sympy import symbols, Eq, solve, sqrt\n\n    # Define the symbols\n    p_x, l = symbols('p_x l')\n\n    # Universal Fur's production function\n    q = 240 * sqrt(l) - 2 * (sqrt(l))**2\n\n    # Universal Fur's revenue function\n    R = 5 * q\n\n    # Universal Fur's cost function\n    C = p_x * sqrt(l)\n\n    # Universal Fur's profit function\n    profit = R - C\n\n    # First-order condition for profit maximization\n    d_profit_dl = profit.diff(l)\n\n    # Solve the first-order condition for p_x\n    eq = Eq(d_profit_dl, 0)\n    p_x_solution = solve(eq, p_x)[0]\n\n    return p_x_solution",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/line_integral2.json",
    "question": "Find the arc length of the curve, where x=t, y=t^2 and z=2*t^3/3.",
    "prediction": [
      2.0,
      0.2558427881104495,
      11.0
    ],
    "answer": 7.333,
    "rationale": "",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/Limit-of-sequence3.json",
    "question": "suppose $lim_{n \\rightarrow \\infty}a_n=1$, what is the limit of (a_1+2a_2+...+na_n)/n^2?",
    "prediction": 0,
    "answer": 0.5,
    "rationale": "def solve():\n    # import library\n    import sympy as sp\n\n    # define the variables\n    n = sp.Symbol('n')\n    a_n = sp.Symbol('a_n')\n\n    # define the sequence a_n\n    a_n = 1\n\n    # define the sum of the sequence\n    sum_sequence = sp.Sum(n * a_n, (n, 1, n))\n\n    # define the expression to find the limit\n    expression = sum_sequence / n**2\n\n    # find the limit as n approaches infinity\n    limit = sp.limit(expression, n, sp.oo)\n\n    return limit",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "jianyu_xu/Binomial_1.json",
    "question": "A company has 8 employees, including 3 managers and 5 engineers. How many different ways are there to form a team of 4 employees that includes at least 1 manager and at least 2 engineers?",
    "prediction": 60,
    "answer": 60,
    "rationale": "def solve():\n    from math import comb\n\n    # There are 3 managers and 5 engineers.\n    # We need at least 1 manager and at least 2 engineers in the team of 4.\n    # So, there are two possible cases:\n    # 1. 1 manager and 3 engineers\n    # 2. 2 managers and 2 engineers\n\n    # Case 1: 1 manager and 3 engineers\n    case1 = comb(3, 1) * comb(5, 3)\n\n    # Case 2: 2 managers and 2 engineers\n    case2 = comb(3, 2) * comb(5, 2)\n\n    # Total number of ways to form the team\n    ans = case1 + case2\n\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "tonyxia/particle6.json",
    "question": "Consider the 7.0-TeV protons that are produced in the LHC collider at CERN. Find the available center-of-mass energy if these protons collide with other protons in a fixed-target experiment in GeV.",
    "prediction": 114.59877767236438,
    "answer": 114.5,
    "rationale": "def solve():\n    import math\n\n    # Given values\n    proton_energy = 7.0  # TeV\n    proton_mass = 0.938  # GeV\n\n    # Convert energy to GeV\n    proton_energy_gev = proton_energy * 1000\n\n    # Calculate the center-of-mass energy using the formula:\n    # E_cm = sqrt(2 * m_p * E_p + m_p^2)\n    center_of_mass_energy = math.sqrt(2 * proton_mass * proton_energy_gev + proton_mass**2)\n\n    return center_of_mass_energy",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "panlu/physical_pendulum1.json",
    "question": "All walking animals, including humans, have a natural walking pace\u2014a number of steps per minute that is more comfortable than a faster or slower pace. Suppose that this pace corresponds to the oscillation of the leg as a physical pendulum.  Fossil evidence shows that T. rex, a two-legged dinosaur that lived about 65 million years ago, had a leg length L = 3.1 m and a stride length S = 4.0 m (the distance from one footprint to the next print of the same foot).  Estimate the walking speed of T. rex. (Unit: m/s)",
    "prediction": 1.1324884455901831,
    "answer": 1.4,
    "rationale": "def solve():\n    import math\n\n    # Constants\n    L = 3.1  # Leg length in meters\n    S = 4.0  # Stride length in meters\n\n    # Calculate the period of oscillation of the leg as a physical pendulum\n    g = 9.81  # Acceleration due to gravity in m/s^2\n    T = 2 * math.pi * math.sqrt(L / g)  # Period of oscillation in seconds\n\n    # Calculate the walking speed of T. rex\n    steps_per_second = 1 / T  # Steps per second\n    walking_speed = steps_per_second * S  # Walking speed in m/s\n\n    return walking_speed",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_2_9.json",
    "question": "Suppose g(x) is the horizontal asymptote of function f(x) = (\\sqrt{36 x^2 + 7}) / (9x + 4). What are possible values of g(2023)?",
    "prediction": 0.6666666666666666,
    "answer": [
      0.6667,
      -0.6667
    ],
    "rationale": "def solve():\n    import sympy as sp\n\n    x = sp.Symbol('x')\n    f_x = (sp.sqrt(36 * x**2 + 7)) / (9 * x + 4)\n\n    # Find the limit of f(x) as x approaches infinity\n    horizontal_asymptote = sp.limit(f_x, x, sp.oo)\n\n    # Evaluate g(x) at x = 2023\n    g_2023 = horizontal_asymptote.subs(x, 2023)\n\n    return float(g_2023)",
    "answer_type": "list of float",
    "correct": false
  },
  {
    "id": "elainewan/math_algebra_6_2.json",
    "question": "Let V be the space spanned by functions cos(2x) and sin(2x). Find the determinant of the linear transformation D(f) = f' from V to V.",
    "prediction": -2.0,
    "answer": 4,
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the functions and their derivatives\n    def f1(x):\n        return np.cos(2 * x)\n\n    def f1_prime(x):\n        return -2 * np.sin(2 * x)\n\n    def f2(x):\n        return np.sin(2 * x)\n\n    def f2_prime(x):\n        return 2 * np.cos(2 * x)\n\n    # Evaluate the functions and their derivatives at a specific point (e.g., x = 0)\n    x = 0\n    f1_val = f1(x)\n    f1_prime_val = f1_prime(x)\n    f2_val = f2(x)\n    f2_prime_val = f2_prime(x)\n\n    # Create the matrix of the linear transformation\n    matrix = np.array([[f1_prime_val, f2_prime_val],\n                       [f1_val, f2_val]])\n\n    # Calculate the determinant\n    det = np.linalg.det(matrix)\n\n    return det",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "xinyi/convex_hull.json",
    "question": "Two sets of points are linearly separable if and only if their convex hulls are disjoint. True or False?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "jianyu_xu/Binomial_4.json",
    "question": "In how many ways can 3 students be selected from a class of 20 to form a study group?",
    "prediction": 1140,
    "answer": 1140,
    "rationale": "def solve():\n  import math\n  ans = math.comb(20, 3)\n  return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "mingyin/Riemann-conformal-mapping-theorem1.json",
    "question": "Is there exist a holomorphic function $f$ on the unit disk $B(0,1)$ (boundary excluded) such that $f(B(0,1))=C$? Here C is the complex space. Return 1 for yes and 0 for no.",
    "prediction": 1,
    "answer": 1.0,
    "rationale": "def solve():\n    # According to the Riemann mapping theorem, there exists a holomorphic function f on the unit disk B(0,1) (boundary excluded) such that f(B(0,1))=C.\n    ans = 1\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/rolle_theorem.json",
    "question": "For the function $f(x)=|x|\u22121$ defined on $[-1,1]$. Does it meet the criteria of Rolle's Theorem? Answer true or false.",
    "prediction": false,
    "answer": false,
    "rationale": "Rolle's Theorem states that if a function f(x) is continuous on a closed interval [a, b], differentiable on the open interval (a, b), and f(a) = f(b), then there exists at least one c in the open interval (a, b) such that f'(c) = 0.\n\nFor the given function f(x) = |x| - 1, it is continuous on the closed interval [-1, 1]. However, it is not differentiable at x = 0, as the absolute value function has a sharp corner at x = 0. Additionally, f(-1) = |-1| - 1 = 0 and f(1) = |1| - 1 = 0, so f(a) = f(b).\n\nSince the function is not differentiable on the entire open interval (-1, 1), it does not meet the criteria of Rolle's Theorem. Therefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "tonyxia/statisticalphysics2.json",
    "question": "Compute the mean translational kinetic energy of a mole of ideal gas in J, both at room temperature 293 K.",
    "prediction": 6.0677565592826305e-21,
    "answer": 3650.0,
    "rationale": "def solve():\n  # import library\n  import math\n\n  # Constants\n  R = 8.314  # J/(mol*K)\n  T = 293  # K, room temperature\n  N = 6.022e23  # Avogadro's number\n\n  # implement the code\n  mean_translational_kinetic_energy = (3/2) * R * T / N\n\n  return mean_translational_kinetic_energy",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/fourier1-FS.json",
    "question": "Consider a periodic signal $x(t)$ with period $(T)$ equals to ten. Over one period (i.e., $-5 \\leq t<5)$, it is defined as $$ x(t)=\\left\\{\\begin{array}{cc} 2 & -5 \\leq t<0 \\\\ -2 & 0 \\leq t<5 \\end{array}\\right. $$ In Fourier series, the signal $x(t)$ is written in the form of $$ x(t)=\\sum_{k=-\\infty}^{\\infty} c_k e^{\\frac{j 2 \\pi k t}{T}} $$ where the Fourier series coefficient $c_k$ is obtained as, $$ c_k=\\frac{1}{T} \\int_{-\\frac{T}{2}}^{\\frac{T}{2}} x(t) e^{-\\frac{j 2 \\pi k t}{T}} d t $$ Determine the value of $c_0$ (i.e., $\\left.k=0\\right)$",
    "prediction": 9.020562075079397e-17,
    "answer": 0,
    "rationale": "def solve():\n    import numpy as np\n\n    T = 10\n    k = 0\n\n    def x(t):\n        if -5 <= t < 0:\n            return 2\n        elif 0 <= t < 5:\n            return -2\n        else:\n            return 0\n\n    def integrand(t, k, T):\n        return x(t) * np.exp(-1j * 2 * np.pi * k * t / T)\n\n    dt = 0.001\n    t_values = np.arange(-T/2, T/2, dt)\n    integral = sum([integrand(t, k, T) * dt for t in t_values])\n    c_k = (1/T) * integral\n\n    ans = c_k.real\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "mingyin/laplace-operator1.json",
    "question": "suppose $u=\\arctan \\frac{y}{x}$, what is numeric of $\\frac{\\partial^2 u}{\\partial x^2}+\\frac{\\partial^2 u}{\\partial y^2}$?",
    "prediction": 0,
    "answer": 0.0,
    "rationale": "def solve():\n    from sympy import symbols, atan, diff\n\n    x, y = symbols('x y')\n    u = atan(y / x)\n\n    # Calculate second partial derivatives\n    d2u_dx2 = diff(diff(u, x), x)\n    d2u_dy2 = diff(diff(u, y), y)\n\n    # Calculate the sum of second partial derivatives\n    ans = d2u_dx2 + d2u_dy2\n\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/optics8.json",
    "question": "Light travel from water n=1.33 to diamond n=2.42. If the angle of incidence was 13 degree, determine the angle of refraction.",
    "prediction": 7.101654105826129,
    "answer": 7.1,
    "rationale": "def solve():\n    import math\n\n    n1 = 1.33\n    n2 = 2.42\n    angle_of_incidence = 13\n\n    # Using Snell's Law: n1 * sin(angle_of_incidence) = n2 * sin(angle_of_refraction)\n    sin_angle_of_refraction = (n1 * math.sin(math.radians(angle_of_incidence))) / n2\n\n    # Calculate the angle of refraction in degrees\n    angle_of_refraction = math.degrees(math.asin(sin_angle_of_refraction))\n\n    return angle_of_refraction",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/Gauss\u2013Wantzel_theorem1.json",
    "question": "which n <= 20 can be constructed a regular n-gonwith compass and straightedge? return all the possible numbers in a list",
    "prediction": [
      1,
      2,
      4,
      5,
      8,
      10,
      13,
      16,
      17,
      20
    ],
    "answer": [
      3,
      4,
      5,
      6,
      8,
      10,
      12,
      15,
      16,
      17,
      20
    ],
    "rationale": "def solve():\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_fermat_prime(n):\n        if not is_prime(n):\n            return False\n        return (n - 1) % 4 == 0\n\n    def constructible_n_gon(n):\n        if n == 1:\n            return True\n        while n % 2 == 0:\n            n //= 2\n        if n == 1:\n            return True\n        for p in range(3, n + 1, 2):\n            if is_fermat_prime(p) and n % p == 0:\n                n //= p\n                if n % p == 0:\n                    return False\n        return n == 1\n\n    ans = [n for n in range(1, 21) if constructible_n_gon(n)]\n    return ans",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "xinyi/change_of_variable_linear.json",
    "question": "Consider a probability density $p_x(x)$ defined over a continuous variable x, and suppose that we make a nonlinear change of variable using $x = g(y)$. In the case of a linear transformation, the location of the maximum density transforms in the same way as the variable itself.",
    "prediction": true,
    "answer": true,
    "rationale": "To answer this question, let's first consider the transformation $x = g(y)$. We can find the probability density function $p_y(y)$ using the change of variables formula:\n\n$p_y(y) = p_x(g(y)) \\cdot \\left|\\frac{dg(y)}{dy}\\right|$\n\nNow, let's find the location of the maximum density for both $p_x(x)$ and $p_y(y)$. To do this, we can take the derivative of each probability density function with respect to their respective variables and set them equal to zero.\n\nFor $p_x(x)$, we have:\n\n$\\frac{dp_x(x)}{dx} = 0$\n\nFor $p_y(y)$, we have:\n\n$\\frac{dp_y(y)}{dy} = \\frac{d}{dy}\\left[p_x(g(y)) \\cdot \\left|\\frac{dg(y)}{dy}\\right|\\right] = 0$\n\nNow, let's consider the case of a linear transformation, where $g(y) = ay + b$ for some constants $a$ and $b$. In this case, the derivative of $g(y)$ with respect to $y$ is simply $a$. Therefore, the equation for $p_y(y)$ becomes:\n\n$p_y(y) = p_x(ay + b) \\cdot |a|$\n\nTaking the derivative of $p_y(y)$ with respect to $y$ and setting it equal to zero, we get:\n\n$\\frac{d}{dy}\\left[p_x(ay + b) \\cdot |a|\\right] = 0$\n\nSince $|a|$ is a constant, we can rewrite this as:\n\n$|a| \\cdot \\frac{d}{dy}\\left[p_x(ay + b)\\right] = 0$\n\nNow, we can see that the location of the maximum density for $p_y(y)$ is determined by the location of the maximum density for $p_x(x)$, as the derivative of $p_x(ay + b)$ with respect to $y$ will be zero at the same point as the derivative of $p_x(x)$ with respect to $x$. Therefore, the location of the maximum density transforms in the same way as the variable itself in the case of a linear transformation.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "panlu/triangle2.json",
    "question": "In triangle RST, X is located on the side RS, Y is located on the side RT, Z is located on the side ST, and XY and XZ are midsegments of \u25b3RST. If the length of side XY is 7, the length of side RT is 13, and the measure of angle YXZ is 124\u00b0, what is the length of side XZ?",
    "prediction": 3.913159928549766,
    "answer": 6.5,
    "rationale": "def solve():\n    import math\n\n    # Given values\n    XY = 7\n    RT = 13\n    angle_YXZ = 124\n\n    # Midsegment theorem states that the midsegment is half the length of the third side\n    # So, XY = 0.5 * RS\n    RS = 2 * XY\n\n    # Law of Cosines to find angle R\n    # RT^2 = RS^2 + ST^2 - 2 * RS * ST * cos(angle_R)\n    # cos(angle_R) = (RS^2 + ST^2 - RT^2) / (2 * RS * ST)\n    # Since XY and XZ are midsegments, ST = 2 * XZ\n    # cos(angle_R) = (RS^2 + (2 * XZ)^2 - RT^2) / (2 * RS * (2 * XZ))\n\n    # We also know that angle_YXZ = 180 - angle_R\n    # cos(180 - angle_R) = -cos(angle_R)\n    # -cos(angle_R) = (RS^2 + (2 * XZ)^2 - RT^2) / (2 * RS * (2 * XZ))\n\n    # Now we can solve for XZ using the given angle_YXZ\n    cos_angle_R = -math.cos(math.radians(angle_YXZ))\n    XZ_squared = (RT**2 - RS**2) / (4 * cos_angle_R - 4)\n    XZ = math.sqrt(XZ_squared)\n\n    return XZ",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_7_2.json",
    "question": "What's the value of a > 0, such that the tangent line to the graph of f(x) = (x^2) (e^(-x)) at x = a passes through the origin?",
    "prediction": 1.0,
    "answer": 1,
    "rationale": "def solve():\n    import sympy as sp\n\n    x = sp.Symbol('x')\n    a = sp.Symbol('a', positive=True)\n    f_x = (x**2) * (sp.exp(-x))\n\n    # Find the derivative of f(x)\n    f_prime_x = sp.diff(f_x, x)\n\n    # Find the tangent line equation at x = a\n    tangent_line = f_prime_x.subs(x, a) * (x - a) + f_x.subs(x, a)\n\n    # Check if the tangent line passes through the origin (0, 0)\n    origin_condition = tangent_line.subs(x, 0)\n\n    # Solve for a\n    a_value = sp.solve(origin_condition, a)\n\n    return a_value[0].evalf()",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "panlu/triangle1.json",
    "question": "In triangle ABC, AB = 9x-1, CB = 5x-0.5, AC = 4x+1, and AC = CB. Find the measure of AB.",
    "prediction": 12.5,
    "answer": 12.5,
    "rationale": "def solve():\n  from sympy import symbols, Eq, solve\n\n  x = symbols('x')\n  AB = 9*x - 1\n  CB = 5*x - 0.5\n  AC = 4*x + 1\n\n  # Given AC = CB\n  equation = Eq(AC, CB)\n  x_value = solve(equation, x)[0]\n\n  # Find the measure of AB\n  ans = AB.subs(x, x_value)\n  return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/fubini_theorem.json",
    "question": "Compute the double integrals over indicated rectangles $\\iint\\limits_{R}{{2x - 4{y^3}\\,dA}}$, $R = [-5,4] \\times [0, 3]",
    "prediction": -756.0,
    "answer": -756,
    "rationale": "def solve():\n    from scipy.integrate import dblquad\n\n    # Define the function to be integrated\n    def integrand(y, x):\n        return 2 * x - 4 * (y ** 3)\n\n    # Define the limits of integration\n    x_lower = -5\n    x_upper = 4\n    y_lower = 0\n    y_upper = 3\n\n    # Compute the double integral\n    ans, _ = dblquad(integrand, x_lower, x_upper, lambda x: y_lower, lambda x: y_upper)\n\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "maxku/cv-imageprocessing8-fourier3.json",
    "question": "In the process of searching circles in an image, object O is detected. The contour of the object O is represented with the Fourier Descriptors (0,113,0,0,1,0,0,1). Given that the Fourier Descriptors of a circle are (0,40,0,0,0,0,0,0). Is the object O a circle-like polygon in the image? Bear in mind that there is some high frequency noise in the image. You should take this into account when you make your judgment.",
    "prediction": true,
    "answer": true,
    "rationale": "Considering the Fourier Descriptors of object O (0,113,0,0,1,0,0,1) and the Fourier Descriptors of a circle (0,40,0,0,0,0,0,0), we can see that the first and third values match, but the second value is different. However, since there is high frequency noise in the image, the small non-zero values in the fourth and eighth positions could be due to this noise.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "tonyxia/photoelectric2.json",
    "question": "Light of wavelength 400 nm is incident upon lithium (phi = 2.93 eV). Calculate the stopping potential in V.",
    "prediction": 0.17205992509363296,
    "answer": 0.17,
    "rationale": "def solve():\n  import math\n\n  # Constants\n  h = 6.626e-34  # Planck's constant (J s)\n  c = 3.0e8      # Speed of light (m/s)\n  e = 1.602e-19  # Elementary charge (C)\n  phi = 2.93 * e # Work function of lithium (J)\n  wavelength = 400e-9 # Wavelength of light (m)\n\n  # Calculate the energy of the incident light\n  E_incident = (h * c) / wavelength\n\n  # Calculate the maximum kinetic energy of the emitted electrons\n  K_max = E_incident - phi\n\n  # Calculate the stopping potential (V)\n  stopping_potential = K_max / e\n\n  return stopping_potential",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/statisticalphysics1.json",
    "question": "Compute the mean translational kinetic energy of a single ideal gas molecule in eV.",
    "prediction": 0.03851947968178815,
    "answer": 0.038,
    "rationale": "def solve():\n  k = 8.617333262145e-5  # Boltzmann constant in eV/K\n  T = 298  # Temperature in Kelvin (room temperature)\n  K = (3/2) * k * T  # Mean translational kinetic energy formula\n  return K",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "maxku/basic-electronics-A1-1.json",
    "question": "Given $V_s = 5V$, $R_1 = 480 \\Omega$, $R_2 = 320 \\Omega$, and $R_3 = 200 \\Omega$, find the power dissipated by the 3 resistors $P_1, P_2, P_3$ in the figure. Represent your answer as a list [$P_1, P_2, P_3$] in the unit of mW.",
    "prediction": [
      12.0,
      8.0,
      5.0
    ],
    "answer": [
      51.2,
      78.15,
      125.0
    ],
    "rationale": "def solve():\n    Vs = 5  # Voltage source in volts\n    R1 = 480  # Resistance R1 in ohms\n    R2 = 320  # Resistance R2 in ohms\n    R3 = 200  # Resistance R3 in ohms\n\n    # Calculate the total resistance in the circuit\n    R_total = R1 + R2 + R3\n\n    # Calculate the current in the circuit\n    I = Vs / R_total\n\n    # Calculate the power dissipated by each resistor\n    P1 = (I**2) * R1 * 1000  # Power in resistor R1 in milliwatts\n    P2 = (I**2) * R2 * 1000  # Power in resistor R2 in milliwatts\n    P3 = (I**2) * R3 * 1000  # Power in resistor R3 in milliwatts\n\n    return [P1, P2, P3]",
    "answer_type": "list of float",
    "correct": false
  },
  {
    "id": "jianyu_xu/pigeonhole_2.json",
    "question": "Arbitrarily place 19 points in a unit square and cover as many of these points as possible with a circle of diameter $\\frac{\\sqrt 2}{3}$. Question: At least how many points can be guaranteed to be covered?",
    "prediction": 16,
    "answer": 3,
    "rationale": "def solve():\n    import math\n\n    # The diameter of the circle\n    diameter = math.sqrt(2) / 3\n\n    # The side length of the square\n    side_length = 1\n\n    # The number of rows and columns in the grid\n    grid_size = 4\n\n    # The side length of each small square in the grid\n    small_square_side = side_length / grid_size\n\n    # The maximum number of points that can be covered in a small square\n    max_points_covered = 0\n\n    # Iterate through all possible positions of the circle's center\n    for i in range(grid_size):\n        for j in range(grid_size):\n            # Calculate the coordinates of the circle's center\n            center_x = (i + 0.5) * small_square_side\n            center_y = (j + 0.5) * small_square_side\n\n            # Calculate the distance from the center to the nearest corner of the small square\n            corner_distance = math.sqrt((small_square_side / 2) ** 2 + (small_square_side / 2) ** 2)\n\n            # Check if the circle covers the entire small square\n            if diameter / 2 >= corner_distance:\n                max_points_covered += 1\n\n    return max_points_covered",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/graphtheory8-shortestpath.json",
    "question": "Let a undirected graph G with edges E = {<0,2>,<2,1>,<2,3>,<3,4>,<4,1>}, which <A,B> represent Node A is connected to Node B. What is the shortest path from node 4 to node 0? Represent the path as a list.",
    "prediction": [
      4,
      1,
      2,
      0
    ],
    "answer": [
      4,
      1,
      2,
      0
    ],
    "rationale": "def solve():\n    from collections import deque\n\n    # Define the graph as an adjacency list\n    graph = {\n        0: [2],\n        1: [2, 4],\n        2: [0, 1, 3],\n        3: [2, 4],\n        4: [1, 3]\n    }\n\n    # Implement BFS to find the shortest path\n    def bfs_shortest_path(graph, start, end):\n        visited = set()\n        queue = deque([[start]])\n\n        while queue:\n            path = queue.popleft()\n            node = path[-1]\n\n            if node == end:\n                return path\n\n            if node not in visited:\n                visited.add(node)\n                for neighbor in graph[node]:\n                    new_path = list(path)\n                    new_path.append(neighbor)\n                    queue.append(new_path)\n\n    ans = bfs_shortest_path(graph, 4, 0)\n    return ans",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "wenhuchen/cauchy_residue2.json",
    "question": "Compute $\\int_{|z| = 1} z^2 sin(1/z) dz$. The answer is Ai with i denoting the imaginary unit, what is A?",
    "prediction": 833261.2588506953,
    "answer": -1.047,
    "rationale": "import numpy as np\ndef g_prime(z):\n    return np.sin(1/z) + z * np.cos(1/z) * (-1/z**2)\ndef solve():\n    z_values = np.linspace(1e-8, 1e-6, 1000)\n    g_prime_values = [g_prime(z) for z in z_values]\n    g_0 = np.mean(g_prime_values)\n    ans = 2 * np.pi * g_0\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xinyi/newtons_laws_2.json",
    "question": "Two bicycle tires are set rolling with the same initial speed of 3.5 m/s on a long, straight road, and the distance each travels before its speed is reduced by half is measured. One tire is inflated to a pressure of 40 psi and goes 18.1 m; the other is at 105 psi and goes 92.9 m. What is the coefficient of rolling friction for each? Assume that the net horizontal force is due to rolling friction only.",
    "prediction": [
      -0.025871390677006775,
      -0.0050406046421294145
    ],
    "answer": [
      0.0259,
      0.00505
    ],
    "rationale": "def solve():\n    # Constants\n    initial_speed = 3.5  # m/s\n    final_speed = initial_speed / 2  # m/s\n\n    # Distances\n    distance_40_psi = 18.1  # m\n    distance_105_psi = 92.9  # m\n\n    # Acceleration formula: vf^2 = vi^2 + 2*a*d\n    # We need to find the acceleration for each tire\n    acceleration_40_psi = (final_speed**2 - initial_speed**2) / (2 * distance_40_psi)\n    acceleration_105_psi = (final_speed**2 - initial_speed**2) / (2 * distance_105_psi)\n\n    # Rolling friction formula: f_friction = f_net = m*a\n    # Coefficient of rolling friction formula: f_friction = friction_coefficient * f_norm (f_norm = m*g)\n    # friction_coefficient = f_friction / f_norm = (m*a) / (m*g) = a / g\n    g = 9.81  # m/s^2, acceleration due to gravity\n\n    friction_coefficient_40_psi = acceleration_40_psi / g\n    friction_coefficient_105_psi = acceleration_105_psi / g\n\n    return [friction_coefficient_40_psi, friction_coefficient_105_psi]",
    "answer_type": "list of float",
    "correct": false
  },
  {
    "id": "wenhuchen/quadrilateral1.json",
    "question": "Find the size of angle x in the figure.",
    "prediction": -3,
    "answer": 24,
    "rationale": "",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/green1.json",
    "question": "Use Green's Theorem to evaluate $\\oint_{C} xy dx + x^2y^3dy$ where $C$ is the triangle with vertices (0,0), (1,0), (1,2) with positive orientation",
    "prediction": -0.06666666666666667,
    "answer": 0.6667,
    "rationale": "def solve():\n    from sympy import symbols, integrate\n\n    x, y = symbols('x y')\n    P = x * y\n    Q = x**2 * y**3\n\n    # Partial derivatives\n    dQdx = Q.diff(x)\n    dPdy = P.diff(y)\n\n    # Green's Theorem\n    integral = integrate(dQdx - dPdy, (y, 0, 2 * (1 - x)), (x, 0, 1))\n\n    return integral",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xinyi/kernel_1.json",
    "question": "A linear learning machine based on the kernel $k(x,x')=f(x)f(x')$ will always find a solution proportional to $f(x)$. True or false?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "xueguangma/earnings_multiplier_2.json",
    "question": "Estimate the PEG ratio for a firm that has the following characteristics:\nLength of high growth = five years\nGrowth rate in first five years = 25%\nPayout ratio in first five years = 20%\nGrowth rate after five years = 8%\nPayout ratio after five years = 50%\nBeta = 1.0 \nRisk-free rate = T-bond rate = 6%\nCost of equity = 6% + 1(5.5%) = 11.5%\nRisk premium = 5.5%\nWhat is the estimated PEG ratio for this firm?",
    "prediction": 0.0037089907013580035,
    "answer": 1.15,
    "rationale": "def solve():\n    # Given values\n    length_of_high_growth = 5\n    growth_rate_first_five_years = 0.25\n    payout_ratio_first_five_years = 0.20\n    growth_rate_after_five_years = 0.08\n    payout_ratio_after_five_years = 0.50\n    beta = 1.0\n    risk_free_rate = 0.06\n    cost_of_equity = 0.115\n    risk_premium = 0.055\n\n    # Calculate the dividend payout ratio\n    dividend_payout_ratio = payout_ratio_first_five_years + (payout_ratio_after_five_years - payout_ratio_first_five_years) * (1 - (1 / (1 + growth_rate_first_five_years)) ** length_of_high_growth)\n\n    # Calculate the expected growth rate\n    expected_growth_rate = growth_rate_first_five_years * dividend_payout_ratio + growth_rate_after_five_years * (1 - dividend_payout_ratio)\n\n    # Calculate the PEG ratio\n    peg_ratio = (cost_of_equity - risk_free_rate) / (expected_growth_rate * 100)\n\n    return peg_ratio",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/Riesz-representation-theorem1.json",
    "question": "Suppose $\\Omega$ is a bounded open area in $\\mathbb{R}^n$. For any $f\\in L^2(\\Omega)$, the Laplace equation (with respect to a real function $u$), $\\Delta u = f$ with boundary condition $u\\mid_{\\partial \\Omega}=0$, has a unique weak solution. This can be proved by: 1. Poincare inequality and Riesz representation theorem; 2. Cauchy-Schwartz inequality and Hahn-Banach theorem. 3. None of the above. Return the answer as a number",
    "prediction": 1,
    "answer": 1.0,
    "rationale": "def solve():\n    ans = 1\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/semiconductor3.json",
    "question": "Assume a temperature of 300 K and find the wavelength of the photon necessary to cause an electron to jump from the valence to the conduction band in silicon in nm.",
    "prediction": 1109.263392857143,
    "answer": 1130.0,
    "rationale": "def solve():\n    # Constants\n    h = 6.626e-34  # Planck's constant (Js)\n    c = 3e8  # Speed of light (m/s)\n    eV_to_J = 1.6e-19  # Conversion factor from eV to Joules\n    Eg_eV = 1.12  # Energy gap for silicon (eV)\n\n    # Convert energy gap to Joules\n    Eg_J = Eg_eV * eV_to_J\n\n    # Calculate the wavelength (m)\n    wavelength_m = h * c / Eg_J\n\n    # Convert the wavelength to nanometers\n    wavelength_nm = wavelength_m * 1e9\n\n    return wavelength_nm",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/rectangle1.json",
    "question": "Square ABCD center O. Right AEB. \u2220ABE = 53. Find the numeric value of \u2220OFC.",
    "prediction": 53,
    "answer": 82.0,
    "rationale": "def solve():\n    import math\n\n    # Given angle ABE\n    angle_ABE = 53\n\n    # Since triangle ABE is a right triangle, angle AEB is 90 degrees\n    angle_AEB = 90\n\n    # Using the property of triangle, the sum of angles is 180 degrees\n    angle_BAE = 180 - angle_ABE - angle_AEB\n\n    # Since square ABCD has all angles equal to 90 degrees\n    angle_BAO = 90\n\n    # Now, we can find angle BAOE\n    angle_BAOE = angle_BAO - angle_BAE\n\n    # Since triangle AOE is isosceles, angle AEO is equal to angle BAOE\n    angle_AEO = angle_BAOE\n\n    # Now, we can find angle AEC\n    angle_AEC = 180 - angle_AEB - angle_AEO\n\n    # Since square ABCD has all angles equal to 90 degrees\n    angle_ECF = 90\n\n    # Now, we can find angle OFC\n    angle_OFC = angle_ECF - angle_AEC\n\n    return angle_OFC",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "panlu/linear_expansion1.json",
    "question": "A surveyor uses a steel measuring tape that is exactly 50.000 m long at a temperature of 20\u00b0C. The markings on the tape are calibrated for this temperature. When it is 35\u00b0C, the surveyor uses the tape to measure a distance. The value that she reads off the tape is 35.794 m. What is the actual distance? (Unit: m)",
    "prediction": 35.799906009999994,
    "answer": 35.8,
    "rationale": "def solve():\n  # Constants\n  initial_temperature = 20\n  final_temperature = 35\n  initial_length = 50\n  measured_length = 35.794\n  steel_coefficient_of_linear_expansion = 11e-6\n\n  # Calculate the change in temperature\n  delta_temperature = final_temperature - initial_temperature\n\n  # Calculate the change in length of the tape due to temperature change\n  delta_length = initial_length * steel_coefficient_of_linear_expansion * delta_temperature\n\n  # Calculate the actual length of the tape at 35\u00b0C\n  actual_length_at_35 = initial_length + delta_length\n\n  # Calculate the actual distance measured\n  actual_distance = (measured_length / initial_length) * actual_length_at_35\n\n  return actual_distance",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/euclidean_algorithm.json",
    "question": "For (10236, 244), use the Euclidean algorithm to find their gcd.",
    "prediction": 4,
    "answer": 4,
    "rationale": "def solve():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    ans = gcd(10236, 244)\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "panlu/density1.json",
    "question": "Find the mass and weight of the air at $20^{\\circ} C$ in a living room with a $4.0 m \\times 5.0 m$ floor and a ceiling 3.0 m high, and the mass and weight of an equal volume of water. (Unit: 10 ^ 5 N)",
    "prediction": "{'air_mass': 72.246, 'air_weight_10_5': 0.007087332599999999, 'water_mass': 60000.0, 'water_weight_10_5': 5.886}",
    "answer": 5.9,
    "rationale": "def solve():\n    # Constants\n    volume = 4.0 * 5.0 * 3.0  # m^3\n    air_density = 1.2041  # kg/m^3 at 20\u00b0C\n    water_density = 1000  # kg/m^3\n    gravity = 9.81  # m/s^2\n\n    # Mass and weight of air\n    air_mass = volume * air_density  # kg\n    air_weight = air_mass * gravity  # N\n\n    # Mass and weight of water\n    water_mass = volume * water_density  # kg\n    water_weight = water_mass * gravity  # N\n\n    # Convert to 10^5 N\n    air_weight_10_5 = air_weight / (10 ** 5)\n    water_weight_10_5 = water_weight / (10 ** 5)\n\n    ans = {\n        \"air_mass\": air_mass,\n        \"air_weight_10_5\": air_weight_10_5,\n        \"water_mass\": water_mass,\n        \"water_weight_10_5\": water_weight_10_5,\n    }\n\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xinyi/binary_symmetric_channel_2.json",
    "question": "Suppose that feedback is used on a binary symmetric channel with parameter $p=0.5$. Each time a $Y$ is received, it becomes the next transmission. Thus $X_1$ is Bern(1/2), $X_2=Y_1$, $X_3=Y_2$, \\ldots, X_n=Y_{n-1}. Find $\\lim_{n\\to\\infty} \\frac{1}{n} I(X_n;Y_n)$ in bits.",
    "prediction": 0.0,
    "answer": 1.0,
    "rationale": "def solve():\n    import numpy as np\n\n    def mutual_information(p, n):\n        h_x = -p * np.log2(p) - (1 - p) * np.log2(1 - p)\n        h_y_given_x = -p * np.log2(p) - (1 - p) * np.log2(1 - p)\n        h_y = h_x\n        i_x_y = h_y - h_y_given_x\n        return i_x_y\n\n    p = 0.5\n    n = 100000\n    ans = mutual_information(p, n) / n\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/cv-cnn4.json",
    "question": "Consider Convolutional Neural Network D2 which takes input images of size 32x32 with 1 colour channels. The first layer of D2 uses 4 filters of size 5x5, a stride of 2, and zero-padding of width 1. The dimensions of the resulting activation map for each filter in this first layer will be k x k. What is the value of k?",
    "prediction": 15,
    "answer": 15,
    "rationale": "def solve():\n  # import necessary library\n  import math\n\n  # given parameters\n  input_size = 32\n  filter_size = 5\n  stride = 2\n  padding = 1\n\n  # calculate the output size (k) using the formula:\n  # k = (input_size - filter_size + 2 * padding) / stride + 1\n  k = (input_size - filter_size + 2 * padding) / stride + 1\n\n  # return the output size as an integer\n  return int(k)",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "xinyi/dag_2.json",
    "question": "A distribution represented by a directed tree can be written as an equivalent distribution over the corresponding undirected tree. True or false?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "xueguangma/vasicek_model.json",
    "question": "Let $P(r,t,T)$ denote the price at time $t$ of $1 to be paid with certainty at time $T, t\\leT$, if the short rate at time $t$ is equal to $r$. For a Vasicek model you are given: $P(0.04, 0, 2)=0.9445$, $P(0.05, 1, 3)=0.9321$, $P(r^*, 2, 4)=0.8960$. What is $r^*$?",
    "prediction": -0.03640178916298933,
    "answer": 0.08,
    "rationale": "def solve():\n    from scipy.optimize import fsolve\n\n    # Vasicek model function\n    def vasicek_pricing(r, t, T, a, b, sigma):\n        B = (1 - np.exp(-a * (T - t))) / a\n        A = np.exp((B - (T - t)) * (a * b - sigma**2 / 2) / a**2 - sigma**2 * B**2 / (4 * a))\n        return A * np.exp(-B * r)\n\n    # Objective function to find r*\n    def objective(r_star, a, b, sigma):\n        return vasicek_pricing(0.04, 0, 2, a, b, sigma) - 0.9445, \\\n               vasicek_pricing(0.05, 1, 3, a, b, sigma) - 0.9321, \\\n               vasicek_pricing(r_star, 2, 4, a, b, sigma) - 0.8960\n\n    # Initial guess for a, b, sigma\n    initial_guess = (0.1, 0.1, 0.1)\n\n    # Find the optimal a, b, sigma\n    a_opt, b_opt, sigma_opt = fsolve(lambda x: objective(0.04, *x), initial_guess)\n\n    # Find r* using the optimal a, b, sigma\n    r_star = fsolve(lambda r: objective(r, a_opt, b_opt, sigma_opt)[2], 0.04)\n\n    return r_star[0]",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "jianyu_xu/Burnside_1.json",
    "question": "How many ways are there to color the vertices of a cube with two colors, up to rotation?",
    "prediction": 11.75,
    "answer": 23,
    "rationale": "def solve():\n    # There are 8 vertices in a cube\n    # We can color each vertex with one of the two colors\n    # So, there are 2^8 = 256 ways to color the vertices without considering rotation\n\n    # Now, let's consider the rotations\n    # There are 24 possible rotations of a cube\n    # We will use Burnside's Lemma to count the number of colorings up to rotation\n    # Burnside's Lemma states that the number of colorings up to rotation is the average number of colorings fixed by each rotation\n\n    # Let's count the number of colorings fixed by each rotation\n    fixed_colorings = 0\n\n    # Identity rotation (no rotation): all 256 colorings are fixed\n    fixed_colorings += 256\n\n    # 90-degree rotations around an axis: 2 colors for each of the 3 axes\n    fixed_colorings += 3 * 2\n\n    # 180-degree rotations around an axis: 2^2 colorings for each of the 3 axes\n    fixed_colorings += 3 * 2**2\n\n    # 120-degree and 240-degree rotations around a diagonal: 2 colorings for each of the 4 diagonals\n    fixed_colorings += 4 * 2\n\n    # Now, let's compute the average number of colorings fixed by each rotation\n    ans = fixed_colorings / 24\n\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "xinyi/gaussian_mutual_information.json",
    "question": "Suppose that $(X, Y, Z)$ are jointly Gaussian and that $X \\rightarrow Y \\rightarrow Z$ forms a Markov chain. Let $X$ and $Y$ have correlation coefficient 0.1 and let $Y$ and $Z$ have correlation coefficient 0.9. Find $I(X;Z)$ in bits.",
    "prediction": 0.00586670728691338,
    "answer": 0.00587,
    "rationale": "def solve():\n    import numpy as np\n\n    # Given correlation coefficients\n    rho_XY = 0.1\n    rho_YZ = 0.9\n\n    # Compute the correlation coefficient between X and Z using the given Markov chain property\n    rho_XZ = rho_XY * rho_YZ\n\n    # Compute the mutual information I(X;Z) using the formula I(X;Z) = -0.5 * log2(1 - rho_XZ^2)\n    I_XZ = -0.5 * np.log2(1 - rho_XZ**2)\n\n    return I_XZ",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/score1.json",
    "question": "True or false: there exists a graph with score (1, 1, 1, 2, 2, 3, 4, 5, 5).",
    "prediction": true,
    "answer": true,
    "rationale": "A graph's score, also known as its degree sequence, is a list of the degrees of its vertices in non-increasing order. The Havel-Hakimi theorem provides a method to determine if a given degree sequence is graphical, meaning that there exists a graph with that degree sequence.\n\nThe Havel-Hakimi theorem states that a degree sequence (d1, d2, ..., dn) is graphical if and only if the degree sequence obtained by deleting the first vertex and subtracting 1 from the next d1 vertices is graphical.\n\nLet's apply the Havel-Hakimi theorem to the given degree sequence (1, 1, 1, 2, 2, 3, 4, 5, 5):\n\n1. Remove the first vertex (1) and subtract 1 from the next 1 vertex: (0, 1, 2, 2, 3, 4, 5, 5)\n2. Sort the sequence in non-increasing order: (5, 5, 4, 3, 2, 2, 1, 0)\n3. Remove the first vertex (5) and subtract 1 from the next 5 vertices: (4, 3, 2, 1, 1, 0, 0)\n4. Sort the sequence in non-increasing order: (4, 3, 2, 1, 1, 0, 0)\n5. Remove the first vertex (4) and subtract 1 from the next 4 vertices: (2, 1, 0, 0, 0, 0)\n6. Sort the sequence in non-increasing order: (2, 1, 0, 0, 0, 0)\n7. Remove the first vertex (2) and subtract 1 from the next 2 vertices: (0, 0, 0, 0, 0)\n8. Sort the sequence in non-increasing order: (0, 0, 0, 0, 0)\n\nWe have reached the all-zero sequence, which means the original degree sequence is graphical.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "panlu/similarity1.json",
    "question": "If polygon ACDF is similar to polygon VWYZ, AF = 12, CD = 9, YZ = 10, YW = 6, and ZV = 3y-1, find the length of FD.",
    "prediction": 1.8,
    "answer": 15,
    "rationale": "def solve():\n    # Given lengths\n    AF = 12\n    CD = 9\n    YZ = 10\n    YW = 6\n    ZV = lambda y: 3*y - 1\n\n    # Since the polygons are similar, their corresponding sides are proportional\n    # AF/YW = CD/YZ = FD/ZV\n    # We can find the ratio of the sides\n    ratio = AF / YW\n\n    # Now we can find the length of FD using the ratio\n    FD = CD / (YZ / ratio)\n\n    return FD",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_2_11.json",
    "question": "Does cos(x) = x^k have a solution for k = 2023?",
    "prediction": true,
    "answer": true,
    "rationale": "For k = 2023, we are looking for a solution to the equation cos(x) = x^2023. Since the cosine function oscillates between -1 and 1, and x^2023 is an odd power function, it will have both positive and negative values that can become arbitrarily large as x moves away from 0. Therefore, there must be at least one point where the two functions intersect.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "xueguangma/capital_asset_pricing_model.json",
    "question": "Suppose a stock has the following information. It is listed on the London stock exchange and operates throughout Europe. The yield on a UK 10 year treasury is 2.8%. The stock in question will earn 8.6% as per historical data. The Beta for the stock is 1.4, i.e., it is 140% volatile to the changes in the general stock market. What is the expected rate of return?",
    "prediction": 10.919999999999998,
    "answer": 10.92,
    "rationale": "def solve():\n  risk_free_rate = 2.8\n  expected_market_return = 8.6\n  beta = 1.4\n\n  expected_return = risk_free_rate + beta * (expected_market_return - risk_free_rate)\n  return expected_return",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/Adams-Bashforth2.json",
    "question": "We know that $y'=(x+y) / 2$, we also know that $y(x=0) = 2, y(x=0.5) = 2.636, y(x=1) = 3.595, y(x=1.5) = 4.9868$, what is the value of y(2) using Adams bashforth predictor method.",
    "prediction": 6.844975,
    "answer": 6.8731,
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the given function\n    def f(x, y):\n        return (x + y) / 2\n\n    # Define the Adams-Bashforth predictor method\n    def adams_bashforth_predictor(x, y, h, n):\n        # Initialize the predictor array\n        predictor = np.zeros(n)\n\n        # Calculate the predictor values\n        for i in range(n - 1):\n            predictor[i + 1] = y[i] + h * (3 * f(x[i], y[i]) - f(x[i - 1], y[i - 1])) / 2\n\n        return predictor\n\n    # Define the initial conditions\n    x0 = 0\n    y0 = 2\n    h = 0.5\n    n = 5\n\n    # Create the x and y arrays\n    x = np.linspace(x0, x0 + (n - 1) * h, n)\n    y = np.zeros(n)\n    y[0] = y0\n\n    # Fill the y array with the given values\n    y[1] = 2.636\n    y[2] = 3.595\n    y[3] = 4.9868\n\n    # Calculate the predictor values\n    predictor = adams_bashforth_predictor(x, y, h, n)\n\n    # Return the value of y(2)\n    return predictor[-1]",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/econ_micro_16_2.json",
    "question": "Carl the clothier owns a large garment factory on an isolated island. Carl's factory is the only source of employment for most of the islanders, and thus Carl acts as a monopsonist. The supply curve for garment workers is given by l = 80w, where l is the number of workers hired and w is their hourly wage. Assume also that Carl's labor demand (marginal revenue product) curve is given by l = 400 - 40MRP_l. How many workers will Carl hire to maximize his profits?",
    "prediction": 80,
    "answer": 200,
    "rationale": "def solve():\n    from sympy import symbols, Eq, solve\n\n    w = symbols('w')\n    l_supply = 80 * w\n    MRP_l = symbols('MRP_l')\n    l_demand = 400 - 40 * MRP_l\n\n    # Equating supply and demand\n    eq = Eq(l_supply, l_demand)\n    MRP_l_solution = solve(eq, MRP_l)[0]\n\n    # Substituting the MRP_l_solution back into the demand equation to find the number of workers\n    l_optimal = l_demand.subs(MRP_l, MRP_l_solution)\n\n    return l_optimal",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "tonyxia/nuclear3.json",
    "question": "In a certain nuclear reaction initiated by 5.5-MeV alpha particles, the outgoing particles are measured to have kinetic energies of 1.1 MeV and 8.4 MeV. What is the Q value of the reaction in MeV?",
    "prediction": 4.0,
    "answer": 4.0,
    "rationale": "def solve():\n  # Initial kinetic energy of alpha particles\n  initial_energy = 5.5\n\n  # Kinetic energies of outgoing particles\n  outgoing_energy1 = 1.1\n  outgoing_energy2 = 8.4\n\n  # Calculate the Q value of the reaction\n  Q_value = (outgoing_energy1 + outgoing_energy2) - initial_energy\n\n  return Q_value",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "maxku/signalprocessing5-nyquist.json",
    "question": "The bandwidth of an analog signal is 4kHz. An A/D converter is used to convert the signal from analog to digital. What is the minimum sampling rate for eliminating the aliasing problem? (in kHz)",
    "prediction": 8,
    "answer": 8,
    "rationale": "def solve():\n  bandwidth = 4  # Bandwidth of the analog signal in kHz\n  nyquist_rate = 2 * bandwidth  # Nyquist rate for eliminating aliasing problem\n  return nyquist_rate",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/optics5.json",
    "question": "A scuba diver is wearing a head lamp and looking up at the surface of the water. If the minimum angle to the vertical resulting in total internal reflection is 25\u2218, what is the index of refraction of the water? $\\theta_{air} = 1.00$.",
    "prediction": 2.3662015831524985,
    "answer": 2.37,
    "rationale": "def solve():\n  import math\n\n  # Given angle in degrees\n  angle_degrees = 25\n\n  # Convert angle to radians\n  angle_radians = math.radians(angle_degrees)\n\n  # Calculate the index of refraction using Snell's Law\n  n_air = 1.00\n  n_water = n_air / math.sin(angle_radians)\n\n  return n_water",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/maxplanar2.json",
    "question": "What's the maximum number of edges in a simple triangle free planar graph with 30 vertices?",
    "prediction": 84,
    "answer": 56,
    "rationale": "def solve():\n    n = 30\n    ans = 3 * n - 6\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/p_value1.json",
    "question": "You have a coin and you would like to check whether it is fair or biased. More specifically, let $\\theta$ be the probability of heads, $\\theta = P(H)$. Suppose that you need to choose between the following hypotheses: H_0 (null hypothesis): The coin is fair, i.e. $\\theta = \\theta_0 = 1 / 2$. H_1 (the alternative hypothesis): The coin is not fair, i.e. $\\theta > 1 / 2$. We toss 100 times and observe 60 heads. Can we reject H_0 at significance level $\\alpha = 0.05$?",
    "prediction": true,
    "answer": true,
    "rationale": "To determine whether we can reject the null hypothesis H_0 at a significance level of \u03b1 = 0.05, we need to calculate the p-value. The p-value is the probability of observing 60 or more heads in 100 tosses, assuming the coin is fair (\u03b8 = 1/2).\n\nWe can use the binomial distribution to calculate the p-value. The probability mass function (PMF) of the binomial distribution is given by:\n\nP(X = k) = C(n, k) * p^k * (1-p)^(n-k)\n\nwhere n is the number of trials, k is the number of successes, p is the probability of success, and C(n, k) is the number of combinations of n items taken k at a time.\n\nIn this case, n = 100, p = 1/2, and we want to find the probability of observing 60 or more heads (k \u2265 60). The p-value is the sum of the probabilities for k = 60, 61, ..., 100:\n\np-value = \u03a3 P(X = k) for k = 60 to 100\n\nCalculating the p-value, we get:\n\np-value \u2248 0.0284\n\nSince the p-value (0.0284) is less than the significance level \u03b1 (0.05), we can reject the null hypothesis H_0.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "elainewan/math_calculus_7_5.json",
    "question": "What is the value of the inflection point of f(x) =(10 ln(x))/(x^2)?",
    "prediction": 2.300975890892825,
    "answer": 2.301,
    "rationale": "def solve():\n    import sympy as sp\n\n    x = sp.Symbol('x')\n    f_x = (10 * sp.log(x)) / (x**2)\n\n    # Calculate the second derivative\n    f_x_prime = f_x.diff(x)\n    f_x_double_prime = f_x_prime.diff(x)\n\n    # Find the critical points\n    critical_points = sp.solve(f_x_double_prime, x)\n\n    # Filter out the inflection points\n    inflection_points = []\n    for point in critical_points:\n        if point > 0:\n            inflection_points.append(point)\n\n    return inflection_points",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/Regula-Falsi.json",
    "question": "Given the following equation: x - e^{-x} = 0. determine the initial approximations for finding the smallest positive root. Use these to find the root correct to three decimal places with Regula-Falsi method.",
    "prediction": 0.567,
    "answer": 0.567,
    "rationale": "def solve():\n    import math\n\n    # Define the function and its derivative\n    def f(x):\n        return x - math.exp(-x)\n\n    def df(x):\n        return 1 + math.exp(-x)\n\n    # Find the initial approximations\n    a = 0\n    b = 1\n    while f(a) * f(b) > 0:\n        a += 1\n        b += 1\n\n    # Implement the Regula-Falsi method\n    def regula_falsi(a, b, tol=1e-3, max_iter=1000):\n        c = a\n        for i in range(max_iter):\n            c = b - f(b) * (b - a) / (f(b) - f(a))\n            if abs(c - b) < tol:\n                break\n            a, b = b, c\n        return c\n\n    # Find the root\n    root = regula_falsi(a, b)\n\n    return round(root, 3)",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/cauchy_riemann3.json",
    "question": "Suppose f is an analytic function defined on $\\{z \\in C : IM(z) > 0\\}$, the upper half plane. Given the information that f(f(z)) = z and f'(z) = 1/z^2 for every z. Find the most general possible expression of f(z). What is f(2)?",
    "prediction": 0,
    "answer": -0.5,
    "rationale": "def solve():\n    import sympy as sp\n\n    z = sp.Symbol('z')\n    f = sp.Function('f')(z)\n\n    # f(f(z)) = z\n    f_fz = f.subs(z, f)\n    eq1 = sp.Eq(f_fz, z)\n\n    # f'(z) = 1/z^2\n    f_prime = f.diff(z)\n    eq2 = sp.Eq(f_prime, 1/z**2)\n\n    # Solve the system of equations\n    solutions = sp.solve((eq1, eq2), f)\n\n    # Evaluate f(2)\n    f_2 = [sol.subs(z, 2) for sol in solutions]\n\n    return f_2",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_2_7.json",
    "question": "\\lim_{x \\to c} |f(x)| = 0. What is \\lim_{x \\to c} f(x)?",
    "prediction": 0,
    "answer": 0,
    "rationale": "def solve():\n    # In this case, the limit of the absolute value of f(x) as x approaches c is 0.\n    # This means that f(x) must be approaching 0 as well, since the absolute value of a function can only be 0 if the function itself is 0.\n    ans = 0\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "jianyu_xu/Chinese_Remainder_Theorem_2.json",
    "question": "Find the smallest positive integer that leaves a remainder of 2 when divided by 3, a remainder of 3 when divided by 5, and a remainder of 1 when divided by 7.",
    "prediction": 0,
    "answer": 8,
    "rationale": "def solve():\n    num = 1\n    while True:\n        if num % 3 == 2 and num % 5 == 3 and num % 7 == 1:\n            return num",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "tonyxia/relativity2.json",
    "question": "Electrons used to produce medical x rays are accelerated from rest through a potential difference of 25,000 volts before striking a metal target. Calculate the speed of the electrons in m/s.",
    "prediction": 93773668.65566818,
    "answer": 90000000.0,
    "rationale": "def solve():\n  # import library\n  import math\n\n  # Constants\n  e = 1.602e-19  # Charge of an electron in Coulombs\n  m = 9.109e-31  # Mass of an electron in kg\n  V = 25000  # Potential difference in volts\n\n  # Calculate the speed of the electrons\n  KE = e * V  # Kinetic energy of the electrons\n  v = math.sqrt(2 * KE / m)  # Speed of the electrons\n\n  return v",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xueguangma/wheel_strategy.json",
    "question": "Consider a strategy of the form $(\\gamma, 0, 0)$ for the investment wheel. Show that the overall factor multiplying your money after $n$ steps is likely to be $(1+2\\gamma)^{n/2}(1-\\gamma)^{n/2}$. Find the value of $\\gamma$ that maximizes this factor.",
    "prediction": 0.2500004960815947,
    "answer": 0.25,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.optimize import minimize_scalar\n\n    # Define the function to maximize\n    def overall_factor(gamma, n):\n        return (1 + 2 * gamma)**(n / 2) * (1 - gamma)**(n / 2)\n\n    # Define the function to minimize (negative of the function to maximize)\n    def neg_overall_factor(gamma, n):\n        return -overall_factor(gamma, n)\n\n    # Set an arbitrary value for n\n    n = 100\n\n    # Find the value of gamma that maximizes the overall factor\n    result = minimize_scalar(neg_overall_factor, args=(n), bounds=(0, 1), method='bounded')\n    optimal_gamma = result.x\n\n    return optimal_gamma",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/math_algebra_4_3.json",
    "question": "Is the transformation T(M) = [[1, 2], [3, 4]]M from R^{2*2} to R^{2*2} an isomorphism?",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if the transformation T(M) = [[1, 2], [3, 4]]M is an isomorphism, we need to check if it is both injective (one-to-one) and surjective (onto).\n\nFirst, let's find the determinant of the matrix [[1, 2], [3, 4]]:\n\ndet([[1, 2], [3, 4]]) = (1 * 4) - (2 * 3) = 4 - 6 = -2\n\nSince the determinant is non-zero, the matrix is invertible. This means that the transformation T(M) is both injective and surjective, and therefore, it is an isomorphism.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "maxku/fourier7-FT.json",
    "question": "If $X(k)$ is the N-point DFT of a sequence $x(n)$, then circular time shift property is that N-point DFT of $x((n-I))_N$ is $X(k) e^{-j 2 \\pi k \\mid / N}$. Is it true?",
    "prediction": true,
    "answer": true,
    "rationale": "Yes, the statement is true. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "panlu/molar_heat_capacity2.json",
    "question": "A glass contains 0.25 kg of Omni-Cola (mostly water) initially at 25\u00b0C. How much ice, initially at -20\u00b0C must you add to obtain a final temperature of 0\u00b0C with all the ice melted? Neglect the heat capacity of the glass. (Unit: g)",
    "prediction": -69.69975490196079,
    "answer": 70,
    "rationale": "def solve():\n  # Constants\n  specific_heat_water = 4.186  # J/g\u00b0C\n  specific_heat_ice = 2.093  # J/g\u00b0C\n  heat_of_fusion = 333.5  # J/g\n\n  # Initial conditions\n  mass_water = 250  # g\n  initial_temp_water = 25  # \u00b0C\n  initial_temp_ice = -20  # \u00b0C\n  final_temp = 0  # \u00b0C\n\n  # Heat gained by ice to reach 0\u00b0C\n  heat_gain_ice_to_0 = -initial_temp_ice * specific_heat_ice\n\n  # Heat gained by ice to melt\n  heat_gain_ice_melt = heat_of_fusion\n\n  # Heat gained by water to reach 0\u00b0C\n  heat_gain_water_to_0 = (final_temp - initial_temp_water) * specific_heat_water\n\n  # Heat gained by melted ice to reach 0\u00b0C\n  heat_gain_melted_ice_to_0 = final_temp * specific_heat_water\n\n  # Total heat gained by ice\n  total_heat_gain_ice = heat_gain_ice_to_0 + heat_gain_ice_melt + heat_gain_melted_ice_to_0\n\n  # Mass of ice needed\n  mass_ice = (mass_water * heat_gain_water_to_0) / total_heat_gain_ice\n\n  return mass_ice",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/ipnetwork4-mac.json",
    "question": "There are only three active stations in a slotted Aloha network: A, B and C. Each station generates a frame in a time slot with the corresponding probabilities p_A=0.2, p_B=0.3 and p_C=0.4 respectively. What is the normalized throughput of the system?",
    "prediction": 0.452,
    "answer": 0.452,
    "rationale": "def solve():\n  p_A = 0.2\n  p_B = 0.3\n  p_C = 0.4\n\n  # Probability of successful transmission in a time slot\n  p_success = p_A * (1 - p_B) * (1 - p_C) + p_B * (1 - p_A) * (1 - p_C) + p_C * (1 - p_A) * (1 - p_B)\n\n  # Normalized throughput\n  ans = p_success\n  return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xinyi/huffman_code_1.json",
    "question": "Which of these codes cannot be Huffman codes for any probability assignment? (a) {0, 10, 11}. (b) {00, 01, 10, 110}. (c) {0, 1}.",
    "prediction": "(b)",
    "answer": "(b)",
    "rationale": "To determine if a code is a Huffman code, it must satisfy the prefix property, which means no codeword is a prefix of another codeword.\n\n(a) {0, 10, 11}: This code satisfies the prefix property.\n(b) {00, 01, 10, 110}: This code does not satisfy the prefix property, as 110 has 1 as a prefix, which is a prefix of 10.\n(c) {0, 1}: This code satisfies the prefix property.\n\nTherefore, the answer is (b).",
    "answer_type": "option",
    "correct": true
  },
  {
    "id": "jianyu_xu/Ramsey_6.json",
    "question": "Coloring the edges of a complete graph with n vertices in 2 colors (red and blue), what is the smallest n that guarantees there is either a triangle in red or a 6-clique in blue?",
    "prediction": 0,
    "answer": 18,
    "rationale": "def solve():\n    def binomial_coefficient(n, k):\n        if k == 0 or k == n:\n            return 1\n        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)\n\n    def ramsey_number(r, s):\n        if r == 1 or s == 1:\n            return 1\n        return binomial_coefficient(ramsey_number(r - 1, s) + ramsey_number(r, s - 1) - 1, 2)\n\n    n = 1\n    while True:\n        if ramsey_number(3, n) >= 6:\n            return n",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "elainewan/math_algebra_7_4.json",
    "question": "What are the real eigenvalues of the matrix [[3, -2, 5], [1, 0, 7], [0, 0, 2]]?",
    "prediction": [
      2.0,
      1.0,
      2.0
    ],
    "answer": [
      1,
      2,
      2
    ],
    "rationale": "def solve():\n    import numpy as np\n\n    matrix = np.array([[3, -2, 5], [1, 0, 7], [0, 0, 2]])\n    eigenvalues, _ = np.linalg.eig(matrix)\n    real_eigenvalues = [value for value in eigenvalues if np.isreal(value)]\n\n    return [float(value.real) for value in real_eigenvalues]",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "maxku/signalprocessing10-nyquist.json",
    "question": "Consider $x(t)$ to be given as, $$ x(t)=10 \\cos (20 \\pi-\\pi / 4)-5 \\cos (50 \\pi t) $$ What is minimum sampling rate (/Hz) such that $y(t)=x(t)$ ?",
    "prediction": 50.0,
    "answer": 50,
    "rationale": "def solve():\n    import numpy as np\n\n    # Given functions\n    def x1(t):\n        return 10 * np.cos(20 * np.pi * t - np.pi / 4)\n\n    def x2(t):\n        return -5 * np.cos(50 * np.pi * t)\n\n    # Combine the functions\n    def x(t):\n        return x1(t) + x2(t)\n\n    # Find the maximum frequency in the given function\n    max_freq = max(20 * np.pi, 50 * np.pi) / (2 * np.pi)\n\n    # According to the Nyquist-Shannon sampling theorem, the minimum sampling rate is twice the maximum frequency\n    min_sampling_rate = 2 * max_freq\n\n    return min_sampling_rate",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "jianyu_xu/Chinese_Remainder_Theorem_1.json",
    "question": "Find the smallest positive integer that leaves a remainder of 3 when divided by 5, a remainder of 4 when divided by 7, and a remainder of 2 when divided by 9.",
    "prediction": 0,
    "answer": 263,
    "rationale": "def solve():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 7 == 4 and num % 9 == 2:\n            return num",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "xueguangma/tonelli_theorem.json",
    "question": "For the function $f(x,y)$ defined by $f(x,y)=1$ if $x=y$, $f(x,y)=0$ otherwise. Can we measure its integraion over the rectangle $[0,1]\\times[0,1]$ using the Tonelli's Theorem? Answer true or false.",
    "prediction": true,
    "answer": false,
    "rationale": "Yes, we can measure the integration of the function $f(x,y)$ over the rectangle $[0,1]\\times[0,1]$ using Tonelli's Theorem. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "mingyin/borel-cantelli-lemma1.json",
    "question": "Suppose ${X_n:n\\geq 1}$ be independent and exponentially distributed with parameter 1. what is the probability $P(\\limsup _{n \\rightarrow infty} X_n/\\log(n)=1)? Return a numeric value.",
    "prediction": 0.0,
    "answer": 1.0,
    "rationale": "def solve():\n    import numpy as np\n\n    def simulate_exponential(limit, trials):\n        results = []\n        for _ in range(trials):\n            X_n = np.random.exponential(size=limit)\n            log_n = np.log(np.arange(1, limit + 1))\n            ratio = X_n / log_n\n            results.append(np.isclose(np.max(ratio), 1, atol=0.1))\n        return np.mean(results)\n\n    limit = 1000\n    trials = 1000\n    probability = simulate_exponential(limit, trials)\n    return probability",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/kinetics3.json",
    "question": "A radioactive sample contains two different isotopes, A and B. A has a half-life of 3 days, and B has a half-life of 6 days. Initially in the sample there are twice as many atoms of A as of B. In how many days will the ratio of the number of atoms of A to B be reversed?",
    "prediction": 6,
    "answer": 12.0,
    "rationale": "def solve():\n    import math\n\n    # Let x be the number of days\n    # A_initial = 2 * B_initial\n    # A_final = A_initial * (1/2)^(x/3)\n    # B_final = B_initial * (1/2)^(x/6)\n    # A_final / B_final = 1/2\n    # (A_initial * (1/2)^(x/3)) / (B_initial * (1/2)^(x/6)) = 1/2\n    # (2 * B_initial * (1/2)^(x/3)) / (B_initial * (1/2)^(x/6)) = 1/2\n    # 2 * (1/2)^(x/3) / (1/2)^(x/6) = 1/2\n    # (1/2)^(x/3 - x/6) = 1/2\n    # x/3 - x/6 = 1\n    # x/6 = 1\n    x = 6\n\n    return x",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/Lebesgue-measure3.json",
    "question": "Let I=[0,1]\\times[0,1]. Suppose $E={(x, y) \\in I: sin(x)<\\frac{1}{2}, cos(x+y) is irrational}$, what is the Lebesgue measure of E?",
    "prediction": 0.5239989999942305,
    "answer": 0.5235987667,
    "rationale": "def solve():\n    import math\n\n    # Define the intervals\n    x_interval = [0, 1]\n    y_interval = [0, 1]\n\n    # Define the conditions\n    def condition1(x):\n        return math.sin(x) < 0.5\n\n    def condition2(x, y):\n        return not (math.cos(x + y).is_integer())\n\n    # Calculate the Lebesgue measure of E\n    measure = 0\n    dx = 0.001\n    dy = 0.001\n\n    for x in range(int(x_interval[0] / dx), int(x_interval[1] / dx)):\n        x_val = x * dx\n        if condition1(x_val):\n            for y in range(int(y_interval[0] / dy), int(y_interval[1] / dy)):\n                y_val = y * dy\n                if condition2(x_val, y_val):\n                    measure += dx * dy\n\n    return measure",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/econ_micro_14.json",
    "question": "A monopolist can produce at constant average and marginal costs of AC = MC = 5. The firm faces a market demand curve given by Q = 53 - P. Calculate the consumer surplus obtained by consumers under perfect competition (where price = marginal cost)?",
    "prediction": 1152.0,
    "answer": 1152,
    "rationale": "def solve():\n    # Given values\n    AC = MC = 5\n    Q_demand = lambda P: 53 - P\n\n    # Under perfect competition, price = marginal cost\n    P_competition = MC\n\n    # Calculate the quantity demanded under perfect competition\n    Q_competition = Q_demand(P_competition)\n\n    # Calculate the consumer surplus\n    consumer_surplus = 0.5 * (Q_competition * (53 - P_competition))\n\n    return consumer_surplus",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "panlu/similarity3.json",
    "question": "If polygon ABCDE ~ polygon PQRST, AB = BC = 8, AE = CD = 4, ED = 6, QR = QP, and RS = PT = 3, find the perimeter of polygon ABCDE.",
    "prediction": 30,
    "answer": 30,
    "rationale": "def solve():\n    # Given data\n    AB = BC = 8\n    AE = CD = 4\n    ED = 6\n    QR = QP = RS = PT = 3\n\n    # Since the polygons are similar, their corresponding sides are proportional\n    # AB/PQ = BC/QR = CD/RS = AE/PT = ED/ST\n    # We can use any pair of corresponding sides to find the scale factor\n    scale_factor = AB / QR\n\n    # Now we can find the lengths of the remaining sides of polygon PQRST\n    PQ = ST = 8 / scale_factor\n    RS = PT = 3\n\n    # Calculate the perimeter of polygon ABCDE\n    perimeter_ABCDE = AB + BC + CD + AE + ED\n\n    return perimeter_ABCDE",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/trapezoidal_rule3.json",
    "question": "Approximate the area under the curve y=2^{x} between x=-1 and x=3 using the Trapezoidal rule with n=4 subintervals.",
    "prediction": 11.25,
    "answer": 11.25,
    "rationale": "def solve():\n    import numpy as np\n\n    def f(x):\n        return 2**x\n\n    a = -1\n    b = 3\n    n = 4\n    h = (b - a) / n\n\n    x = np.linspace(a, b, n + 1)\n    y = f(x)\n\n    ans = h * (0.5 * y[0] + 0.5 * y[-1] + np.sum(y[1:-1]))\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/Fundamental-Theorem-of-Calculus2.json",
    "question": "what is the limit of (2n)!!/(2n+1)!! as n goes to infinity?",
    "prediction": 0,
    "answer": 0.0,
    "rationale": "def solve():\n    # As n goes to infinity, the limit of (2n)!!/(2n+1)!! can be found by analyzing the ratio of consecutive terms.\n    # We can rewrite the expression as (2n)!/(2n+1)! = (2n)!/((2n+1)(2n)!) = 1/(2n+1)\n    # As n goes to infinity, the expression 1/(2n+1) approaches 0.\n    ans = 0\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/Graffe's_root2.json",
    "question": "Apply the Graeffe's root squaring method to find the roots of the following equation x^3 + 3x^2 - 4 = 0 correct to two decimals. What's the sum of these roots?",
    "prediction": 0,
    "answer": -3,
    "rationale": "def solve():\n    import numpy as np\n\n    def graeffe_iteration(coefficients, iterations):\n        n = len(coefficients) - 1\n        b = np.zeros(n + 1)\n        c = np.zeros(n + 1)\n\n        for k in range(iterations):\n            for i in range(n + 1):\n                b[i] = coefficients[i] ** 2\n                if i % 2 == 1:\n                    b[i] = -b[i]\n\n            for i in range(n + 1):\n                c[i] = 0\n                for j in range(i // 2, i + 1):\n                    c[i] += b[j] * b[i - j]\n\n            coefficients = c\n\n        return coefficients\n\n    def find_roots(coefficients, iterations):\n        n = len(coefficients) - 1\n        transformed_coefficients = graeffe_iteration(coefficients, iterations)\n        roots = np.zeros(n)\n        for i in range(n):\n            roots[i] = (transformed_coefficients[i + 1] / transformed_coefficients[i]) ** (1 / (2 ** iterations))\n        return roots\n\n    coefficients = np.array([1, 3, 0, -4])\n    iterations = 10\n    roots = find_roots(coefficients, iterations)\n    sum_of_roots = np.sum(roots)\n\n    return round(sum_of_roots, 2)",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/factor's_theory.json",
    "question": "Is x-1 a factor of 2*x^4+3*x^2-5x+7?",
    "prediction": false,
    "answer": false,
    "rationale": "To determine if x-1 is a factor of the polynomial 2x^4 + 3x^2 - 5x + 7, we can use the Factor Theorem. The Factor Theorem states that if (x - c) is a factor of a polynomial P(x), then P(c) = 0.\n\nIn this case, c = 1. So, we need to evaluate the polynomial at x = 1:\n\nP(1) = 2(1)^4 + 3(1)^2 - 5(1) + 7 = 2 + 3 - 5 + 7 = 7.\n\nSince P(1) \u2260 0, x-1 is not a factor of the polynomial 2x^4 + 3x^2 - 5x + 7.\n\nTherefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "tonyxia/modulararithmetic1.json",
    "question": "In year N, the 300th day of the year is a Tuesday. In year N + 1, the 200th day is also a Tuesday. Suppose Monday is the 1-th day of the week, on which day of the week did the 100th day of the year N - 1 occur? Return a numeric between 1 and 7.",
    "prediction": 1,
    "answer": 4,
    "rationale": "def solve():\n    # In year N, the 300th day is a Tuesday (3rd day of the week)\n    # In year N + 1, the 200th day is also a Tuesday (3rd day of the week)\n    # We need to find the day of the week for the 100th day of the year N - 1\n\n    # Let's find the difference in days between the 300th day of year N and the 200th day of year N + 1\n    days_difference = 200 - 300\n\n    # If year N is a leap year, then year N has 366 days, otherwise it has 365 days\n    # If year N is a leap year, then year N + 1 has 365 days, otherwise it has 364 days\n    # So, the total days between the 300th day of year N and the 200th day of year N + 1 is:\n    total_days = days_difference + 365\n\n    # Now, let's find the day of the week for the 100th day of the year N - 1\n    # We know that the 300th day of year N is a Tuesday (3rd day of the week)\n    # So, the 100th day of the year N - 1 is (total_days - 200) days before the 3rd day of the week\n    day_of_week = (3 - (total_days - 200)) % 7\n\n    # If the result is 0, it means the 100th day of the year N - 1 is the 7th day of the week\n    if day_of_week == 0:\n        day_of_week = 7\n\n    return day_of_week",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "panlu/pojectile_motion2.json",
    "question": "You throw a ball from your window $8.0 \\mathrm{~m}$ above the ground. When the ball leaves your hand, it is moving at $10.0 \\mathrm{~m} / \\athrm{s}$ at an angle of $20^{\\circ}$ below the horizontal. How far horizontally from your window will the ball hit the ground? Ignore air resistance. (Unit: m)",
    "prediction": 9.163803417484804,
    "answer": 9.2,
    "rationale": "def solve():\n  import math\n\n  # Constants\n  initial_height = 8.0  # m\n  initial_speed = 10.0  # m/s\n  angle = -20.0  # degrees (below the horizontal)\n\n  # Convert angle to radians\n  angle_rad = math.radians(angle)\n\n  # Calculate the vertical and horizontal components of the initial velocity\n  initial_speed_y = initial_speed * math.sin(angle_rad)\n  initial_speed_x = initial_speed * math.cos(angle_rad)\n\n  # Calculate the time it takes for the ball to hit the ground\n  # Using the equation: final_height = initial_height + initial_speed_y * time - 0.5 * g * time^2\n  g = 9.81  # m/s^2 (acceleration due to gravity)\n  time = (-initial_speed_y - math.sqrt(initial_speed_y**2 - 4 * (-0.5 * g) * initial_height)) / (2 * (-0.5 * g))\n\n  # Calculate the horizontal distance the ball travels\n  horizontal_distance = initial_speed_x * time\n\n  return horizontal_distance",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "maxku/cv-colorsci2-hsi.json",
    "question": "Given 2 colors whose HSI representations are given as follows: (a) $(pi, 0.3,0.5)$, (b) $(0.5 pi, 0.8,0.3)$, which color is brighter?",
    "prediction": "(a)",
    "answer": "(a)",
    "rationale": "In the HSI color model, the intensity (I) component represents the brightness of a color. Comparing the given HSI representations, color (a) has an intensity of 0.5, and color (b) has an intensity of 0.3. Therefore, the answer is (a).",
    "answer_type": "option",
    "correct": true
  },
  {
    "id": "wenhuchen/line_integral1.json",
    "question": "The position of a point for any time t (t>0) s defined by the equations: x=2t, y=ln(t), z = t^2. Find the mean velocity of motion between times t=1 and t=10.",
    "prediction": [
      2.0,
      0.2558427881104495,
      11.0
    ],
    "answer": 11.25,
    "rationale": "def solve():\n    import math\n\n    # Define the position functions\n    def x(t):\n        return 2 * t\n\n    def y(t):\n        return math.log(t)\n\n    def z(t):\n        return t ** 2\n\n    # Calculate the position at t=1 and t=10\n    x1, y1, z1 = x(1), y(1), z(1)\n    x10, y10, z10 = x(10), y(10), z(10)\n\n    # Calculate the displacement vector\n    dx = x10 - x1\n    dy = y10 - y1\n    dz = z10 - z1\n\n    # Calculate the time interval\n    dt = 10 - 1\n\n    # Calculate the mean velocity components\n    vx = dx / dt\n    vy = dy / dt\n    vz = dz / dt\n\n    # Return the mean velocity as a list of components\n    return [vx, vy, vz]",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/chebyshev1.json",
    "question": "Suppose a fair coin is tossed 50 times. The bound on the probability that the number of heads will be greater than 35 or less than 15 can be found using Chebyshev's Inequality. What is the upper bound of the probability?",
    "prediction": 0.12500000000000003,
    "answer": 0.125,
    "rationale": "def solve():\n    import math\n\n    n = 50\n    p = 0.5\n    mean = n * p\n    variance = n * p * (1 - p)\n    std_dev = math.sqrt(variance)\n\n    k = (mean - 15) / std_dev\n    chebyshev_upper_bound = 1 / (k**2)\n\n    return chebyshev_upper_bound",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/math_real_analysis_additional_4.json",
    "question": "Consider the set S:= {2^{-m} + n^{-1}: m, n \\in N}. What is the maximum of S?",
    "prediction": 1.5,
    "answer": false,
    "rationale": "To find the maximum of the set S, we need to analyze the behavior of the terms 2^{-m} and n^{-1} as m and n vary over the natural numbers.\n\nAs m increases, 2^{-m} decreases and approaches 0. Similarly, as n increases, n^{-1} decreases and approaches 0. Therefore, both terms are decreasing as m and n increase.\n\nNow, let's consider the case when both m and n are at their minimum value, which is 1. In this case, the term 2^{-m} + n^{-1} becomes 2^{-1} + 1^{-1} = 1/2 + 1 = 3/2.\n\nSince both terms are decreasing as m and n increase, the maximum value of the set S occurs when both m and n are at their minimum value, which is 1.\n\nTherefore, the answer is 1.5.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "wenhuchen/eigen_value1.json",
    "question": "For matrix A = [[5, 4], [1, 2]], what are its eigen values?",
    "prediction": [
      6.0,
      1.0
    ],
    "answer": [
      1,
      6
    ],
    "rationale": "def solve():\n    import numpy as np\n\n    A = np.array([[5, 4], [1, 2]])\n    eigenvalues, _ = np.linalg.eig(A)\n    \n    return eigenvalues.tolist()",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "wenhuchen/cauchy_riemann1.json",
    "question": "Determine values of the real numbers a, b, and c to make the function $x^2 + ay^2 + y + i(bxy + cx)$ by an analytical function of the complex variable of $x+iy$? Return your answer as a list [a, b, c].",
    "prediction": [
      -1,
      2,
      1
    ],
    "answer": [
      -1,
      2,
      -1
    ],
    "rationale": "def solve():\n    # To make the given function an analytical function of the complex variable x+iy,\n    # we need to satisfy the Cauchy-Riemann equations.\n    # Let u(x, y) = x^2 + ay^2 + y and v(x, y) = bxy + cx\n    # Then, we have the following Cauchy-Riemann equations:\n    # du/dx = dv/dy and du/dy = -dv/dx\n\n    # Calculate the partial derivatives:\n    # du/dx = 2x\n    # du/dy = 2ay + 1\n    # dv/dx = by + c\n    # dv/dy = bx\n\n    # Now, we need to solve the following system of equations:\n    # 2x = bx\n    # 2ay + 1 = -(by + c)\n\n    # From the first equation, we get b = 2 (since x cannot be zero)\n    # Now, substitute b = 2 in the second equation:\n    # 2ay + 1 = -(2y + c)\n\n    # To satisfy the second equation for all values of y, we must have:\n    # a = -1 and c = 1\n\n    ans = [-1, 2, 1]\n    return ans",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "panlu/molecule_vibration1.json",
    "question": "Two argon atoms form the molecule $Ar_2$ as a result of a van der Waals interaction with $U_0 = 1.68 \\times 10 ^ {-21}$ J and $R_0 = 3.82 \\times 10 ^ {-10}$ m. Find the frequency of small oscillations of one Ar atom about its equilibrium position. (Unit: 10^11 Hz)",
    "prediction": 1.2112359538767843e+20,
    "answer": 5.63,
    "rationale": "def solve():\n  import math\n\n  # Constants\n  U0 = 1.68e-21  # J\n  R0 = 3.82e-10  # m\n  m_ar = 6.6335209e-26  # kg (mass of one argon atom)\n  h_bar = 1.0545718e-34  # J*s (reduced Planck constant)\n\n  # Calculate the spring constant k\n  k = 36 * math.pi**2 * U0 / R0**6\n\n  # Calculate the reduced mass mu\n  mu = m_ar / 2\n\n  # Calculate the angular frequency omega\n  omega = math.sqrt(k / mu)\n\n  # Calculate the frequency of small oscillations\n  frequency = omega / (2 * math.pi)\n\n  # Convert the frequency to 10^11 Hz\n  frequency_10_11 = frequency / 1e11\n\n  return frequency_10_11",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/p_value3.json",
    "question": "You have a coin and you would like to check whether it is fair or biased. More specifically, let $\\theta$ be the probability of heads, $\\theta = P(H)$. Suppose that you need to choose between the following hypotheses: H_0 (null hypothesis): The coin is fair, i.e. $\\theta = \\theta_0 = 1 / 2$. H_1 (the alternative hypothesis): The coin is not fair, i.e. $\\theta > 1 / 2$. We toss 100 times and observe 60 heads. What is the P-value?",
    "prediction": 0.02844396682049039,
    "answer": 0.023,
    "rationale": "def solve():\n    from scipy.stats import binom\n\n    n = 100  # number of tosses\n    k = 60  # number of heads\n    theta_0 = 1 / 2  # probability of heads under null hypothesis\n\n    # Calculate the P-value using the survival function (1 - CDF) of the binomial distribution\n    p_value = binom.sf(k - 1, n, theta_0)\n\n    return p_value",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/ipnetwork13-hammingdist.json",
    "question": "Calculate the Hamming pairwise distances and determine the minimum Hamming distance among the following codewords: 00000,10101,01010",
    "prediction": 2,
    "answer": 2,
    "rationale": "def solve():\n    def hamming_distance(s1, s2):\n        return sum(ch1 != ch2 for ch1, ch2 in zip(s1, s2))\n\n    codewords = ['00000', '10101', '01010']\n    distances = []\n\n    for i in range(len(codewords)):\n        for j in range(i+1, len(codewords)):\n            distances.append(hamming_distance(codewords[i], codewords[j]))\n\n    return min(distances)",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/vieta's_formula4.json",
    "question": "If the quartic x^4 + 3x^3 + 11x^2 + 9x + A has roots k, l, m, and n such that kl = mn, find A.",
    "prediction": [
      1,
      9
    ],
    "answer": 9,
    "rationale": "def solve():\n    # According to Vieta's formulas, the sum of the roots is -3 and the product of the roots is A.\n    # Since kl = mn, we can rewrite the product of the roots as (kl)^2 = A.\n    # We can also rewrite the sum of the roots as k + l + m + n = -3.\n    # We can use the sum of the roots to express one of the roots in terms of the others.\n    # Let's express n in terms of k, l, and m: n = -3 - k - l - m.\n    # Now we can rewrite the product of the roots as (kl)(-3 - k - l - m) = A.\n    # We can also rewrite the product of the roots as (kl)^2 = A.\n    # So, we have the equation (kl)(-3 - k - l - m) = (kl)^2.\n    # We can divide both sides by kl to get -3 - k - l - m = kl.\n    # Now we can express m in terms of k and l: m = -3 - k - l - kl.\n    # We can substitute this expression for m back into the equation for n: n = -3 - k - l - (-3 - k - l - kl).\n    # Simplifying the expression for n, we get n = kl.\n    # Now we can substitute the expressions for m and n back into the product of the roots: (kl)(kl) = A.\n    # Simplifying, we get A = (kl)^2.\n    # Since we know the sum of the roots is -3, we can use this information to find the value of kl.\n    # We can rewrite the sum of the roots as k + l + kl + kl = -3.\n    # Simplifying, we get 2kl + k + l = -3.\n    # We can solve this equation for kl by using the quadratic formula: kl = (-1 \u00b1 sqrt(1 - 4(2)(-3))) / 4.\n    # We get two possible values for kl: kl = (-1 + sqrt(25)) / 4 or kl = (-1 - sqrt(25)) / 4.\n    # We can plug these values back into the equation for A: A = ((-1 + sqrt(25)) / 4)^2 or A = ((-1 - sqrt(25)) / 4)^2.\n    # We can simplify these expressions to get A = 1 or A = 9.\n    # Since A is an integer, the possible values for A are 1 and 9.\n    return [1, 9]",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "elainewan/math_abstact_algebra_7_3.json",
    "question": "What is the order of the group S_3 * Z_2?",
    "prediction": 12,
    "answer": 12,
    "rationale": "def solve():\n  order_S3 = 6  # The order of the symmetric group S_3 is 6\n  order_Z2 = 2  # The order of the cyclic group Z_2 is 2\n\n  # The order of the direct product of two groups is the product of their orders\n  ans = order_S3 * order_Z2\n  return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "maxku/graphtheory3-vertexcover.json",
    "question": "Let a undirected graph G with edges E = {<0,2>, <2,4>, <3,4>, <1,4>}, which <A,B> represent Node A is connected to Node B. What is the minimum vertex cover of G if 0 is one of vertex cover? Represent the vertex cover in a list of ascending order.",
    "prediction": [
      0,
      4
    ],
    "answer": [
      0,
      4
    ],
    "rationale": "def solve():\n    # Define the graph as an adjacency list\n    graph = {\n        0: [2],\n        1: [4],\n        2: [0, 4],\n        3: [4],\n        4: [1, 2, 3]\n    }\n\n    # Since 0 is in the vertex cover, we can remove its neighbors from the graph\n    del graph[2]\n\n    # Now we need to find the minimum vertex cover for the remaining graph\n    # We can greedily choose the vertex with the highest degree\n    max_degree_vertex = max(graph, key=lambda x: len(graph[x]))\n\n    # Add the chosen vertex to the vertex cover\n    vertex_cover = [0, max_degree_vertex]\n\n    return sorted(vertex_cover)",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "tonyxia/quantum1.json",
    "question": "Photoelectrons may be emitted from sodium (phi = 2.36 eV) even for light intensities as low as 10^-8 W/m^2. Calculate classically how much time (in seconds) the light must shine to produce a photoelectron of kinetic energy 1.00 eV. Return the numeric value.",
    "prediction": 5.3833248e-11,
    "answer": 463000000.0,
    "rationale": "def solve():\n    import math\n\n    # Constants\n    phi = 2.36  # work function of sodium in eV\n    intensity = 1e-8  # light intensity in W/m^2\n    kinetic_energy = 1.00  # desired kinetic energy of photoelectron in eV\n    eV_to_J = 1.60218e-19  # conversion factor from eV to J\n\n    # Calculate the energy required to emit a photoelectron with 1.00 eV kinetic energy\n    energy_required = (phi + kinetic_energy) * eV_to_J\n\n    # Calculate the time required for the light to shine to produce a photoelectron\n    time_required = energy_required / intensity\n\n    return time_required",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/totient5.json",
    "question": "Find the sum of all positive integers less than 196 and relatively prime to 98.",
    "prediction": 8232,
    "answer": 8232,
    "rationale": "def solve():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    ans = 0\n    for i in range(1, 196):\n        if gcd(i, 98) == 1:\n            ans += i\n\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "xinyi/sum_product_algorithm.json",
    "question": "If the sum-product algorithm is run on a factor graph with a tree structure (no loops), then after a finite number of messages have been sent, there will be no pending messages. True or false?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "maxku/graphtheory5-vertexcover.json",
    "question": "Let a undirected graph G with edges E = {<0,4>,<4,1>,<0,3>,<3,4>,<3,2>,<1,3>}, which <A,B> represent Node A is connected to Node B. What is the minimum vertex cover of G? Represent the vertex cover in a list of ascending order.",
    "prediction": [
      3,
      4
    ],
    "answer": [
      3,
      4
    ],
    "rationale": "def solve():\n    import itertools\n\n    def is_vertex_cover(graph, cover):\n        for edge in graph:\n            if edge[0] not in cover and edge[1] not in cover:\n                return False\n        return True\n\n    graph = [(0, 4), (4, 1), (0, 3), (3, 4), (3, 2), (1, 3)]\n    nodes = set()\n    for edge in graph:\n        nodes.add(edge[0])\n        nodes.add(edge[1])\n\n    min_vertex_cover = None\n    for i in range(1, len(nodes) + 1):\n        for combination in itertools.combinations(nodes, i):\n            if is_vertex_cover(graph, combination):\n                if min_vertex_cover is None or len(combination) < len(min_vertex_cover):\n                    min_vertex_cover = combination\n                break\n\n    return sorted(min_vertex_cover)",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "elainewan/math_calculus_1.json",
    "question": "Does f (x) = x2 + cx + 1 have a real root when c=0?",
    "prediction": false,
    "answer": false,
    "rationale": "When c = 0, the function becomes f(x) = x^2 + 1. To determine if it has a real root, we can look at the discriminant, which is given by the formula D = b^2 - 4ac. In this case, a = 1, b = 0, and c = 1.\n\nD = (0)^2 - 4(1)(1) = 0 - 4 = -4\n\nSince the discriminant is negative, the function f(x) = x^2 + 1 does not have a real root when c = 0. Therefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "wenhuchen/area.json",
    "question": "Compute the are of that part of the helicoid z = arctan(y/x) which lies in the first octant between the cylinder $x^2+y^2 = 1^2$ and $x^2+y^2 = 2^2$.",
    "prediction": 1.8188777782474626,
    "answer": 2.843,
    "rationale": "def solve():\n    from scipy.integrate import nquad\n    import numpy as np\n\n    def integrand(r, theta):\n        return np.sqrt(1 + r**2) * r\n\n    def r_bounds():\n        return [1, 2]\n\n    def theta_bounds(r):\n        return [0, np.pi/2]\n\n    area, _ = nquad(integrand, [theta_bounds, r_bounds])\n    return area",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/cauchy_integral2.json",
    "question": "Evaluate $\\int_c 1 / (z^ + 4)^2 dz$ over the contour. This contour is a circle centered at (0, i) with a diameter of 3 on the (Re, Im) plane, the contour goes counter-clockwise.",
    "prediction": 6.938893903907228e-18,
    "answer": 0.19634,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.integrate import quad\n\n    # Define the contour\n    def contour(t):\n        center = complex(0, 1)\n        radius = 3 / 2\n        return center + radius * np.exp(1j * t)\n\n    # Define the derivative of the contour\n    def contour_derivative(t):\n        radius = 3 / 2\n        return 1j * radius * np.exp(1j * t)\n\n    # Define the integrand\n    def integrand(t):\n        z = contour(t)\n        dz = contour_derivative(t)\n        return 1 / (z + 4)**2 * dz\n\n    # Integrate over the contour\n    integral, _ = quad(lambda t: np.real(integrand(t)), 0, 2 * np.pi)\n    integral += 1j * quad(lambda t: np.imag(integrand(t)), 0, 2 * np.pi)[0]\n\n    return integral",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_2_3.json",
    "question": "$\\lim_{x \\to c}((x^2 - 5x - 6) / (x - c))$ exists. What is the value of c?",
    "prediction": 0,
    "answer": [
      -1,
      6
    ],
    "rationale": "def solve():\n    import sympy as sp\n\n    x, c = sp.symbols('x c')\n    expr = (x**2 - 5*x - 6) / (x - c)\n    limit = sp.limit(expr, x, c)\n\n    if limit.is_real:\n        ans = c\n    else:\n        ans = \"Limit does not exist\"\n\n    return ans",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "jianyu_xu/Cayley_2.json",
    "question": "What is the number of labelled forests on 8 vertices with 5 connected components, such that vertices 1, 2, 3, 4, 5 all belong to different connected components?",
    "prediction": 17920,
    "answer": 320,
    "rationale": "def solve():\n    from math import comb\n\n    # There are 8 vertices and 5 connected components\n    n = 8\n    k = 5\n\n    # Since vertices 1, 2, 3, 4, 5 belong to different connected components,\n    # there are 3 remaining vertices to be distributed among the 5 connected components\n    remaining_vertices = 3\n\n    # Using stars and bars method to distribute the remaining vertices among the connected components\n    ways_to_distribute = comb(remaining_vertices + k - 1, remaining_vertices)\n\n    # Using Cayley's formula to find the number of labelled forests on n vertices with k connected components\n    ans = ways_to_distribute * (n ** (n - k))\n\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "tonyxia/quantum5.json",
    "question": "In a particular semiconductor device, electrons that are accelerated through a potential of 5 V attempt to tunnel through a barrier of width 0.8 nm and height 10 V. What fraction of the electrons are able to tunnel through the barrier if the potential is zero outside the barrier?",
    "prediction": 1.0957952971649994e-08,
    "answer": 4.1e-08,
    "rationale": "def solve():\n    import math\n\n    # Constants\n    electron_mass = 9.10938356e-31  # kg\n    electron_charge = 1.60217662e-19  # C\n    h_bar = 1.0545718e-34  # Js\n    potential = 5  # V\n    barrier_height = 10  # V\n    barrier_width = 0.8e-9  # m\n\n    # Calculate the energy of the electrons\n    electron_energy = electron_charge * potential\n\n    # Calculate the energy difference between the barrier height and the electron energy\n    energy_difference = electron_charge * barrier_height - electron_energy\n\n    # Calculate the wave number inside the barrier\n    k = math.sqrt(2 * electron_mass * energy_difference) / h_bar\n\n    # Calculate the transmission probability\n    transmission_probability = math.exp(-2 * k * barrier_width)\n\n    return transmission_probability",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xueguangma/weighted_average_cost_of_capital.json",
    "question": "Your firm is trying to decide whether to buy an e-commerce software company. The company has $100,000 in total capital assets: $60,000 in equity and $40,000 in debt. The cost of the company\u2019s equity is 10%, while the cost of the company's debt is 5%. The corporate tax rate is 21%. What is the WACC of the company?",
    "prediction": 0.0758,
    "answer": 0.0758,
    "rationale": "def solve():\n    equity = 60000\n    debt = 40000\n    total_capital = equity + debt\n    cost_of_equity = 0.10\n    cost_of_debt = 0.05\n    tax_rate = 0.21\n\n    # Calculate the weighted average cost of capital (WACC)\n    wacc = (equity / total_capital) * cost_of_equity + (debt / total_capital) * cost_of_debt * (1 - tax_rate)\n    return wacc",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/Fluid_mechanics2.json",
    "question": "A container weighs 3.22 lb force when empty. Filled with water at 60\u00b0F the mass of the container and its contents is 1.95 slugs. Find its volume in cubic feet. Assume density of water = 62.4 lb force/ft3.",
    "prediction": 0.953834935897436,
    "answer": 0.955,
    "rationale": "def solve():\n  empty_container_weight = 3.22  # lb force\n  total_mass = 1.95  # slugs\n  density_water = 62.4  # lb force/ft3\n  g = 32.174  # ft/s2, acceleration due to gravity\n\n  # Convert mass to weight\n  total_weight = total_mass * g  # lb force\n\n  # Calculate the weight of water\n  weight_water = total_weight - empty_container_weight  # lb force\n\n  # Calculate the volume of water\n  volume_water = weight_water / density_water  # ft3\n\n  return volume_water",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/L'H\u00f4pital_rule2.json",
    "question": "Is the function of f(x) = sin(x) / |x| continuous everywhere?",
    "prediction": false,
    "answer": false,
    "rationale": "No, the function f(x) = sin(x) / |x| is not continuous everywhere. The function is continuous for all x \u2260 0, but it is not continuous at x = 0, as the denominator becomes zero and the function is undefined at that point. Therefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "maxku/basic-electronics-6-2.json",
    "question": "Determine the value of R in order to get a phase angle of 35 degree between the source voltage and the total current in the figure. Give the answer in unit of $k\\Omega$ (3 sig.fig.).",
    "prediction": 3.84,
    "answer": 3.59,
    "rationale": "",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "panlu/fluid_flow1.json",
    "question": "Incompressible oil of density 850 kg/m^3 is pumped through a cylindrical pipe at a rate of 9.5 liters per second. The second section of the pipe has a diameter of 4.0 cm. What are the flow speed in that section? (Unit: m/s)",
    "prediction": 7.5598597968650285,
    "answer": 7.6,
    "rationale": "def solve():\n  # import library\n  import math\n\n  # given data\n  density = 850  # kg/m^3\n  flow_rate = 9.5 / 1000  # converting liters to m^3/s\n  diameter = 4.0 / 100  # converting cm to m\n\n  # calculate the area of the pipe\n  area = math.pi * (diameter / 2)**2\n\n  # calculate the flow speed\n  flow_speed = flow_rate / area\n\n  return flow_speed",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "panlu/wave_speed1.json",
    "question": "One end of a 2.00-kg rope is tied to a support at the top of a mine shaft 80.0 m deep. The rope is stretched taut by a 20.0-kg box of rocks attached at the bottom. If a point on the rope is in transverse SHM with f = 2.00 Hz, how many cycles of the wave are there in the rope\u2019s length?",
    "prediction": 1.8060945639429236,
    "answer": 1.81,
    "rationale": "def solve():\n  # Given values\n  mass_rope = 2.00  # kg\n  mass_box = 20.00  # kg\n  depth = 80.00  # m\n  frequency = 2.00  # Hz\n\n  # Calculate the tension in the rope\n  tension = mass_box * 9.81  # N\n\n  # Calculate the linear mass density of the rope\n  linear_mass_density = mass_rope / depth  # kg/m\n\n  # Calculate the wave speed\n  wave_speed = (tension / linear_mass_density) ** 0.5  # m/s\n\n  # Calculate the wavelength\n  wavelength = wave_speed / frequency  # m\n\n  # Calculate the number of cycles in the rope's length\n  num_cycles = depth / wavelength\n\n  return num_cycles",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xinyi/data_processing.json",
    "question": "Is the conditional entropy $H(X_0|X_n)$ non-decreasing with n for any Markov chain?",
    "prediction": true,
    "answer": true,
    "rationale": "Yes, the conditional entropy H(X_0|X_n) is non-decreasing with n for any Markov chain. This is due to the data processing inequality, which states that applying a deterministic function to a random variable cannot increase the entropy.\n\nIn the context of a Markov chain, this means that as we move further along the chain (i.e., increase n), the entropy of the initial state X_0 given the current state X_n cannot increase. In other words, the uncertainty about the initial state given the current state can only stay the same or decrease as we move along the chain.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "maxku/ipnetwork17-application-chord.json",
    "question": "A Chord based distributed hash table (DHT) with 26 address space is used in a peer- to-peer file sharing network. There are currently 10 active peers in the network with node ID N1, N11, N15, N23, N31, N40, N45, N51, N60, and N63. Show all the target key (in ascending order, ignore the node's identifier itself) for N1.",
    "prediction": [
      0,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      12,
      13,
      14,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      24,
      25
    ],
    "answer": [
      2,
      3,
      5,
      9,
      17,
      33
    ],
    "rationale": "def solve():\n    address_space = 26\n    active_peers = [1, 11, 15, 23, 31, 40, 45, 51, 60, 63]\n    target_keys = []\n\n    for i in range(address_space):\n        if i not in active_peers:\n            target_keys.append(i)\n\n    return target_keys",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "xinyi/newtons_laws_3.json",
    "question": "A curve with a 120 m radius on a level road is banked at the correct angle for a speed of 20 m/s. If an automobile rounds this curve at 30 m/s, what is the minimum coefficient of static friction needed between tires and road to prevent skidding?",
    "prediction": 0.3397893306150186,
    "answer": 0.34,
    "rationale": "def solve():\n    import math\n\n    # Given values\n    radius = 120  # m\n    speed_20 = 20  # m/s\n    speed_30 = 30  # m/s\n\n    # Calculate the angle of the banked curve\n    angle = math.atan(speed_20**2 / (radius * 9.81))\n\n    # Calculate the normal force acting on the car\n    normal_force = (speed_30**2 / radius) * math.cos(angle)\n\n    # Calculate the required friction force to prevent skidding\n    friction_force = (speed_30**2 / radius) * math.sin(angle)\n\n    # Calculate the minimum coefficient of static friction\n    min_coefficient = friction_force / normal_force\n\n    return min_coefficient",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/econ_micro_17.json",
    "question": "As scotch whiskey ages, its value increases. One dollar of scotch at year 0 is worth $V(t) = exp{2\\sqrt{t} - 0.15t}$ dollars at time t. If the interest rate is 5 percent, after how many years should a person sell scotch in order to maximize the PDV of this sale?",
    "prediction": 25.305226109940694,
    "answer": 25,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.optimize import minimize_scalar\n\n    def V(t):\n        return np.exp(2 * np.sqrt(t) - 0.15 * t)\n\n    def PDV(t):\n        return V(t) / (1 + 0.05) ** t\n\n    res = minimize_scalar(lambda t: -PDV(t), bounds=(0, 100), method='bounded')\n    optimal_time = res.x\n\n    return optimal_time",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "mingyin/Lebesgue-measure2.json",
    "question": "Denote m(\\cdot) to be Lebesgue measure. Given a point set E. Suppose for any closed set F and open set G with F \\subset E \\subset G, it holds $\\sup _F {m(F)}<\\inf _G {m(G)}$. Is set E Lebesgue measurable? Answer 1 for yes and 0 for no. Return the number",
    "prediction": 0,
    "answer": 0.0,
    "rationale": "def solve():\n    # According to the definition of Lebesgue measurable sets, a set E is measurable if for any epsilon > 0,\n    # there exists a closed set F and an open set G such that F \u2286 E \u2286 G and m(G\\F) < epsilon.\n    # In the given question, it is mentioned that for any closed set F and open set G with F \u2286 E \u2286 G,\n    # it holds sup_F m(F) < inf_G m(G).\n    # This implies that there exists a gap between the measures of F and G, which means that m(G\\F) > 0.\n    # Therefore, the given condition does not satisfy the definition of Lebesgue measurable sets.\n    # Hence, the set E is not Lebesgue measurable.\n    return 0",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/math_calculus_5.json",
    "question": "What is \\int_{-3}^1 (7x^2 + x +1)dx?",
    "prediction": 65.3333333333333,
    "answer": 65.333,
    "rationale": "def solve():\n  from sympy import symbols, integrate\n\n  x = symbols('x')\n  f = 7*x**2 + x + 1\n  ans = integrate(f, (x, -3, 1))\n\n  return ans.evalf()",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/L'H\u00f4pital_rule1.json",
    "question": "What is (sin(2x) / x)^(1+x) when x is approaching 0?",
    "prediction": 2.0000000001386296,
    "answer": 2.0,
    "rationale": "def solve():\n  import math\n\n  x = 1e-10  # A very small value close to 0\n  ans = (math.sin(2 * x) / x) ** (1 + x)\n  return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "panlu/trapezoid1.json",
    "question": "RS is the midsegment of trapezoid MNOP. If MN = 10x+3, RS=9x-1, and PO = 4x+7, what is the length of RS?",
    "prediction": 26,
    "answer": 26,
    "rationale": "def solve():\n  from sympy import symbols, Eq, solve\n\n  x = symbols('x')\n  MN = 10*x + 3\n  RS = 9*x - 1\n  PO = 4*x + 7\n\n  # Since RS is the midsegment of trapezoid MNOP, we have the formula: RS = (MN + PO) / 2\n  equation = Eq(RS, (MN + PO) / 2)\n  x_value = solve(equation, x)[0]\n\n  # Now, we can find the length of RS by substituting the value of x\n  ans = RS.subs(x, x_value)\n  return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "jianyu_xu/Cayley_3.json",
    "question": "How many trees are there on 5 labeled vertices?",
    "prediction": 125,
    "answer": 125,
    "rationale": "def solve():\n  import math\n\n  # Number of trees on n labeled vertices is given by n^(n-2)\n  n = 5\n  ans = n**(n-2)\n\n  return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "xueguangma/dividend_discount_model_1.json",
    "question": "Lore Ltd. estimates that its dividend growth will be 13% per year for the next five years. It will then settle to a sustainable, constant, and continuing rate of 5%. Let\u2019s say that the current year\u2019s dividend is $14 and the required rate of return (or discount rate) is 12%. What is the current fair value of Lore Ltd. stock?",
    "prediction": 291.4413835747148,
    "answer": 291.45,
    "rationale": "def solve():\n    dividend = 14\n    growth_rate_initial = 0.13\n    growth_rate_sustainable = 0.05\n    discount_rate = 0.12\n    years_initial_growth = 5\n\n    # Calculate the dividends for the first 5 years\n    dividends_initial_growth = [dividend * (1 + growth_rate_initial)**i for i in range(1, years_initial_growth + 1)]\n\n    # Calculate the present value of the dividends for the first 5 years\n    present_value_initial_growth = [div / (1 + discount_rate)**i for i, div in enumerate(dividends_initial_growth, start=1)]\n\n    # Calculate the dividend for the first year of sustainable growth\n    dividend_sustainable = dividends_initial_growth[-1] * (1 + growth_rate_sustainable)\n\n    # Calculate the present value of the dividends for the sustainable growth period\n    present_value_sustainable_growth = dividend_sustainable / (discount_rate - growth_rate_sustainable)\n\n    # Calculate the present value of the sustainable growth period\n    present_value_sustainable_growth = present_value_sustainable_growth / (1 + discount_rate)**years_initial_growth\n\n    # Calculate the current fair value of the stock\n    fair_value = sum(present_value_initial_growth) + present_value_sustainable_growth\n\n    return fair_value",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/newton4.json",
    "question": "Please solve the equation sin(4*x) + x = 54 and provide all the roots using newton-raphson method.",
    "prediction": 54.25761033705978,
    "answer": [
      53.52,
      54.25,
      54.76
    ],
    "rationale": "def solve():\n    import math\n    from scipy.optimize import newton\n\n    # Define the function and its derivative\n    def f(x):\n        return math.sin(4 * x) + x - 54\n\n    def f_prime(x):\n        return 4 * math.cos(4 * x) + 1\n\n    # Set an initial guess and find the root using Newton-Raphson method\n    initial_guess = 54\n    root = newton(f, initial_guess, f_prime)\n\n    return root",
    "answer_type": "list of float",
    "correct": false
  },
  {
    "id": "tonyxia/divisibility3.json",
    "question": "Find integer $n \\ge 1$, such that $n \\cdot 2^{n+1}+1$ is a perfect square.",
    "prediction": 0,
    "answer": 3,
    "rationale": "def solve():\n    def is_perfect_square(num):\n        return int(num**0.5)**2 == num\n\n    n = 1\n    while True:\n        expression = n * 2**(n+1) + 1\n        if is_perfect_square(expression):\n            return n",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/sylvester-probability-problem1.json",
    "question": "If four points are picked independently at random inside the triangle ABC, what is the probability that no one of them lies inside the triangle formed by the other three?",
    "prediction": 0.7569444444444444,
    "answer": 0.6667,
    "rationale": "def solve():\n    # The probability that no one of the four points lies inside the triangle formed by the other three is given by the formula:\n    # P = 1 - (35/144)\n    P = 1 - (35/144)\n    return P",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_15.json",
    "question": "Use the linear approximation to estimate (3.99)^3 (1.01)^4 (1.98)^{-1}.",
    "prediction": 32.700096,
    "answer": 33.36,
    "rationale": "def solve():\n    # Linear approximation formula: f(x) \u2248 f(a) + f'(a)(x-a)\n    # We have three functions: f1(x) = x^3, f2(x) = x^4, f3(x) = x^(-1)\n    # Their derivatives: f1'(x) = 3x^2, f2'(x) = 4x^3, f3'(x) = -x^(-2)\n    # We will approximate each function around a = 4, 1, and 2, respectively\n\n    # f1(3.99) \u2248 f1(4) + f1'(4)(3.99-4)\n    f1_approx = 4**3 + 3*(4**2)*(-0.01)\n\n    # f2(1.01) \u2248 f2(1) + f2'(1)(1.01-1)\n    f2_approx = 1**4 + 4*(1**3)*(0.01)\n\n    # f3(1.98) \u2248 f3(2) + f3'(2)(1.98-2)\n    f3_approx = 2**(-1) - (-1)*(2**(-2))*(-0.02)\n\n    # Multiply the approximations\n    ans = f1_approx * f2_approx * f3_approx\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/viterbi1.json",
    "question": "Assuming we are underground, and the only thing we can observe is whether a person brings an umbrella or not. The weather could be either rainy or sunny. Assuming the P(rain)=0.6 and P(sunny)=0.4. Assuming the weather on day $k$ is dependent on the weather on day $k-1$. We can write the transition probability as P(sunny $\\mid$ sunny) = P(rain $\\mid$ rain) = 0.55. The person has 60\\% chance to bring an umbrella when the weather is rainy, and 40\\% chance to bring an umbrella when the weather is sunny, i.e. P(umbrella $\\mid$ rain) = 0.6 and P(umbrella $\\mid$ sunny) = 0.4. If we observe that the person (1) brought an umbrella on day 1, (2) did not bring an umbrella on day 2, (3) brought an umbrella on day 3.  What are the most likely weather from day 1 to day 3? Return the answer as a list of binary values, where 1 represents rain and 0 represents sunny.",
    "prediction": [
      0,
      0,
      1
    ],
    "answer": [
      1,
      0,
      1
    ],
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the transition matrix\n    transition_matrix = np.array([[0.55, 0.45],\n                                  [0.45, 0.55]])\n\n    # Define the emission matrix\n    emission_matrix = np.array([[0.6, 0.4],\n                                [0.4, 0.6]])\n\n    # Define the initial probabilities\n    initial_probabilities = np.array([0.6, 0.4])\n\n    # Define the observations\n    observations = [1, 0, 1]\n\n    # Initialize the Viterbi algorithm\n    n_states = 2\n    n_observations = len(observations)\n    viterbi = np.zeros((n_states, n_observations))\n    backpointers = np.zeros((n_states, n_observations), dtype=int)\n\n    # Initialize the first column of the Viterbi matrix\n    viterbi[:, 0] = initial_probabilities * emission_matrix[:, observations[0]]\n\n    # Iterate through the observations\n    for t in range(1, n_observations):\n        for s in range(n_states):\n            viterbi[s, t] = np.max(viterbi[:, t - 1] * transition_matrix[:, s] * emission_matrix[s, observations[t]])\n            backpointers[s, t] = np.argmax(viterbi[:, t - 1] * transition_matrix[:, s])\n\n    # Traceback the most likely path\n    most_likely_path = np.zeros(n_observations, dtype=int)\n    most_likely_path[-1] = np.argmax(viterbi[:, -1])\n\n    for t in range(n_observations - 2, -1, -1):\n        most_likely_path[t] = backpointers[most_likely_path[t + 1], t + 1]\n\n    return most_likely_path.tolist()",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "xueguangma/geometric_mean_return.json",
    "question": "The returns on a stock are 2.45% at 2018, 5.42% at 2019, -13.83% at 2020. What is the compound annual rate (between -1 and 1) of return over the three years.",
    "prediction": 0.49212602985991294,
    "answer": -0.023669,
    "rationale": "",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/signalprocessing18-noisebark.json",
    "question": "A perceptual audio codec is used to compress an audio signal. The codec groups every 4 barks into a subband and then allocates bits to different subbands according to the result of a spectrum analysis based on a psychoacoustic model. All samples in the same subband are quantized with the same quantizer, and the bit resolution of which is allocated by the codec. (The Bark scale is a psychoacoustical scale proposed by Eberhard Zwicker in 1961.) Fig. Q1a shows the frequency spectrum of a windowed segment of audio signal. The psychoacoustic model shown in Fig. Q1b is used in the audio codec to derive the masking threshold for the audio segment. How many potential maskers in Fig. Q1a?",
    "prediction": 0,
    "answer": 7,
    "rationale": "",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/Galois_theory1.json",
    "question": "Can we use the method of compass and straightedge construction to construct the edge length of a cube, such that the volume of the cube is equal to X time the volume of a given cube, where X belongs to the set {3,17,8,27,343,1331}? Return the answer list for the respective values of X with 1 for yes and 0 for no.",
    "prediction": [
      1,
      0,
      1,
      1,
      0,
      0
    ],
    "answer": [
      0,
      0,
      1,
      1,
      1,
      1
    ],
    "rationale": "def solve():\n    def is_constructible(x):\n        if x < 1:\n            return 0\n        while x % 2 == 0:\n            x //= 2\n        while x % 3 == 0:\n            x //= 3\n        return 1 if x == 1 else 0\n\n    X_values = [3, 17, 8, 27, 343, 1331]\n    ans = [is_constructible(x) for x in X_values]\n    return ans",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "xueguangma/compound_interest.json",
    "question": "Aisha graduates college and starts a job. She saves $1000 each quarter, depositing it into a retirement savings account. Suppose that Aisha saves for 30 years and then retires. At retirement she wants to withdraw money as an annuity that pays a constant amount every month for 25 years. During the savings phase, the retirement account earns 6% interest compounded quarterly. During the annuity payout phase, the retirement account earns 4.8% interest compounded monthly. Calculate Aisha\u2019s monthly retirement annuity payout.",
    "prediction": 1926.7453420066986,
    "answer": 1898.27,
    "rationale": "def solve():\n    # Constants\n    quarterly_savings = 1000\n    quarterly_interest_rate = 0.06 / 4\n    years_saving = 30\n    quarters_saving = years_saving * 4\n    monthly_interest_rate = 0.048 / 12\n    years_annuity = 25\n    months_annuity = years_annuity * 12\n\n    # Calculate the future value of the savings\n    future_value_savings = 0\n    for i in range(quarters_saving):\n        future_value_savings = (future_value_savings + quarterly_savings) * (1 + quarterly_interest_rate)\n\n    # Calculate the annuity payout\n    annuity_factor = (1 - (1 + monthly_interest_rate) ** (-months_annuity)) / monthly_interest_rate\n    monthly_payout = future_value_savings / annuity_factor\n\n    return monthly_payout",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/newton1.json",
    "question": "Please solve x^3 + 2*x = 10 using newton-raphson method.",
    "prediction": 1.8474190378327326,
    "answer": 1.8474,
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the function and its derivative\n    def f(x):\n        return x**3 + 2*x - 10\n\n    def df(x):\n        return 3*x**2 + 2\n\n    # Initialize the starting point and tolerance\n    x0 = 1.5\n    tol = 1e-6\n    max_iter = 100\n\n    # Implement the Newton-Raphson method\n    for i in range(max_iter):\n        x1 = x0 - f(x0) / df(x0)\n        if abs(x1 - x0) < tol:\n            break\n        x0 = x1\n\n    return x1",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/math_calculus_1_2.json",
    "question": "Is cos(\\pi/8) equal to (\\sqrt{2+\\sqrt{2}})/2?",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if cos(\u03c0/8) is equal to (\u221a(2+\u221a2))/2, we can use the half-angle formula for cosine:\n\ncos(x/2) = \u00b1\u221a[(1 + cos(x))/2]\n\nIn this case, x = \u03c0/4, so we want to find cos(\u03c0/8):\n\ncos(\u03c0/8) = \u00b1\u221a[(1 + cos(\u03c0/4))/2]\n\nSince \u03c0/8 is in the first quadrant, the cosine value will be positive. Therefore, we can ignore the negative option:\n\ncos(\u03c0/8) = \u221a[(1 + cos(\u03c0/4))/2]\n\nWe know that cos(\u03c0/4) = \u221a2/2, so we can substitute this value into the equation:\n\ncos(\u03c0/8) = \u221a[(1 + \u221a2/2)/2]\n\nNow, we can simplify the expression:\n\ncos(\u03c0/8) = \u221a[(2 + \u221a2)/4]\n\ncos(\u03c0/8) = \u221a(2 + \u221a2)/2\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "tonyxia/particle2.json",
    "question": "Assume that half of the mass of a 62-kg person consists of protons. If the half-life of the proton is 10^33 years, calculate the number of proton decays per day from the body.",
    "prediction": 3.5244032482979243e-08,
    "answer": 3.5e-08,
    "rationale": "def solve():\n  mass_of_person = 62\n  half_mass_of_person = mass_of_person / 2\n  mass_of_proton = 1.67e-27  # kg\n  half_life_of_proton = 10**33  # years\n  seconds_in_a_year = 3.1536e7  # seconds\n  seconds_in_a_day = 86400  # seconds\n\n  # Calculate the number of protons in half the mass of the person\n  num_protons = half_mass_of_person / mass_of_proton\n\n  # Calculate the decay constant\n  decay_constant = 0.693 / (half_life_of_proton * seconds_in_a_year)\n\n  # Calculate the number of proton decays per day\n  proton_decays_per_day = num_protons * decay_constant * seconds_in_a_day\n\n  return proton_decays_per_day",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/bisection1.json",
    "question": "Find the interval in which the smallest positive root of the following equations lies: tan x + tanh x = 0. Determine the roots correct to two decimal places using the bisection method",
    "prediction": 1.56,
    "answer": 2.37,
    "rationale": "def solve():\n    import math\n    import numpy as np\n\n    def f(x):\n        return math.tan(x) + np.tanh(x)\n\n    def bisection(a, b, tol):\n        while (b - a) / 2 > tol:\n            c = (a + b) / 2\n            if f(c) == 0:\n                return c\n            elif f(a) * f(c) < 0:\n                b = c\n            else:\n                a = c\n        return (a + b) / 2\n\n    # Find the interval in which the smallest positive root lies\n    a = 0\n    b = math.pi / 2\n    while f(a) * f(b) > 0:\n        a = b\n        b += math.pi / 2\n\n    # Determine the root correct to two decimal places using the bisection method\n    tol = 1e-2\n    root = bisection(a, b, tol)\n    return round(root, 2)",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/econ_micro_12_2.json",
    "question": "The perfectly competitive videotape-copying industry is composed of many firms that can copy five tapes per day at an average cost of $10 per tape. Each firm must also pay a royalty to film studios, and the per-film royalty rate (r) is an increasing function of total industry output (Q): r = 0.002Q. Demand is given by Q = D(P) = 1,050 - 50P. Assuming the industry is in long-run equilibrium, what will be the equilibrium price of copied tapes?",
    "prediction": 11.0,
    "answer": 11,
    "rationale": "def solve():\n    from sympy import symbols, Eq, solve\n\n    P, Q = symbols('P Q')\n    demand_eq = Eq(Q, 1050 - 50 * P)\n    total_cost = 10 * Q + 0.002 * Q**2\n    average_cost = total_cost / Q\n    price_eq = Eq(P, average_cost)\n\n    # Solve the system of equations\n    solution = solve((demand_eq, price_eq), (P, Q))\n\n    # Get the equilibrium price\n    equilibrium_price = solution[0][0]\n\n    return float(equilibrium_price)",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/series_convergen1.json",
    "question": "Does the following series $\\sum_{i=0}^{\\infty} \\frac{n!}{n^2 cos(n)}$ converge?",
    "prediction": 0,
    "answer": 0.0,
    "rationale": "def solve():\n    import math\n\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def series_term(n):\n        return factorial(n) / (n**2 * math.cos(n))\n\n    max_iterations = 1000\n    tolerance = 1e-6\n    sum_series = 0\n    previous_sum = 0\n\n    for n in range(max_iterations):\n        sum_series += series_term(n)\n        if abs(sum_series - previous_sum) < tolerance:\n            return \"Converges\"\n        previous_sum = sum_series\n\n    return \"Does not converge\"",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "jianyu_xu/Polya_1.json",
    "question": "How many distinct necklaces with 12 beads can be made with 10 beads of color R and 2 beads of color B, assuming rotations and reflections are considered equivalent?",
    "prediction": 90,
    "answer": 6,
    "rationale": "def solve():\n    from math import gcd\n\n    def necklaces(n, k):\n        ans = 0\n        for d in range(1, n + 1):\n            if n % d == 0:\n                ans += (k ** d) * (n // d)\n        return ans // n\n\n    def burnside_lemma(n, k):\n        ans = 0\n        for d in range(1, n + 1):\n            if n % d == 0:\n                ans += gcd(n, d) * (k ** (n // d))\n        return ans // (2 * n)\n\n    n = 12\n    k = 2\n    ans = (necklaces(n, k) - burnside_lemma(n, k)) // 2\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/signalprocessing4-Ztransform.json",
    "question": "The equation of a digital filter is given by $y(n)=1 / 3(x(n)+x(n-1)+x(n-2))$, where $y(n)$ and $x(n)$ are, respectively, the nth samples of the output and input signals. Is it a FIR?",
    "prediction": true,
    "answer": true,
    "rationale": "Yes, the given digital filter has a finite impulse response (FIR) because it depends only on a finite number of past input samples (x(n), x(n-1), and x(n-2)) and does not depend on any past output samples. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "mingyin/combinatorial-math1.json",
    "question": "Consider a $21 \\times 17$ rectangular region. This region is to be tiled using tiles of the two types shown in ./mingyin/square1.png (The dotted lines divide the tiles into $1\\times 1$ squares.) The tiles may be rotated and reflected, as long as their sides are parallel to the sides of the rectangular region. They must all fit within the region, and they must cover it completely without overlapping. What is the minimum number of tiles required to tile the region?",
    "prediction": 89,
    "answer": 99,
    "rationale": "def solve():\n    # The dimensions of the rectangular region\n    width = 21\n    height = 17\n\n    # The area of the rectangular region\n    area = width * height\n\n    # The area of each tile type\n    tile_area_1 = 5  # The L-shaped tile\n    tile_area_2 = 4  # The square tile\n\n    # The minimum number of tiles required to tile the region\n    min_tiles = area // min(tile_area_1, tile_area_2)\n\n    return min_tiles",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "elainewan/math_real_analysis_additional_2.json",
    "question": "Define f(x)=(4x+5)/(9-3x), is the function continuous at x=-1?",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if the function is continuous at x = -1, we need to check if the function is defined at x = -1 and if the limit exists at x = -1.\n\nf(x) = (4x + 5) / (9 - 3x)\n\nLet's plug in x = -1:\n\nf(-1) = (4(-1) + 5) / (9 - 3(-1)) = (4 + 5) / (9 + 3) = 9 / 12 = 3/4\n\nThe function is defined at x = -1.\n\nNow, let's find the limit as x approaches -1:\n\nlim (x -> -1) (4x + 5) / (9 - 3x)\n\nSince the function is a rational function and the denominator is not zero at x = -1, the limit exists and is equal to the function value at x = -1.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "elainewan/math_algebra_1.json",
    "question": "Find the x value of the solutions to the linear system: 7x - y = 15x, -6x + 8y = 15y.",
    "prediction": 0.0,
    "answer": 0,
    "rationale": "def solve():\n    import numpy as np\n\n    # Coefficients of the linear equations\n    A = np.array([[7, 1], [6, -7]])\n\n    # Constants in the right-hand side\n    B = np.array([0, 0])\n\n    # Solve the linear system\n    x = np.linalg.solve(A, B)\n\n    # Return the x value of the solution\n    return x[0]",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "maxku/ipnetwork12-tcp-RTO.json",
    "question": "A TCP entity sends 6 segments across the Internet. The measured round-trip times (RTTM) for the 6 segments are 68ms, 42ms, 65ms, 80ms, 38ms, and 75ms, respectively. Assume that the smooth averaged RTT (RTTs) and Deviation (RTTD) was respectively 70ms and 10ms just before the first of these six samples. According to the Jacobson's algorithm, the retransmission timeout (RTO) is given by one RTTs plus 4 times the value of RTTD. Determine the value of RTO (in ms) after the six segments using the Jacobson's algorithm if the exponential smoothing parameters (a and B) are 0.15 and 0.2 for calculating RTTs and RTTD respectively.",
    "prediction": 114.28250168125001,
    "answer": 114.28,
    "rationale": "def solve():\n    RTTM = [68, 42, 65, 80, 38, 75]\n    a = 0.15\n    B = 0.2\n    RTTs = 70\n    RTTD = 10\n\n    for rttm in RTTM:\n        RTTs = (1 - a) * RTTs + a * rttm\n        RTTD = (1 - B) * RTTD + B * abs(RTTs - rttm)\n\n    RTO = RTTs + 4 * RTTD\n    return RTO",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/cauchy_riemann4.json",
    "question": "If u is the real part of a function, and v is the imaginary part, then the Cauchy-Riemann equations for u and v take the following form in polar coordinates: r\\frac{\\partial u}{\\partial r} = \\frac{\\partial v}{\\partial \\theta} and r\\frac{\\partial v}{\\partial r} = -\\frac{\\partial u}{\\partial \\theta}. Is this argument True or False?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "mingyin/random-walk1.json",
    "question": "Let {X_n: n \\geq 1} be independent, identically distributed random variables taking integer values {1,-1}. Let S_0=0, S_n=\\sum_{i=1}^n X_i. Let P(X_i=1)=0.8 and P(X_i=-1)=0.2. The range R_n of S_0,S_1,...,S_n is the number of distinct values taken by the sequence. Then what is the limit of n^{-1}E[R_n] as n goes to infinity? Here E[R_n] is the expectation over the random variable R_n.",
    "prediction": 0,
    "answer": 0.6,
    "rationale": "def solve():\n    import numpy as np\n\n    def simulate_random_walk(n, p, num_simulations):\n        random_walks = np.random.choice([1, -1], size=(num_simulations, n), p=[p, 1-p])\n        random_walks = np.cumsum(random_walks, axis=1)\n        random_walks = np.column_stack((np.zeros(num_simulations), random_walks))\n        return random_walks\n\n    def compute_expected_range(n, p, num_simulations):\n        random_walks = simulate_random_walk(n, p, num_simulations)\n        ranges = np.array([len(set(walk)) for walk in random_walks])\n        return np.mean(ranges)\n\n    n_values = np.arange(1, 1001)\n    p = 0.8\n    num_simulations = 1000\n\n    expected_ranges = np.array([compute_expected_range(n, p, num_simulations) for n in n_values])\n    normalized_expected_ranges = expected_ranges / n_values\n\n    limit = np.mean(normalized_expected_ranges[-100:])\n    return limit",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/cv-imageprocessing6-histogram.json",
    "question": "Given image \\begin{tabular}{|llll|} \\hline 7 & 1 & 6 & 0 \\\\ 3 & 3 & 7 & 6 \\\\ 6 & 6 & 5 & 7 \\\\ \\hline \\end{tabular} , and the bit-depth of the image is 4. Suppose you want to use the thresholding technique to segment the image. What is the appropriate threshold value based on the histogram of the image? Follow the following rule when you do thresholding or grouping: pixel $(i, j) \\in$ Group A pixels if $g(i, j) \\leq$ current threshold $\\mathrm{T}$; pixel $(i, j) \\in$ Group B pixels otherwise, where $g(i, j)$ is the intensity value of pixel $(i, j)$.",
    "prediction": 3,
    "answer": 4,
    "rationale": "def solve():\n    import numpy as np\n\n    image = np.array([[7, 1, 6, 0],\n                      [3, 3, 7, 6],\n                      [6, 6, 5, 7]])\n\n    bit_depth = 4\n    max_intensity = 2 ** bit_depth - 1\n\n    histogram = np.zeros(max_intensity + 1)\n    for i in range(image.shape[0]):\n        for j in range(image.shape[1]):\n            histogram[image[i, j]] += 1\n\n    total_pixels = image.shape[0] * image.shape[1]\n    group_a_pixels = 0\n    group_b_pixels = total_pixels\n\n    sum_a = 0\n    sum_b = sum([i * histogram[i] for i in range(max_intensity + 1)])\n\n    max_variance = 0\n    threshold = 0\n\n    for t in range(max_intensity + 1):\n        group_a_pixels += histogram[t]\n        group_b_pixels -= histogram[t]\n\n        sum_a += t * histogram[t]\n        sum_b -= t * histogram[t]\n\n        if group_a_pixels == 0 or group_b_pixels == 0:\n            continue\n\n        mean_a = sum_a / group_a_pixels\n        mean_b = sum_b / group_b_pixels\n\n        variance = group_a_pixels * group_b_pixels * (mean_a - mean_b) ** 2\n\n        if variance > max_variance:\n            max_variance = variance\n            threshold = t\n\n    return threshold",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "panlu/fluid_pressure1.json",
    "question": "Water stands 12.0 m deep in a storage tank whose top is open to the atmosphere. What are the gauge pressures at the bottom of the tank? (Unit: 10 ^ 5 Pa)",
    "prediction": 1.1772,
    "answer": 1.18,
    "rationale": "def solve():\n  # Constants\n  h = 12.0  # depth of water in meters\n  rho = 1000  # density of water in kg/m^3\n  g = 9.81  # acceleration due to gravity in m/s^2\n\n  # Calculate the gauge pressure at the bottom of the tank\n  gauge_pressure = h * rho * g\n\n  # Convert the gauge pressure to the unit of 10^5 Pa\n  ans = gauge_pressure / (10 ** 5)\n\n  return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/relativity2.json",
    "question": "A muon has a lifetime of 2 x 10^{-6} s in its rest frame. It is created 100 km above the earth and moves towards it at a speed of 2.97 x 10^8 m/s. At what altitude in km does it decay? Return a numeric number.",
    "prediction": 95.78924564225049,
    "answer": 4.2,
    "rationale": "def solve():\n    # Constants\n    muon_lifetime = 2e-6  # s\n    initial_altitude = 100000  # m\n    muon_speed = 2.97e8  # m/s\n    speed_of_light = 3e8  # m/s\n\n    # Time dilation factor (Lorentz factor)\n    lorentz_factor = 1 / ((1 - (muon_speed / speed_of_light) ** 2) ** 0.5)\n\n    # Dilated lifetime of the muon\n    dilated_lifetime = muon_lifetime * lorentz_factor\n\n    # Distance traveled by the muon before decaying\n    distance_traveled = muon_speed * dilated_lifetime\n\n    # Altitude at which the muon decays\n    decay_altitude = initial_altitude - distance_traveled\n\n    # Convert decay altitude to km\n    decay_altitude_km = decay_altitude / 1000\n\n    return decay_altitude_km",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/triangle2.json",
    "question": "ABC is a right triangle. AM is perpendicular to BC. The size of angle ABC is equal to 55 degrees. Find the size of angle MAC.",
    "prediction": 55,
    "answer": 55,
    "rationale": "def solve():\n  # Given angle ABC is 55 degrees\n  angle_ABC = 55\n\n  # Since ABC is a right triangle, angle ACB is 90 degrees\n  angle_ACB = 90\n\n  # Using the property of triangle that the sum of angles is 180 degrees\n  angle_BAC = 180 - angle_ABC - angle_ACB\n\n  # Now, we need to find angle MAC\n  # Since AM is perpendicular to BC, angle MBA is 90 degrees\n  angle_MBA = 90\n\n  # Using the property of triangle that the sum of angles is 180 degrees\n  angle_MAC = 180 - angle_MBA - angle_BAC\n\n  return angle_MAC",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "tonyxia/statisticalphysics5.json",
    "question": "Calculate the Fermi energy for copper in eV.",
    "prediction": 7.045323594791385,
    "answer": 7.03,
    "rationale": "def solve():\n    import math\n\n    # Constants\n    n = 1\n    rho = 8.96  # g/cm\u00b3\n    A = 63.546  # g/mol\n    h = 6.626e-34  # J s\n    m_e = 9.109e-31  # kg\n    eV = 1.602e-19  # J/eV\n    avogadro = 6.022e23  # atoms/mol\n\n    # Calculate the volume of one mole of copper atoms\n    V = A / (rho * 1e6)  # m\u00b3/mol\n\n    # Calculate the total number of free electrons in one mole of copper\n    N = n * avogadro\n\n    # Calculate the Fermi energy\n    E_F = (h**2 / (2 * m_e)) * (3 * N / (8 * math.pi * V))**(2/3)\n\n    # Convert the Fermi energy to eV\n    E_F_eV = E_F / eV\n\n    return E_F_eV",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "jianyu_xu/Chinese_Remainder_Theorem_6.json",
    "question": "Find the smallest positive integer that leaves a remainder of 1 when divided by 2, a remainder of 2 when divided by 3, a remainder of 3 when divided by 4, a remainder of 4 when divided by 5, and a remainder of 5 when divided by 6.",
    "prediction": 0,
    "answer": 59,
    "rationale": "def solve():\n    num = 1\n    while True:\n        if num % 2 == 1 and num % 3 == 2 and num % 4 == 3 and num % 5 == 4 and num % 6 == 5:\n            return num",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_3_3.json",
    "question": "Let g(x) = 1 / (1 + x^{3/2}), what is g'(x) when x = 1?",
    "prediction": -0.375,
    "answer": -0.375,
    "rationale": "def solve():\n    import sympy as sp\n\n    x = sp.Symbol('x')\n    g = 1 / (1 + x**(3/2))\n    g_prime = sp.diff(g, x)\n    ans = g_prime.subs(x, 1)\n\n    return float(ans)",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/gross_domestic_product.json",
    "question": "Calculate the Gross Domestic Product using the total expenditure approach:\nConsumption Expenditures | $500 billion\nWages and salaries | $400 billion\n(Gross Private) Investments Expenditures | $80 billion\nGovernment Expenditures | $100 billion\nTaxes | $70 billion\nImports | $50 billion\nExports | $30 billion\nWhat is the GDP (in billions)?",
    "prediction": 660,
    "answer": 660,
    "rationale": "def solve():\n    consumption_expenditures = 500\n    investments_expenditures = 80\n    government_expenditures = 100\n    imports = 50\n    exports = 30\n\n    gdp = consumption_expenditures + investments_expenditures + government_expenditures + exports - imports\n    return gdp",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "xinyi/expected_distortion.json",
    "question": "Let $X \\sim N(0,1)$ and let the distortion measure be squared error. Here we do not allow block descriptions. Compute the minimum expected distortion for one bit quantization of $X$ using a squared error distortion measure.",
    "prediction": -0.6816901041412187,
    "answer": 0.363,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.optimize import minimize_scalar\n\n    # Define the squared error distortion function\n    def distortion(a):\n        return (1 - 2 * a * np.sqrt(1 - a**2) - 2 * np.arcsin(a)) / np.pi\n\n    # Find the minimum expected distortion using optimization\n    res = minimize_scalar(distortion, bounds=(-1, 1), method='bounded')\n    return res.fun",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_2_12.json",
    "question": "Does 2^x +1/x = -4 have a solution?",
    "prediction": false,
    "answer": true,
    "rationale": "Let's analyze the equation 2^x + 1/x = -4.\n\nFirst, we know that 2^x is always positive for any real value of x. Also, 1/x can be positive or negative depending on the value of x. However, the sum of a positive number (2^x) and a number that can be positive or negative (1/x) can never be equal to a negative number (-4).\n\nTherefore, the answer is False.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "xinyi/work_energy_theorem.json",
    "question": "At a waterpark, sleds with riders are sent along a slippery, horizontal surface by the release of a large compressed spring. The spring with force constant k = 40.0 N/cm and negligible mass rests on the frictionless horizontal surface. One end is in contact with a stationary wall. A sled and rider with total mass 70.0 kg are pushed against the other end, compressing the spring 0.375 m. The sled is then released with zero initial velocity. What is the sled's speed (in m/s) when the spring returns to its uncompressed length?",
    "prediction": 2.834733547569204,
    "answer": 2.83,
    "rationale": "def solve():\n  # Given values\n  k = 40.0  # N/cm\n  k = k * 100  # Convert to N/m\n  mass = 70.0  # kg\n  compression = 0.375  # m\n\n  # Using Hooke's Law and conservation of energy\n  # Potential energy in the spring = Kinetic energy of the sled\n  # (1/2) * k * x^2 = (1/2) * m * v^2\n  # v = sqrt((k * x^2) / m)\n\n  velocity = ((k * compression**2) / mass)**0.5\n  return velocity",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/holding_period_return.json",
    "question": "Three years ago, Fred invested $10,000 in the shares of ABC Corp. Each year, the company distributed dividends to its shareholders. Each year, Fred received $100 in dividends. Note that since Fred received $100 in dividends each year, his total income is $300. Today, Fred sold his shares for $12,000. What is the holding period return of his investment?",
    "prediction": 0.23,
    "answer": 0.23,
    "rationale": "def solve():\n  initial_investment = 10000\n  dividends_received = 100 * 3\n  final_value = 12000\n\n  holding_period_return = (final_value - initial_investment + dividends_received) / initial_investment\n  return holding_period_return",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "maxku/cv-imageprocessing15-DCT.json",
    "question": "The 4 8x8 images shown below are encoded with JPEG coding. Based on their expected DCT (Discrete Cosine Transform) coefficients, Sort the images according to the magnitude of their DC coefficients. Provide your answer in a list of ascending order.",
    "prediction": 0,
    "answer": [
      0,
      1,
      2,
      3
    ],
    "rationale": "import numpy as np\nimport cv2\ndef calculate_dc_coefficient(image):\n    # Convert the image to grayscale\n    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n    # Apply DCT to the grayscale image\n    dct_image = cv2.dct(np.float32(gray_image))\n\n    # Return the DC coefficient (top-left corner of the DCT image)\n    return dct_image[0, 0]\ndef solve(images):\n    # Calculate the DC coefficients for each image\n    dc_coefficients = [calculate_dc_coefficient(image) for image in images]\n\n    # Sort the images based on their DC coefficients\n    sorted_images = [image for _, image in sorted(zip(dc_coefficients, images), key=lambda pair: pair[0])]\n\n    return sorted_images",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "xinyi/cramer_rao_lower_bound_2.json",
    "question": "What is the Cramer-Rao lower bound on $E_\\theta(\\hat{\\theta}(X)-\\theta)^2$, where $\\hat{\\theta}(X)$ is an unbaised estimator of $\\theta$ for the distribution family $f_\\theta(x)=\\theta e^{-\\theta x}$, $x \\geq 0$? (a) $\\theta$. (b) $\\theta^2$. (c) $\\theta^{-1}$. (d) $\\theta^{-2}$.",
    "prediction": "(b)",
    "answer": "(b)",
    "rationale": "To find the Cramer-Rao lower bound, we first need to compute the Fisher information $I(\\theta)$. The Fisher information is given by:\n\n$I(\\theta) = E_\\theta\\left[\\left(\\frac{\\partial}{\\partial\\theta}\\log f_\\theta(X)\\right)^2\\right]$\n\nFor the given distribution family $f_\\theta(x) = \\theta e^{-\\theta x}$, we have:\n\n$\\log f_\\theta(x) = \\log(\\theta) - \\theta x$\n\nTaking the derivative with respect to $\\theta$, we get:\n\n$\\frac{\\partial}{\\partial\\theta}\\log f_\\theta(x) = \\frac{1}{\\theta} - x$\n\nNow, we need to compute the expectation of the square of this derivative:\n\n$E_\\theta\\left[\\left(\\frac{1}{\\theta} - x\\right)^2\\right] = E_\\theta\\left[\\frac{1}{\\theta^2} - \\frac{2x}{\\theta} + x^2\\right]$\n\nSince $X$ follows an exponential distribution with parameter $\\theta$, we have:\n\n$E_\\theta[X] = \\frac{1}{\\theta}$ and $E_\\theta[X^2] = \\frac{2}{\\theta^2}$\n\nSubstituting these values, we get:\n\n$I(\\theta) = \\frac{1}{\\theta^2} - \\frac{2}{\\theta^2} + \\frac{2}{\\theta^2} = \\frac{1}{\\theta^2}$\n\nNow, the Cramer-Rao lower bound on the variance of an unbiased estimator $\\hat{\\theta}(X)$ is given by:\n\n$Var_\\theta(\\hat{\\theta}(X)) \\geq \\frac{1}{I(\\theta)}$\n\nSubstituting the Fisher information, we get:\n\n$Var_\\theta(\\hat{\\theta}(X)) \\geq \\theta^2$\n\nSince the question asks for the lower bound on $E_\\theta(\\hat{\\theta}(X)-\\theta)^2$, which is the same as the variance of the estimator, we have:\n\nTherefore, the answer is (b) $\\theta^2$.",
    "answer_type": "option",
    "correct": true
  },
  {
    "id": "xueguangma/forward_rate_3.json",
    "question": "Consider two 5 year bonds: one has a 9% coupon and sells for 101.00; the other has a 7% coupon and sells for 93.20. What is the price of a 5-year zero-coupon bond.",
    "prediction": 0,
    "answer": 65.9,
    "rationale": "def solve():\n    # Given data\n    bond1_price = 101.00\n    bond1_coupon = 0.09\n    bond2_price = 93.20\n    bond2_coupon = 0.07\n    years = 5\n\n    # Calculate the present value of the coupon payments for each bond\n    pv_bond1_coupon = sum([bond1_coupon * 100 / (1 + r)**t for t in range(1, years + 1)])\n    pv_bond2_coupon = sum([bond2_coupon * 100 / (1 + r)**t for t in range(1, years + 1)])\n\n    # Calculate the present value of the face value for each bond\n    pv_bond1_face = 100 / (1 + r)**years\n    pv_bond2_face = 100 / (1 + r)**years\n\n    # Calculate the price of the zero-coupon bond\n    zero_coupon_bond_price = (bond1_price - pv_bond1_coupon - pv_bond1_face) / (bond2_price - pv_bond2_coupon - pv_bond2_face)\n\n    return zero_coupon_bond_price",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/modulararithmetic2.json",
    "question": "The positive integers N and N^2 both end in the same sequence of four digits abcd when written in base 10, where digit a is nonzero. Find the three-digit number abc.",
    "prediction": 937,
    "answer": 937,
    "rationale": "def solve():\n    for N in range(1000, 10000):\n        N_squared = N * N\n        if str(N)[-4:] == str(N_squared)[-4:]:\n            return int(str(N)[:-1])",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "panlu/center_of_gravity1.json",
    "question": "A uniform plank of length L = 6.0 m and mass M = 90 kg rests on sawhorses separated by D = 1.5 m and equidistant from the center of the plank. Cousin Throckmorton wants to stand on the right-hand end of the plank. If the plank is to remain at rest, how massive can Throckmorton be? (Unit: kg)",
    "prediction": 135.0,
    "answer": 30,
    "rationale": "def solve():\n    L = 6.0  # length of the plank in meters\n    M = 90.0  # mass of the plank in kg\n    D = 1.5  # distance between sawhorses in meters\n\n    # The center of mass of the plank is at the middle, L/2\n    center_of_mass = L / 2\n\n    # The distance from the center of mass to the right-hand sawhorse\n    distance_to_right_sawhorse = center_of_mass - D / 2\n\n    # The distance from the center of mass to the left-hand sawhorse\n    distance_to_left_sawhorse = center_of_mass + D / 2\n\n    # The force exerted by the plank on the right-hand sawhorse\n    force_on_right_sawhorse = M * 9.81 * distance_to_right_sawhorse / D\n\n    # The force exerted by the plank on the left-hand sawhorse\n    force_on_left_sawhorse = M * 9.81 * distance_to_left_sawhorse / D\n\n    # The maximum mass of Throckmorton that can be supported by the right-hand sawhorse\n    max_mass_throckmorton = force_on_right_sawhorse / 9.81\n\n    return max_mass_throckmorton",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "tonyxia/quantum3.json",
    "question": "Calculate the momentum uncertainty of an electron within the smallest diameter of a hydrogen atom in kg m/s.",
    "prediction": 9.964259420771352e-25,
    "answer": 1e-24,
    "rationale": "def solve():\n  import math\n\n  # Constants\n  h_bar = 1.0545718e-34  # Reduced Planck constant in J s\n  d_hydrogen = 5.2917721e-11  # Smallest diameter of a hydrogen atom in meters\n\n  # Calculate the momentum uncertainty\n  momentum_uncertainty = h_bar / (2 * d_hydrogen)\n\n  return momentum_uncertainty",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/math_algebra_7_2.json",
    "question": "Is there an eigenbasis for the identity matrix I_n?",
    "prediction": 0,
    "answer": true,
    "rationale": "Yes, there is an eigenbasis for the identity matrix I_n. Every vector in R^n is an eigenvector of I_n with eigenvalue 1. Therefore, any basis of R^n can be considered an eigenbasis for I_n.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "maxku/basic-electronics-A2-2.json",
    "question": "Find the rms(Root Mean Square) voltage value (in V) of the waveform in figure (3 sig fig.).",
    "prediction": [
      12.0,
      8.0,
      5.0
    ],
    "answer": 3.45,
    "rationale": "",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xueguangma/outstanding_balance_of_loan.json",
    "question": "Mr. Jackson bought his house in 1995, and financed the loan for 30 years at an interest rate of 7.8%. His monthly payment was $1260. In 2015, Mr. Jackson decides to pay off the loan. Find the balance of the loan he still owes.",
    "prediction": 104761.33903738193,
    "answer": 104761.48,
    "rationale": "def solve():\n  # import library\n  import math\n\n  # implement the code\n  principal = 1260 * (1 - math.pow(1 + 0.078 / 12, -30 * 12)) / (0.078 / 12)\n  remaining_balance = principal * math.pow(1 + 0.078 / 12, 20 * 12) - 1260 * (math.pow(1 + 0.078 / 12, 20 * 12) - 1) / (0.078 / 12)\n\n  return remaining_balance",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "jianyu_xu/combination_and_permutation_1.json",
    "question": "How many ways are there to distribute 13 identical balls into 4 distinct boxes if the boxes are distinguishable and no box can be left empty?",
    "prediction": 220,
    "answer": 220,
    "rationale": "def solve():\n    from math import comb\n\n    # We have 13 identical balls and 4 distinct boxes\n    # We need to distribute the balls in such a way that no box is left empty\n    # We can use the stars and bars method to solve this problem\n    # We need to place 3 dividers (bars) between the balls (stars) to distribute them into 4 boxes\n    # Since no box can be left empty, we can place the dividers in the remaining 12 spaces between the balls\n    # The number of ways to do this is the combination of 12 spaces taken 3 at a time\n\n    ans = comb(12, 3)\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "mingyin/Schauder-fix-point-theorem1.json",
    "question": "Suppose C is a compact convex set in a linear normed space, and let T: C \u2192 C be a continuous mapping. Then, there exists a fixed point of T in C. Is this correct? Answer 1 for yes and 0 for no.",
    "prediction": 1,
    "answer": 1.0,
    "rationale": "def solve():\n    # This is a well-known theorem in functional analysis called the Brouwer fixed-point theorem.\n    # The statement is correct, so we return 1 for yes.\n    return 1",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "maxku/basic-electronics-3-3.json",
    "question": "In the figure,At what rate is thermal energy generated in the $20 \\Omega$ resistor? Answer in unit of W (3 sig.fig.).",
    "prediction": 3.84,
    "answer": 1.63,
    "rationale": "",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "jianyu_xu/Cayley_4.json",
    "question": "What is the number of labelled rooted forests on 6 vertices",
    "prediction": 614866,
    "answer": 16807,
    "rationale": "def solve():\n    import math\n\n    def bell_number(n):\n        bell = [[0 for i in range(n+1)] for j in range(n+1)]\n        bell[0][0] = 1\n        for i in range(1, n+1):\n            bell[i][0] = bell[i-1][i-1]\n            for j in range(1, i+1):\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        return bell[n][0]\n\n    def stirling_number(n, k):\n        if n == k == 0:\n            return 1\n        if n == 0 or k == 0:\n            return 0\n        return k * stirling_number(n-1, k) + stirling_number(n-1, k-1)\n\n    n = 6\n    ans = 0\n    for k in range(1, n+1):\n        ans += math.pow(k, n) * stirling_number(n, k)\n    return int(ans)",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "jianyu_xu/Ramsey_3.json",
    "question": "What is the minimum number of people needed in a room to guarantee that there are 4 mutual friends or 4 mutual strangers?",
    "prediction": 20,
    "answer": 18,
    "rationale": "def solve():\n    def ramsey_theory(r, s):\n        if r == 1 or s == 1:\n            return 1\n        return ramsey_theory(r - 1, s) + ramsey_theory(r, s - 1)\n\n    ans = ramsey_theory(4, 4)\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/differential_equation4.json",
    "question": "Is differential equation $sin(t)y' + t^2e^yy' - y' = -ycos(t) - 2te^y$ exact or not?",
    "prediction": false,
    "answer": true,
    "rationale": "To determine if the given differential equation is exact or not, we need to check if the following condition holds:\n\n$$\\frac{\\partial M}{\\partial y} = \\frac{\\partial N}{\\partial t}$$\n\nwhere $M(t, y) = -y\\cos(t) - 2te^y$ and $N(t, y) = \\sin(t)y' + t^2e^yy' - y'$.\n\nFirst, let's find the partial derivatives:\n\n$$\\frac{\\partial M}{\\partial y} = \\frac{\\partial (-y\\cos(t) - 2te^y)}{\\partial y} = -\\cos(t) - 2te^y$$\n\n$$\\frac{\\partial N}{\\partial t} = \\frac{\\partial (\\sin(t)y' + t^2e^yy' - y')}{\\partial t} = \\cos(t)y' + 2te^yy'$$\n\nNow, let's compare the two partial derivatives:\n\n$$-\\cos(t) - 2te^y \\neq \\cos(t)y' + 2te^yy'$$\n\nSince the partial derivatives are not equal, the given differential equation is not exact. Therefore, the answer is False.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "wenhuchen/viterbi2.json",
    "question": "Assuming we are underground, and the only thing we can observe is whether a person brings an umbrella or not. The weather could be either rainy or sunny. Assuming the P(rain)=0.6 and P(sunny)=0.4. Assuming the weather on day $k$ is dependent on the weather on day $k-1$. We can write the transition probability as P(sunny $\\mid$ sunny) = P(rain $\\mid$ rain) = 0.7. The person has 60\\% chance to bring an umbrella when the weather is rainy, and 40\\% chance to bring an umbrella when the weather is sunny, i.e. P(umbrella $\\mid$ rain) = 0.6 and P(umbrella $\\mid$ sunny) = 0.4. If we observe that the person (1) brought an umbrella on day 1, (2) did not bring an umbrella on day 2, (3) brought an umbrella on day 3.  What are the most likely weather from day 1 to day 3? Return the answer as a list of binary values, where 1 represents rain and 0 represents sunny.",
    "prediction": [
      0,
      0,
      0
    ],
    "answer": [
      1,
      1,
      1
    ],
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the transition matrix\n    transition_matrix = np.array([[0.7, 0.3], [0.3, 0.7]])\n\n    # Define the emission matrix\n    emission_matrix = np.array([[0.6, 0.4], [0.4, 0.6]])\n\n    # Define the initial probabilities\n    initial_probabilities = np.array([0.6, 0.4])\n\n    # Define the observations\n    observations = [1, 0, 1]\n\n    # Initialize the Viterbi algorithm\n    n_states = 2\n    n_observations = len(observations)\n    viterbi = np.zeros((n_states, n_observations))\n    backpointers = np.zeros((n_states, n_observations), dtype=int)\n\n    # Initialize the first column of the Viterbi matrix\n    viterbi[:, 0] = initial_probabilities * emission_matrix[:, observations[0]]\n\n    # Iterate through the observations\n    for t in range(1, n_observations):\n        for s in range(n_states):\n            viterbi[s, t] = np.max(viterbi[:, t - 1] * transition_matrix[:, s] * emission_matrix[s, observations[t]])\n            backpointers[s, t] = np.argmax(viterbi[:, t - 1] * transition_matrix[:, s])\n\n    # Traceback the most likely path\n    most_likely_path = np.zeros(n_observations, dtype=int)\n    most_likely_path[-1] = np.argmax(viterbi[:, -1])\n\n    for t in range(n_observations - 2, -1, -1):\n        most_likely_path[t] = backpointers[most_likely_path[t + 1], t + 1]\n\n    return most_likely_path.tolist()",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "xueguangma/annuity_due.json",
    "question": "If at the beginning of each month a deposit of $500 is made in an account that pays 8% compounded monthly, what will the final amount be after five years?",
    "prediction": 36983.35,
    "answer": 36983.35,
    "rationale": "def solve():\n  monthly_deposit = 500\n  annual_interest_rate = 0.08\n  months = 5 * 12\n\n  monthly_interest_rate = annual_interest_rate / 12\n  final_amount = 0\n\n  for _ in range(months):\n    final_amount = (final_amount + monthly_deposit) * (1 + monthly_interest_rate)\n\n  return round(final_amount, 2)",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/taylor_expansion2.json",
    "question": "Is the Taylor Series for $f$ at x=5 where $f(x)=\\sum_{n=0}^{\\infty}\\frac{x^n}{n!} absolutely converging?",
    "prediction": true,
    "answer": 1.0,
    "rationale": "def solve():\n    import math\n\n    def taylor_series(x, n_terms=100):\n        sum = 0\n        for n in range(n_terms):\n            sum += (x ** n) / math.factorial(n)\n        return sum\n\n    x = 5\n    n_terms = 100\n    series_value = taylor_series(x, n_terms)\n\n    # Check for absolute convergence\n    abs_series_value = taylor_series(abs(x), n_terms)\n    if abs_series_value == series_value:\n        ans = True\n    else:\n        ans = False\n\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "jianyu_xu/Stirling_number_second_kind_5.json",
    "question": "In how many ways can a set of 6 distinct letters be partitioned into 2 non-empty groups if each group must contain at least 2 letters?",
    "prediction": 40,
    "answer": 25,
    "rationale": "def solve():\n    from math import comb\n\n    # We have 6 distinct letters and we want to partition them into 2 non-empty groups.\n    # Each group must contain at least 2 letters.\n    # Let's consider the possible cases:\n    # Case 1: Group 1 has 2 letters and Group 2 has 4 letters.\n    # Case 2: Group 1 has 3 letters and Group 2 has 3 letters.\n    # Case 3: Group 1 has 4 letters and Group 2 has 2 letters.\n\n    # For Case 1:\n    ways_case1 = comb(6, 2) * comb(4, 4)\n\n    # For Case 2:\n    ways_case2 = comb(6, 3) * comb(3, 3) // 2  # We divide by 2 to avoid counting the same partition twice.\n\n    # For Case 3:\n    ways_case3 = comb(6, 4) * comb(2, 2)\n\n    # Total ways:\n    ans = ways_case1 + ways_case2 + ways_case3\n\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "tonyxia/particle5.json",
    "question": "The Relativistic Heavy Ion Collider (RHIC) at the Brookhaven National Laboratory collides gold ions onto other gold ions head on. The energy of the gold ions is 100 GeV per nucleon. What is the speed of the gold ions as a fraction of the speed of light?",
    "prediction": 0.9999559770619835,
    "answer": 0.99996,
    "rationale": "def solve():\n    import math\n\n    # Constants\n    energy_per_nucleon = 100 * 10**9  # 100 GeV in eV\n    mass_gold_nucleon = 1.6726219 * 10**(-27)  # mass of a nucleon in kg\n    speed_of_light = 2.998 * 10**8  # speed of light in m/s\n    eV_to_Joule = 1.60218 * 10**(-19)  # conversion factor from eV to Joule\n\n    # Convert energy to Joule\n    energy_per_nucleon_Joule = energy_per_nucleon * eV_to_Joule\n\n    # Calculate the relativistic mass\n    relativistic_mass = energy_per_nucleon_Joule / (speed_of_light**2)\n\n    # Calculate the Lorentz factor (gamma)\n    gamma = relativistic_mass / mass_gold_nucleon\n\n    # Calculate the speed of the gold ions as a fraction of the speed of light\n    speed_fraction = math.sqrt(1 - (1 / (gamma**2)))\n\n    return speed_fraction",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/econ_micro_7_2.json",
    "question": "Ms. Fogg is planning an around-the-world trip on which she plans to spend $10,000. The utility from the trip is a function of how much she actually spends on it (Y), given by U(Y) = ln Y. If there is a 25 percent probability that Ms. Fogg will lose $1,000 of her cash on the trip, what is the trip\u2019s expected utility?",
    "prediction": 9.184000243061726,
    "answer": 9.184,
    "rationale": "def solve():\n  import math\n\n  # Calculate the utility for each possible outcome\n  utility_if_no_loss = math.log(10000)\n  utility_if_loss = math.log(10000 - 1000)\n\n  # Calculate the expected utility\n  expected_utility = (0.75 * utility_if_no_loss) + (0.25 * utility_if_loss)\n\n  return expected_utility",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/greens-formula1.json",
    "question": "compute the integral \\int_{\\Gamma} \\frac{x*dy-y*dx}{x^2+y^2}, where $\\Gamma$ is any piecewise smooth, closed curve that encloses the origin but does not pass through it.",
    "prediction": 0,
    "answer": 6.2831852,
    "rationale": "import sympy as sp\ndef solve():\n    x, y = sp.symbols('x y')\n    P = -y / (x**2 + y**2)\n    Q = x / (x**2 + y**2)\n\n    # Compute the curl of F\n    curl_F = sp.diff(Q, x) - sp.diff(P, y)\n\n    # Check if the curl of F is zero\n    if curl_F.simplify() == 0:\n        ans = 0\n    else:\n        # Use Green's theorem to compute the integral\n        ans = sp.integrate(curl_F, (x, -sp.oo, sp.oo), (y, -sp.oo, sp.oo))\n\n    return ans\ndef solve():\n    r, theta = sp.symbols('r theta')\n    P_polar = -sp.sin(theta) / (r**2)\n    Q_polar = sp.cos(theta) / (r**2)\n\n    # Compute the curl of F in polar coordinates\n    curl_F_polar = sp.diff(Q_polar, r) - sp.diff(P_polar, theta)\n\n    # Check if the curl of F is zero\n    if curl_F_polar.simplify() == 0:\n        ans = 0\n    else:\n        # Use Green's theorem to compute the integral\n        ans = sp.integrate(curl_F_polar * r, (r, 0, sp.oo), (theta, 0, 2 * sp.pi))\n\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "panlu/kepler\u2019s_third_law2.json",
    "question": "Comet Halley moves in an elongated elliptical orbit around the sun (Fig. 13.20). Its distances from the sun at perihelion and aphelion are $8.75 \\times 10^7 km$ and $5.26 \\times 10^9 km$, respectively. The orbital period is X * 10^9 s. What is X?",
    "prediction": 2.3841897214014414,
    "answer": 2.38,
    "rationale": "def solve():\n    import math\n\n    # Constants\n    G = 6.67430e-11  # Gravitational constant, m^3 kg^-1 s^-2\n    M_sun = 1.989e30  # Mass of the sun, kg\n\n    # Convert distances from km to m\n    perihelion = 8.75e7 * 1000\n    aphelion = 5.26e9 * 1000\n\n    # Calculate semi-major axis (a) and semi-minor axis (b)\n    a = (perihelion + aphelion) / 2\n    b = math.sqrt(perihelion * aphelion)\n\n    # Calculate the orbital period using Kepler's Third Law\n    T = 2 * math.pi * math.sqrt(a**3 / (G * M_sun))\n\n    # Convert the period to X * 10^9 s\n    X = T / 1e9\n\n    return X",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "maxku/graphtheory11-shortestpath-hard.json",
    "question": "Let a undirected graph G with edges E = {<0,1>,<1,3>,<0,3>,<3,4>,<0,4>,<1,2>,<2,5>,<2,7>,<2,6>,<6,7>,<6,10>,<5,8>,<10,9>,<5,10>,<6,8>,<7,8>,<6,9>,<7,10>,<8,10>,<9,11>,<9,12>,<9,13>,<13,12>,<13,11>,<11,14>}, which <A,B> represent Node A is connected to Node B. What is the shortest path from node 1 to node 14? Represent the path as a list.",
    "prediction": [
      1,
      2,
      6,
      9,
      11,
      14
    ],
    "answer": [
      1,
      2,
      6,
      9,
      11,
      14
    ],
    "rationale": "def solve():\n    from collections import deque\n\n    def bfs_shortest_path(graph, start, end):\n        visited = set()\n        queue = deque([[start]])\n\n        while queue:\n            path = queue.popleft()\n            node = path[-1]\n\n            if node == end:\n                return path\n\n            if node not in visited:\n                visited.add(node)\n                for neighbor in graph[node]:\n                    new_path = list(path)\n                    new_path.append(neighbor)\n                    queue.append(new_path)\n\n    graph = {\n        0: [1, 3, 4],\n        1: [0, 2, 3],\n        2: [1, 5, 6, 7],\n        3: [0, 1, 4],\n        4: [0, 3],\n        5: [2, 8, 10],\n        6: [2, 7, 8, 9, 10],\n        7: [2, 6, 8, 10],\n        8: [5, 6, 7, 10],\n        9: [6, 10, 11, 12, 13],\n        10: [5, 6, 7, 8, 9],\n        11: [9, 13, 14],\n        12: [9, 13],\n        13: [9, 11, 12],\n        14: [11]\n    }\n\n    ans = bfs_shortest_path(graph, 1, 14)\n    return ans",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "wenhuchen/morera's_theorem1.json",
    "question": "H(z) = $\\int_0^1 e^{-z^2 t^2} dt$, what is H'(1)?",
    "prediction": -0.37894469162580435,
    "answer": -0.3789,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.integrate import quad\n    from scipy.misc import derivative\n\n    def H(z):\n        integrand = lambda t: np.exp(-z**2 * t**2)\n        result, _ = quad(integrand, 0, 1)\n        return result\n\n    ans = derivative(H, 1, dx=1e-6)\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/math_calculus_2_5.json",
    "question": "What is \\lim_{x \\to (\\pi)/2} (cos(x)cos(tan(x)))?",
    "prediction": -1.7416324340880466e-17,
    "answer": 0,
    "rationale": "def solve():\n  import math\n\n  x = math.pi / 2\n  ans = math.cos(x) * math.cos(math.tan(x))\n  return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "mingyin/gaussian-elimination2.json",
    "question": "V is a vector space over the real field R. It is known that the vector group u_1, u_2, u_3 in V are linearly independent. Finding the rank of vector group ${u_1-\\lambda u_2, u_2-\\lambda u_3, u_3-\\lambda u_1}$ for $\\lambda=\\sqrt{5}$ and $\\lambda=1$ separately. Return the answer as a list.",
    "prediction": [
      2,
      3
    ],
    "answer": [
      3,
      2
    ],
    "rationale": "def solve():\n    # Since u_1, u_2, u_3 are linearly independent, the rank of the vector group is 3.\n    # We need to find the rank of the vector group {u_1 - \u03bbu_2, u_2 - \u03bbu_3, u_3 - \u03bbu_1} for \u03bb = sqrt(5) and \u03bb = 1.\n\n    # Case 1: \u03bb = sqrt(5)\n    # Let's consider the linear combination of the given vectors:\n    # a(u_1 - sqrt(5)u_2) + b(u_2 - sqrt(5)u_3) + c(u_3 - sqrt(5)u_1) = 0\n    # Rearranging the terms, we get:\n    # (a - sqrt(5)c)u_1 + (-sqrt(5)a + b)u_2 + (-sqrt(5)b + c)u_3 = 0\n    # Since u_1, u_2, u_3 are linearly independent, the coefficients must be zero:\n    # a - sqrt(5)c = 0\n    # -sqrt(5)a + b = 0\n    # -sqrt(5)b + c = 0\n    # This system of equations has a non-trivial solution, so the rank is less than 3.\n    # Since the vectors are not scalar multiples of each other, the rank must be 2.\n    rank1 = 2\n\n    # Case 2: \u03bb = 1\n    # Let's consider the linear combination of the given vectors:\n    # a(u_1 - u_2) + b(u_2 - u_3) + c(u_3 - u_1) = 0\n    # Rearranging the terms, we get:\n    # (a - c)u_1 + (-a + b)u_2 + (-b + c)u_3 = 0\n    # Since u_1, u_2, u_3 are linearly independent, the coefficients must be zero:\n    # a - c = 0\n    # -a + b = 0\n    # -b + c = 0\n    # This system of equations has only the trivial solution (a = b = c = 0), so the rank is 3.\n    rank2 = 3\n\n    return [rank1, rank2]",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "xueguangma/physics_circuits_2.json",
    "question": "Consider the infinitely long chain of resistors shown below. What is the resistance between terminals a and b if R=1?",
    "prediction": -0.5615528128088303,
    "answer": 0.73,
    "rationale": "def solve():\n    import sympy as sp\n\n    # Let x be the equivalent resistance between terminals a and b\n    x = sp.Symbol('x')\n\n    # According to the question, we can write the equation as:\n    # x = R + (R * (R + x)) / (2 * R + R + x)\n    equation = x - (1 + (1 * (1 + x)) / (2 * 1 + 1 + x))\n\n    # Solve the equation for x\n    equivalent_resistance = sp.solve(equation, x)\n\n    return equivalent_resistance[0]",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/Birg_vieta2.json",
    "question": "Use the Birge-Vieta method to find a real root correct to three decimals of the following equation: x^5 - x + 1 = 0, p=-1.5.",
    "prediction": 0,
    "answer": -1,
    "rationale": "def solve():\n    def birge_vieta(p, coefficients):\n        b = [0] * len(coefficients)\n        c = [0] * len(coefficients)\n        b[0] = coefficients[0]\n        c[0] = coefficients[0]\n\n        for i in range(1, len(coefficients)):\n            b[i] = coefficients[i] + p * b[i - 1]\n            c[i] = b[i] + p * c[i - 1]\n\n        return b[-1], c[-1]\n\n    def find_root(p, coefficients, tol=1e-3, max_iter=100):\n        for _ in range(max_iter):\n            b, c = birge_vieta(p, coefficients)\n            if abs(b) < tol:\n                return p\n            p = p - b / c\n\n        return None\n\n    coefficients = [1, 0, 0, 0, -1, 1]\n    p = -1.5\n    ans = find_root(p, coefficients)\n    return round(ans, 3)",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/convexity1.json",
    "question": "For a\\geq 0, we define $S_a={x | dist(x, S) \\leq a}$, where $dist(x,S)=inf_{y\\in S}||x-y||$. Suppose S is convex. Is S_a convex? Return 1 for yes and 0 for no.",
    "prediction": 1,
    "answer": 1.0,
    "rationale": "def solve():\n    # Since S is convex, for any two points x, y in S, the line segment connecting x and y is also in S.\n    # Let x, y be two points in S_a, and let x', y' be their corresponding closest points in S.\n    # Then, dist(x, x') <= a and dist(y, y') <= a.\n    # Let z be any point on the line segment connecting x and y, and let t be the parameter such that z = (1-t)x + ty.\n    # We want to show that dist(z, S) <= a, which would imply that z is in S_a and S_a is convex.\n    # Let z' = (1-t)x' + ty', which is a point in S since S is convex.\n    # Using the triangle inequality, we have:\n    # dist(z, z') <= dist(z, x) + dist(x, x') + dist(x', z')\n    #             <= dist(z, x) + a + dist(z, y) + a\n    #             <= a + a = 2a\n    # Since dist(z, z') <= 2a, we have dist(z, S) <= 2a.\n    # However, we need to show that dist(z, S) <= a.\n    # Let's consider the function f(t) = dist((1-t)x + ty, S)^2.\n    # f(t) is a continuous function of t, and we know that f(0) = dist(x, S)^2 <= a^2 and f(1) = dist(y, S)^2 <= a^2.\n    # By the intermediate value theorem, there exists a t' such that f(t') = a^2.\n    # Let z'' be the point corresponding to t', i.e., z'' = (1-t')x + t'y.\n    # Then, dist(z'', S) = a, and we have:\n    # dist(z, z'') <= dist(z, x) + dist(x, x') + dist(x', z'') + dist(z'', y) + dist(y, y') + dist(y', z'')\n    #             <= dist(z, x) + a + a + dist(z, y) + a + a\n    #             <= 4a\n    # Since dist(z, z'') <= 4a, we have dist(z, S) <= 4a.\n    # We can repeat this process, each time finding a new point z''' such that dist(z, z''') <= (1/2)^n * 4a for some n.\n    # As n approaches infinity, (1/2)^n * 4a approaches 0, and we have dist(z, S) <= a.\n    # Therefore, S_a is convex.\n    return 1",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "panlu/volume_thermal_expansion1.json",
    "question": "A $200-cm^3$ glass flask is filled to the brim with mercury at 20\u00b0C How much mercury overflows when the temperature of the system is raised to 100\u00b0C. The coefficient of linear expansion of the glass is $0.40 \\times 10^{-5} K^{-1}. (Unit: cm^3)",
    "prediction": 0.06400000000002137,
    "answer": 2.7,
    "rationale": "def solve():\n  initial_volume = 200\n  initial_temperature = 20\n  final_temperature = 100\n  coefficient_of_expansion_glass = 0.40 * 10**(-5)\n\n  delta_temperature = final_temperature - initial_temperature\n  volume_expansion_ratio = 1 + coefficient_of_expansion_glass * delta_temperature\n\n  final_volume = initial_volume * volume_expansion_ratio\n  overflow_volume = final_volume - initial_volume\n\n  return overflow_volume",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/math_abstact_algebra_2.json",
    "question": "Every published book has a ten-digit ISBN-10 number that is usually of the form x_1 - x_2 x_3 x_4 - x_5 x_6 x_7 x_8 x_9 - x_{10} (where each x_i is a single digit). The first 9 digits identify the book. The last digit x_{10} is a check digit, it is chosen so that 10 x_1 + 9 x_2 + 8 x_3 + 7 x_4 + 6 x_5 + 5 x_6 + 4 x_7 + 3 x_8 + 2 x_9 + x_{10} = 0 (mod 11). Is 3-540-90518-9 a valid ISBN number?",
    "prediction": true,
    "answer": true,
    "rationale": "To check if 3-540-90518-9 is a valid ISBN-10 number, we need to plug in the digits into the given formula and see if the result is congruent to 0 modulo 11.\n\nThe digits are: x_1 = 3, x_2 = 5, x_3 = 4, x_4 = 0, x_5 = 9, x_6 = 0, x_7 = 5, x_8 = 1, x_9 = 8, and x_{10} = 9.\n\nNow, we plug these digits into the formula:\n\n10 * 3 + 9 * 5 + 8 * 4 + 7 * 0 + 6 * 9 + 5 * 0 + 4 * 5 + 3 * 1 + 2 * 8 + 9 = 30 + 45 + 32 + 0 + 54 + 0 + 20 + 3 + 16 + 9 = 209\n\nNow, we check if 209 is congruent to 0 modulo 11:\n\n209 % 11 = 0\n\nSince the result is 0, the given ISBN-10 number is valid. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "wenhuchen/infinite_series_sum3.json",
    "question": "Find the sum of $\\sum_{n=1}^{\\infty} \\frac{2}{n^2 + 4n + 3}$",
    "prediction": 0.8333191913120789,
    "answer": 0.8333,
    "rationale": "def solve():\n    import math\n\n    # We will use the partial sum of the series to approximate the sum\n    # We will stop when the difference between two consecutive partial sums is less than a small threshold\n    threshold = 1e-10\n    partial_sum = 0\n    n = 1\n    while True:\n        term = 2 / (n**2 + 4*n + 3)\n        partial_sum += term\n        if term < threshold:\n            break\n        n += 1\n\n    return partial_sum",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "jianyu_xu/Stirling_number_first_kind_5.json",
    "question": "In how many ways can 8 people be seated at 2 identical round tables? Each table must have at least 1 person seated.",
    "prediction": 26136,
    "answer": 13068,
    "rationale": "def solve():\n    from math import factorial\n\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    ans = 0\n    for i in range(1, 8):\n        ans += nCr(8, i) * (factorial(i - 1) * factorial(8 - i - 1))\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/cv-videoprocessing1-digital-video.json",
    "question": "A one-hour color video in YUV format has a frame resolution of 1920x1080 with a 4:2:2 color sub-sampling format, 8 bits for each component, and a frame rate of 30 frames/s. Determine the storage requirement for the video in Gbytes (3 sig. fig.).",
    "prediction": 1668.549,
    "answer": 417,
    "rationale": "def solve():\n  frame_resolution = 1920 * 1080\n  color_subsampling_ratio = 4 + 2 + 2\n  bits_per_component = 8\n  frame_rate = 30\n  video_duration_seconds = 60 * 60\n\n  bits_per_frame = frame_resolution * color_subsampling_ratio * bits_per_component\n  bits_per_second = bits_per_frame * frame_rate\n  bits_per_hour = bits_per_second * video_duration_seconds\n\n  bytes_per_hour = bits_per_hour / 8\n  Gbytes_per_hour = bytes_per_hour / (1024**3)\n\n  ans = round(Gbytes_per_hour, 3)\n  return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "xinyi/capacity_of_photographic_film.json",
    "question": "We are interested in the capacity of photographic film. The film consists of silver iodide crystals, Poisson distributed, with a density of 100 particles per unit area. The film is illuminated without knowledge of the position of the silver iodide particles. It is then developed and the receiver sees only the silver iodide particles that have been illuminated. It is assumed that light incident on a cell exposes the grain if it is there and otherwise results in a blank response. Silver iodide particles that are not illuminated and vacant portions of the film remain blank. We make the following assumptions: We grid the film very finely into cells of area $dA$. It is assumed that there is at most one silver iodide particle per cell and that no silver iodide particle is intersected by the cell boundaries. Thus, the film can be considered to be a large number of parallel binary asymmetric channels with crossover probability $1 - 100dA$. What is the capacity of a 0.1 unit area film?",
    "prediction": 0,
    "answer": 10.0,
    "rationale": "def solve():\n  import numpy as np\n\n  # Given values\n  density = 100\n  dA = 0.1\n\n  # Calculate the crossover probability\n  crossover_prob = 1 - density * dA\n\n  # Calculate the capacity using the formula: C = 1 - H(p)\n  capacity = 1 - (-crossover_prob * np.log2(crossover_prob) - (1 - crossover_prob) * np.log2(1 - crossover_prob))\n\n  return capacity",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/stoke's_theorem2.json",
    "question": "Use Stoke's Theorem to evaluate $\\int_C \\vec{F} \\cdot d \\vec{r}$ where $\\vec{F} = z^2 \\vec{i} + y^2 \\vec{j} + x \\vec{k}$ and $C$ is the triangle with vertices (1,0,0), (0,1,0) and (0,0,1) with counter-clockwise rotation.",
    "prediction": -0.2886751345948129,
    "answer": -0.166,
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the given vector field F\n    def F(x, y, z):\n        return np.array([z**2, y**2, x])\n\n    # Define the partial derivatives of F\n    def dFdx(x, y, z):\n        return np.array([0, 0, 1])\n\n    def dFdy(x, y, z):\n        return np.array([0, 2*y, 0])\n\n    def dFdz(x, y, z):\n        return np.array([2*z, 0, 0])\n\n    # Define the normal vector of the triangle\n    def normal_vector():\n        A = np.array([1, 0, 0])\n        B = np.array([0, 1, 0])\n        C = np.array([0, 0, 1])\n        AB = B - A\n        AC = C - A\n        return np.cross(AB, AC)\n\n    # Calculate the curl of F\n    def curl_F(x, y, z):\n        return np.array([dFdy(x, y, z)[2] - dFdz(x, y, z)[1],\n                         dFdz(x, y, z)[0] - dFdx(x, y, z)[2],\n                         dFdx(x, y, z)[1] - dFdy(x, y, z)[0]])\n\n    # Calculate the integral using Stoke's theorem\n    def stokes_integral():\n        n = normal_vector()\n        curl_F_at_center = curl_F(1/3, 1/3, 1/3)\n        area = 0.5 * np.linalg.norm(n)\n        return np.dot(curl_F_at_center, n) * area\n\n    ans = stokes_integral()\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/vieta's_formula3.json",
    "question": "Let $x_1$ and $x_2$ be the roots of the equation $x^2 + 3x + 1 =0$. Compute $(x_1/(x_2 + 1))^2 + (x_2 / (x_1 + 1))^2$.",
    "prediction": 18.0,
    "answer": 18.0,
    "rationale": "def solve():\n    import numpy as np\n\n    # Coefficients of the quadratic equation\n    coefficients = [1, 3, 1]\n\n    # Find the roots of the equation\n    x1, x2 = np.roots(coefficients)\n\n    # Compute the required expression\n    ans = (x1 / (x2 + 1))**2 + (x2 / (x1 + 1))**2\n\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/atom3.json",
    "question": "determine the ratio of the radius of a uranium-238 nucleus to the radius of a helium-4 nucleus.",
    "prediction": 3.9039626608898543,
    "answer": 3.9,
    "rationale": "def solve():\n    # The radius of a nucleus can be approximated using the formula R = R0 * A^(1/3)\n    # where R is the radius, R0 is a constant (1.2 fm), and A is the atomic mass number\n\n    R0 = 1.2  # fm (femtometers)\n\n    # Atomic mass numbers for uranium-238 and helium-4\n    A_uranium = 238\n    A_helium = 4\n\n    # Calculate the radii of uranium-238 and helium-4 nuclei\n    R_uranium = R0 * (A_uranium ** (1/3))\n    R_helium = R0 * (A_helium ** (1/3))\n\n    # Calculate the ratio of the radii\n    ratio = R_uranium / R_helium\n\n    return ratio",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/statisticalphysics6.json",
    "question": "Calculate the Fermi temperature for copper in eV.",
    "prediction": 81804.39886667697,
    "answer": 81600.0,
    "rationale": "def solve():\n    import numpy as np\n\n    hbar = 1.0545718e-34  # J s\n    m = 9.10938356e-31  # kg\n    kB = 8.617333262145e-5  # eV/K\n    n = 8.5e28  # m^-3\n\n    EF = hbar**2 * (3 * np.pi**2 * n)**(2/3) / (2 * m)  # J\n    EF_eV = EF / 1.602176634e-19  # eV\n\n    TF = EF_eV / kB\n\n    return TF",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/Wallis-theorem3.json",
    "question": "what is the value of $\\prod_{n=0}^{\\infty}(1+(\\frac{1}{2})^{2^n})$?",
    "prediction": 2.0,
    "answer": 2.0,
    "rationale": "def solve():\n    product = 1\n    n = 0\n    while True:\n        term = 1 + (1/2)**(2**n)\n        if term == 1:\n            break\n        product *= term\n        n += 1\n    return product",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/l'Hopital-rule1.json",
    "question": "For every positive real number $x$, let $g(x)=\\lim _{r \\rightarrow 0}((x+1)^{r+1}-x^{r+1})^{1/r}$. What is the limit of $g(x)/x$ as $x$ goes to infinity?",
    "prediction": 0,
    "answer": 2.7182818,
    "rationale": "def solve():\n    import sympy as sp\n\n    x, r = sp.symbols('x r')\n    g_x = ((x + 1)**(r + 1) - x**(r + 1))**(1/r)\n    g_x_over_x = g_x / x\n\n    limit_g_x_over_x = sp.limit(g_x_over_x, x, sp.oo)\n    \n    return limit_g_x_over_x",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/fourier3-FT.json",
    "question": "Is the Fourier transform of the signal $x_1(t)=\\left\\{\\begin{array}{cc}\\sin \\omega_0 t, & -\\frac{2 \\pi}{\\omega_0} \\leq t \\leq \\frac{2 \\pi}{\\omega_0} \\\\ 0, & \\text { otherwise }\\end{array}\\right.$ even?",
    "prediction": false,
    "answer": false,
    "rationale": "To determine if the Fourier transform of the signal $x_1(t)$ is even, we need to find the Fourier transform of the signal and check if it is symmetric with respect to the origin.\n\nThe Fourier transform of a signal $x(t)$ is given by:\n\n$$X(\\omega) = \\int_{-\\infty}^{\\infty} x(t) e^{-j\\omega t} dt$$\n\nFor the given signal $x_1(t)$, we have:\n\n$$X_1(\\omega) = \\int_{-\\frac{2\\pi}{\\omega_0}}^{\\frac{2\\pi}{\\omega_0}} \\sin(\\omega_0 t) e^{-j\\omega t} dt$$\n\nNow, we need to check if $X_1(\\omega)$ is even, i.e., if $X_1(\\omega) = X_1(-\\omega)$. \n\n$$X_1(-\\omega) = \\int_{-\\frac{2\\pi}{\\omega_0}}^{\\frac{2\\pi}{\\omega_0}} \\sin(\\omega_0 t) e^{j\\omega t} dt$$\n\nComparing $X_1(\\omega)$ and $X_1(-\\omega)$, we can see that they are not equal. Therefore, the Fourier transform of the signal $x_1(t)$ is not even.\n\nTherefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "wenhuchen/Graffe's_root1.json",
    "question": "Apply the Graeffe's root squaring method to find the roots of the following equation x^3 - 2x + 2 = 0 correct to two decimals. What's the sum of these roots?",
    "prediction": 0,
    "answer": 1,
    "rationale": "def solve():\n    import numpy as np\n\n    def graeffe_iteration(coefficients, iterations):\n        n = len(coefficients) - 1\n        b = np.zeros(n + 1)\n        c = np.zeros(n + 1)\n\n        for _ in range(iterations):\n            for i in range(n + 1):\n                b[i] = coefficients[i] ** 2\n                if i % 2 == 1:\n                    b[i] = -b[i]\n\n            for i in range(n + 1):\n                c[i] = 0\n                for j in range(i // 2, n + 1, 2):\n                    c[i] += b[j] * b[i - j]\n\n            coefficients = c\n\n        return coefficients\n\n    def find_roots(coefficients):\n        n = len(coefficients) - 1\n        roots = np.zeros(n)\n        for i in range(n):\n            roots[i] = coefficients[i + 1] / coefficients[i]\n        return roots\n\n    coefficients = np.array([1, 0, -2, 2])\n    iterations = 10\n    graeffe_coefficients = graeffe_iteration(coefficients, iterations)\n    roots = find_roots(graeffe_coefficients)\n    roots = np.sign(roots) * np.abs(roots) ** (1 / (2 ** iterations))\n\n    return round(sum(roots), 2)",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "elainewan/econ_micro_3.json",
    "question": "Does the utility function U(x,y) = xy/(x+y) has a convex indifference curve?",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if the indifference curve of the utility function U(x, y) = xy/(x+y) is convex, we need to check the second-order conditions for convexity. The Hessian matrix of the second-order partial derivatives should be negative semi-definite.\n\nFirst, let's find the first-order partial derivatives:\n\nU_x = dU/dx = y^2 / (x+y)^2\nU_y = dU/dy = x^2 / (x+y)^2\n\nNow, let's find the second-order partial derivatives:\n\nU_xx = d^2U/dx^2 = -2y^3 / (x+y)^3\nU_yy = d^2U/dy^2 = -2x^3 / (x+y)^3\nU_xy = d^2U/dxdy = 2xy / (x+y)^3\nU_yx = d^2U/dydx = 2xy / (x+y)^3\n\nThe Hessian matrix H is:\n\nH = | U_xx  U_xy |\n      | U_yx  U_yy |\n\nH = | -2y^3 / (x+y)^3   2xy / (x+y)^3 |\n      | 2xy / (x+y)^3   -2x^3 / (x+y)^3 |\n\nTo check if the Hessian matrix is negative semi-definite, we need to check if the determinant is non-negative and the leading principal minor (U_xx) is non-positive:\n\ndet(H) = U_xx * U_yy - U_xy * U_yx\ndet(H) = (-2y^3 / (x+y)^3) * (-2x^3 / (x+y)^3) - (2xy / (x+y)^3) * (2xy / (x+y)^3)\ndet(H) = 4x^3y^3 / (x+y)^6 - 4x^2y^2 / (x+y)^6\ndet(H) = 4x^2y^2(x+y) / (x+y)^6\n\nSince x and y are both positive, the determinant is non-negative.\n\nNow, let's check the leading principal minor:\n\nU_xx = -2y^3 / (x+y)^3\n\nSince y is positive, U_xx is non-positive.\n\nBoth conditions are satisfied, so the Hessian matrix is negative semi-definite. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "elainewan/math_algebra_3_6.json",
    "question": "Consider the basis B of R^2 consisting of vectors v_1 = [3,1] and v_2 = [-1, 3]. If x = [10, 10], find the B-coordinate vector of x",
    "prediction": [
      4.0,
      2.0
    ],
    "answer": [
      4,
      2
    ],
    "rationale": "def solve():\n    import numpy as np\n\n    B = np.array([[3, -1], [1, 3]])\n    x = np.array([10, 10])\n\n    B_inv = np.linalg.inv(B)\n    B_coordinate = np.dot(B_inv, x)\n\n    return B_coordinate.tolist()",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "jianyu_xu/Binomial_3.json",
    "question": "A basketball team has 12 players, including 5 guards and 7 forwards. How many different starting lineups can be formed that include 3 guards and 2 forwards?",
    "prediction": 210,
    "answer": 210,
    "rationale": "def solve():\n    import math\n\n    def nCr(n, r):\n        return math.factorial(n) // (math.factorial(r) * math.factorial(n - r))\n\n    guards = 5\n    forwards = 7\n    lineup_guards = 3\n    lineup_forwards = 2\n\n    ans = nCr(guards, lineup_guards) * nCr(forwards, lineup_forwards)\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "elainewan/math_algebra_2.json",
    "question": "Is the transformation [[-1, 0], [0, -1]] invertible?",
    "prediction": true,
    "answer": true,
    "rationale": "Yes, the transformation [[-1, 0], [0, -1]] is invertible. The determinant of the matrix is (-1)(-1) - (0)(0) = 1, which is nonzero. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "elainewan/math_algebra_3_4.json",
    "question": "Are the vectors [1, 2], [2, 3], and [3, 4] linearly independent?",
    "prediction": false,
    "answer": false,
    "rationale": "To determine if the vectors [1, 2], [2, 3], and [3, 4] are linearly independent, we can check if there is a non-trivial linear combination that results in the zero vector. In other words, we want to find if there exist constants c1, c2, and c3 such that:\n\nc1[1, 2] + c2[2, 3] + c3[3, 4] = [0, 0]\n\nThis can be written as a system of linear equations:\n\nc1 + 2c2 + 3c3 = 0\n2c1 + 3c2 + 4c3 = 0\n\nWe can solve this system of equations using various methods, such as substitution, elimination, or matrices. Let's use the elimination method:\n\nMultiply the first equation by 2 to match the coefficients of c1 in both equations:\n\n2(c1 + 2c2 + 3c3) = 2(0)\n2c1 + 4c2 + 6c3 = 0\n\nNow subtract the first equation from the second:\n\n(2c1 + 4c2 + 6c3) - (2c1 + 3c2 + 4c3) = 0\nc2 + 2c3 = 0\n\nNow we can express c2 in terms of c3:\n\nc2 = -2c3\n\nSubstitute this expression for c2 back into the first equation:\n\nc1 + 2(-2c3) + 3c3 = 0\nc1 - 4c3 + 3c3 = 0\nc1 - c3 = 0\n\nNow we can express c1 in terms of c3:\n\nc1 = c3\n\nSince we can express both c1 and c2 in terms of c3, there is a non-trivial linear combination that results in the zero vector (for example, when c3 = 1, c1 = 1 and c2 = -2). Therefore, the vectors [1, 2], [2, 3], and [3, 4] are not linearly independent.\n\nTherefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "wenhuchen/curvature1.json",
    "question": "Find the curvature for r(t) = 5cos(t)i + 4sin(t)j + 3tk, t=4\\pi/3.",
    "prediction": 0.13277618601990265,
    "answer": 0.16,
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the parameter value\n    t = 4 * np.pi / 3\n\n    # Define the r(t) function\n    def r(t):\n        return np.array([5 * np.cos(t), 4 * np.sin(t), 3 * t])\n\n    # Define the first derivative of r(t)\n    def r_prime(t):\n        return np.array([-5 * np.sin(t), 4 * np.cos(t), 3])\n\n    # Define the second derivative of r(t)\n    def r_double_prime(t):\n        return np.array([-5 * np.cos(t), -4 * np.sin(t), 0])\n\n    # Calculate the first and second derivatives at t\n    r_prime_t = r_prime(t)\n    r_double_prime_t = r_double_prime(t)\n\n    # Calculate the curvature\n    curvature = np.linalg.norm(np.cross(r_prime_t, r_double_prime_t)) / np.linalg.norm(r_prime_t)**3\n\n    return curvature",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "panlu/rhombus1.json",
    "question": "The diagonals of rhombus QRST intersect at P. If m\u2220QTS = 76, find m\u2220TSP.",
    "prediction": 38.0,
    "answer": 52,
    "rationale": "def solve():\n  # Given m\u2220QTS = 76\n  angle_QTS = 76\n\n  # In a rhombus, opposite angles are equal.\n  # Therefore, m\u2220QTS = m\u2220RSQ\n  angle_RSQ = angle_QTS\n\n  # The diagonals of a rhombus bisect the angles.\n  # So, m\u2220TSP = m\u2220RSQ / 2\n  angle_TSP = angle_RSQ / 2\n\n  return angle_TSP",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/hoeffding's_inequalities.json",
    "question": "Suppose there are 10 independent random variables $X_1, X_2, \\cdots, X_10$. Each of the $X_i$ lies within the range of [10, 11] with a mean value of 10.5. If we take the mean of the 10 random variables as $\\hat{X_n}$. What is the upper bound of the probability that $\\hat{X_n}$ is either smaller than 10.2 or larger than 10.8?",
    "prediction": 0.00014780231033451052,
    "answer": 0.3305,
    "rationale": "from scipy.stats import norm\ndef solve():\n    n = 10\n    mu = 10.5\n    sigma = (11 - 10) / 4  # Assuming a small variance\n\n    # Calculate the CDF for 10.2 and 10.8\n    cdf_10_2 = norm.cdf(10.2, loc=mu, scale=sigma / (n ** 0.5))\n    cdf_10_8 = norm.cdf(10.8, loc=mu, scale=sigma / (n ** 0.5))\n\n    # Calculate the upper bound of the probability\n    ans = 1 - (cdf_10_8 - cdf_10_2)\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/Aiken's_theorem.json",
    "question": "The root of the equation x = (1 / 2) + sin x by using the iteration method: x_{k+1} = 1/2 + sin(x_k), x_0 = 1 correct to o six decimals is x = 1.497300. Determine the number of iteration steps required to reach the root by linear iteration. If the Aitken \u22062-process is used after three approximations are available, how many iterations are required?",
    "prediction": [
      7,
      6
    ],
    "answer": 3,
    "rationale": "def solve():\n    import math\n\n    def linear_iteration(x0, tol=1e-6):\n        x = x0\n        count = 0\n        while True:\n            x_new = 0.5 + math.sin(x)\n            count += 1\n            if abs(x_new - x) < tol:\n                break\n            x = x_new\n        return count\n\n    def aitken_delta2(x0, tol=1e-6):\n        x = [x0]\n        count = 0\n        while True:\n            x_new = 0.5 + math.sin(x[-1])\n            x.append(x_new)\n            count += 1\n            if count >= 3:\n                x_aitken = x[-3] - ((x[-2] - x[-3])**2) / (x[-1] - 2 * x[-2] + x[-3])\n                if abs(x_aitken - x[-1]) < tol:\n                    break\n        return count\n\n    linear_iter_count = linear_iteration(1)\n    aitken_iter_count = aitken_delta2(1)\n\n    return [linear_iter_count, aitken_iter_count]",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/signalprocessing3-Ztransform.json",
    "question": "The equation of a digital filter is given by $y(n)=1 / 3(x(n)+x(n-1)+x(n-2))$, where $y(n)$ and $x(n)$ are, respectively, the nth samples of the output and input signals. Determine the pole(s) of the filter.",
    "prediction": [],
    "answer": 0,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.signal import tf2zpk\n\n    # Transfer function coefficients\n    b = [1/3, 1/3, 1/3]  # Numerator coefficients\n    a = [1]  # Denominator coefficients\n\n    # Find the poles and zeros of the transfer function\n    z, p, k = tf2zpk(b, a)\n\n    # Return the poles\n    return p.tolist()",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/cauchy_integral1.json",
    "question": "Evaluate $\\int_c z^2 / (z - 5) dz$, where c is the circle that $|z| = 2$.",
    "prediction": 0,
    "answer": 0,
    "rationale": "def solve():\n  # Since the function is analytic inside and on the circle |z| = 2, the integral is 0\n  ans = 0\n  return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "mingyin/value-iteration1.json",
    "question": "./mingyin/mdp.png shows a rectangular gridworld representation of a simple finite MDP. The cells of the grid correspond to the states of the environment. At each cell, four actions are possible: north, south, east, and west, which deterministically cause the agent to move one cell in the respective direction on the grid. Actions that would take the agent off the grid leave its location unchanged, but also result in a reward of $-1$. Other actions result in a reward of $0$, except those move the agent out of the special states A and B. From state A, all four actions yield a reward of +10 and take the agent to A'. From state B, all actions yield a reward of +5 and take the agent to B'. Suppose the discount gamma=0.9. The state-value function of a policy $\\pi$ is defined as the expected cumulative reward of $\\pi$ given the current state. What is the state-value of state A if the policy is random (choose all four directions with equal probabilities)? What is the state-value of state A under the optimal policy? Return the answer of the two questions using a list.",
    "prediction": [
      8.789637004569903,
      24.419349240653027
    ],
    "answer": [
      8.8,
      24.4
    ],
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the gridworld dimensions and special states\n    rows = 5\n    cols = 5\n    A = (0, 1)\n    A_prime = (4, 1)\n    B = (0, 3)\n    B_prime = (2, 3)\n    gamma = 0.9\n\n    # Define the actions and their corresponding movements\n    actions = ['N', 'S', 'E', 'W']\n    action_moves = {'N': (-1, 0), 'S': (1, 0), 'E': (0, 1), 'W': (0, -1)}\n\n    def next_state_reward(state, action):\n        x, y = state\n        dx, dy = action_moves[action]\n        next_state = (x + dx, y + dy)\n\n        if state == A:\n            return A_prime, 10\n        elif state == B:\n            return B_prime, 5\n        elif 0 <= next_state[0] < rows and 0 <= next_state[1] < cols:\n            return next_state, 0\n        else:\n            return state, -1\n\n    def random_policy_evaluation():\n        V = np.zeros((rows, cols))\n        while True:\n            delta = 0\n            for x in range(rows):\n                for y in range(cols):\n                    state = (x, y)\n                    v = 0\n                    for action in actions:\n                        next_state, reward = next_state_reward(state, action)\n                        v += 0.25 * (reward + gamma * V[next_state])\n                    delta = max(delta, abs(V[state] - v))\n                    V[state] = v\n            if delta < 1e-4:\n                break\n        return V[A]\n\n    def optimal_policy_evaluation():\n        V = np.zeros((rows, cols))\n        while True:\n            delta = 0\n            for x in range(rows):\n                for y in range(cols):\n                    state = (x, y)\n                    v_values = []\n                    for action in actions:\n                        next_state, reward = next_state_reward(state, action)\n                        v_values.append(reward + gamma * V[next_state])\n                    v = max(v_values)\n                    delta = max(delta, abs(V[state] - v))\n                    V[state] = v\n            if delta < 1e-4:\n                break\n        return V[A]\n\n    random_policy_value = random_policy_evaluation()\n    optimal_policy_value = optimal_policy_evaluation()\n\n    return [random_policy_value, optimal_policy_value]",
    "answer_type": "list of float",
    "correct": true
  },
  {
    "id": "maxku/ipnetwork11b-tcp.json",
    "question": "Consider a file with a size of 350 Kbytes storing in a web server. Client A sends a request to the server to retrieve the file from a remote location. It is known that the link capacity between client A and the server is 10 Mbps and the round trip time (RTT) between the server and client is fixed at 20ms. Assume that the segment size is 20 Kbytes and the client has a receiver buffer of 200Kbytes. Assume that the window size (W) is adjusted according to the congestion control procedures of TCP-Reno. How long (in ms) does client A take to receive the whole file from the server after sending a request? Given that the initial slow-start threshold is 32.",
    "prediction": 601.875,
    "answer": 344,
    "rationale": "def solve():\n    file_size = 350 * 1024 * 8  # in bits\n    link_capacity = 10 * 10**6  # in bps\n    rtt = 20  # in ms\n    segment_size = 20 * 1024 * 8  # in bits\n    receiver_buffer = 200 * 1024 * 8  # in bits\n    slow_start_threshold = 32\n\n    # Calculate the number of segments\n    num_segments = file_size / segment_size\n\n    # Calculate the time taken for slow start phase\n    slow_start_time = rtt * (slow_start_threshold - 1)\n\n    # Calculate the time taken for congestion avoidance phase\n    remaining_segments = num_segments - slow_start_threshold\n    congestion_avoidance_time = rtt * (remaining_segments / (slow_start_threshold / 2))\n\n    # Calculate the total time taken\n    total_time = slow_start_time + congestion_avoidance_time\n\n    return total_time",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "tonyxia/maxplanar1.json",
    "question": "What's the maximum number of edges in a simple planar graph with 30 vertices?",
    "prediction": 84,
    "answer": 84,
    "rationale": "def solve():\n  n = 30\n  max_edges = 3 * n - 6\n  return max_edges",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "panlu/uniform_circular_motion2.json",
    "question": "Passengers on a carnival ride move at constant speed in a horizontal circle of radius 5.0 m, making a complete circle in 4.0 s. What is their acceleration? (Unit: m/s^2))",
    "prediction": 12.337005501361698,
    "answer": 12,
    "rationale": "def solve():\n  import math\n\n  radius = 5.0\n  time = 4.0\n\n  # Calculate the angular velocity (omega)\n  omega = 2 * math.pi / time\n\n  # Calculate the acceleration (a = r * omega^2)\n  acceleration = radius * omega**2\n\n  return acceleration",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "elainewan/math_calculus_6.json",
    "question": "Find the area of the region between the graphs of the functions f(x) = x^2 - 4x + 10, g(x) = 4x - x^2, 1 <= x <= 3.",
    "prediction": -5.333333333333334,
    "answer": 5.333,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.integrate import quad\n\n    # Define the functions\n    def f(x):\n        return x**2 - 4*x + 10\n\n    def g(x):\n        return 4*x - x**2\n\n    # Define the difference between the functions\n    def h(x):\n        return g(x) - f(x)\n\n    # Integrate the difference between the functions over the given interval\n    area, _ = quad(h, 1, 3)\n\n    return area",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/graphtheory10-shortestpath.json",
    "question": "Let a undirected graph G with edges E = {<1,2>,<2,4>,<5,4>,<5,6>}, which <A,B> represent Node A is connected to Node B. What is the shortest path from node 1 to node 6? Represent the path as a list.",
    "prediction": [
      1,
      2,
      4,
      5,
      6
    ],
    "answer": [
      1,
      2,
      4,
      5,
      6
    ],
    "rationale": "def solve():\n    from collections import defaultdict\n\n    # Define the graph\n    graph = defaultdict(list)\n    graph[1] = [2]\n    graph[2] = [1, 4]\n    graph[4] = [2, 5]\n    graph[5] = [4, 6]\n    graph[6] = [5]\n\n    # Function to find the shortest path\n    def bfs_shortest_path(graph, start, goal):\n        explored = []\n        queue = [[start]]\n\n        if start == goal:\n            return [start]\n\n        while queue:\n            path = queue.pop(0)\n            node = path[-1]\n\n            if node not in explored:\n                neighbours = graph[node]\n\n                for neighbour in neighbours:\n                    new_path = list(path)\n                    new_path.append(neighbour)\n                    queue.append(new_path)\n\n                    if neighbour == goal:\n                        return new_path\n\n                explored.append(node)\n\n        return None\n\n    ans = bfs_shortest_path(graph, 1, 6)\n    return ans",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "tonyxia/nuclear5.json",
    "question": "The spontaneous fission activity rate of U-238 is 6.7 fissions/kg s. A sample of shale contains 0.055% U-238 by weight. Calculate the number of spontaneous fissions in one day in a 106-kg pile of the shale by determining the mass of U-238 present in kg.",
    "prediction": 33748.704000000005,
    "answer": 550.0,
    "rationale": "def solve():\n  # Constants\n  U_238_activity_rate = 6.7  # fissions/kg s\n  U_238_percentage = 0.055 / 100  # U-238 by weight\n  shale_mass = 106  # kg\n  seconds_in_a_day = 24 * 60 * 60  # seconds\n\n  # Calculate the mass of U-238 present in kg\n  U_238_mass = shale_mass * U_238_percentage\n\n  # Calculate the number of spontaneous fissions in one day\n  fissions_per_day = U_238_mass * U_238_activity_rate * seconds_in_a_day\n\n  return fissions_per_day",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xueguangma/physics_current_and_resistance.json",
    "question": "Consider a resistor made from a hollow cylinder of carbon as shown below. The inner radius of the cylinder is $R_i=0.2$mm and the outer radius is $R_o=0.3$mm. The length of the resistor is $L=0.9$mm. The resistivity of the carbon is $\\rho=3.5 * 10^{-5} \\Omega \\cdot m$. What is the resistance in $\\Omega \\cdot m$?",
    "prediction": 0.20053522829578818,
    "answer": 2.5,
    "rationale": "def solve():\n  import math\n\n  # Constants\n  Ri = 0.2 / 1000  # inner radius in meters\n  Ro = 0.3 / 1000  # outer radius in meters\n  L = 0.9 / 1000  # length in meters\n  rho = 3.5e-5  # resistivity in ohm meters\n\n  # Calculate the resistance\n  resistance = (rho * L) / (math.pi * (Ro**2 - Ri**2))\n\n  return resistance",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "panlu/rigid-body1.json",
    "question": "Sir Lancelot, who weighs 800 N, is assaulting a castle by climbing a uniform ladder that is 5.0 m long and weighs 180 N. The bottom of the ladder rests on a ledge and leans across the moat in equilibrium against a frictionless, vertical castle wall. The ladder makes an angle of with the horizontal. Lancelot pauses onethird of the way up the ladder.  Find the magnitude of the contact force on the base of the ladder. (Unit: N)",
    "prediction": 617.7647880328994,
    "answer": 1020,
    "rationale": "def solve():\n  import math\n\n  # Constants\n  weight_lancelot = 800  # N\n  weight_ladder = 180  # N\n  length_ladder = 5.0  # m\n  angle = math.radians(60)  # radians\n\n  # Lancelot's position on the ladder\n  position_lancelot = length_ladder / 3\n\n  # Torque equilibrium equation\n  # torque_ladder + torque_lancelot = 0\n  # (weight_ladder * length_ladder / 2) * sin(angle) + (weight_lancelot * position_lancelot) * sin(angle) = contact_force * length_ladder * cos(angle)\n\n  # Solving for contact_force\n  contact_force = ((weight_ladder * length_ladder / 2) * math.sin(angle) + (weight_lancelot * position_lancelot) * math.sin(angle)) / (length_ladder * math.cos(angle))\n\n  return contact_force",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/poincare-theorem1.json",
    "question": "In complex analysis, define U^n={(z_1, \\cdots, z_n): |z_j|<1, j=1, \\cdots, n} and B_n={(z_1, \\cdots, z_n): \\sum_{j=1}^n |z_j|^2<1 }. Are they conformally equivalent in C^n? Here C^n is the d-dimensional complex space. Return 1 for yes and 0 for no.",
    "prediction": 1,
    "answer": 0.0,
    "rationale": "def solve():\n    # In complex analysis, two domains are conformally equivalent if there exists a bijective holomorphic function between them.\n    # In this case, we have U^n and B_n defined as follows:\n    # U^n = {(z_1, ..., z_n): |z_j| < 1, j = 1, ..., n}\n    # B_n = {(z_1, ..., z_n): sum(|z_j|^2) < 1, j = 1, ..., n}\n    #\n    # We can consider the function f: U^n -> B_n defined by\n    # f(z_1, ..., z_n) = (z_1 / (1 - |z_1|^2), ..., z_n / (1 - |z_n|^2))\n    #\n    # This function is bijective and holomorphic, so U^n and B_n are conformally equivalent in C^n.\n    return 1",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/wave2.json",
    "question": "Calculate the de Broglie Wavelength of a tennis ball of mass 57 g traveling 25 m/s in meters.",
    "prediction": 4.649873789473684e-34,
    "answer": 4.7e-34,
    "rationale": "def solve():\n    # Constants\n    h = 6.62607015e-34  # Planck's constant (Joule * seconds)\n    mass = 57 / 1000  # mass of tennis ball in kg\n    velocity = 25  # velocity of tennis ball in m/s\n\n    # Calculate de Broglie wavelength\n    wavelength = h / (mass * velocity)\n\n    return wavelength",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/Wallis-theorem1.json",
    "question": "suppose sequence x_n satisfies x_n*x_{n+1}=n for all n>=1, and $\\lim_{n\\rightarrow\\infty}\\frac{x_n}{x_{n+1}}=1$. What's the value of $\\pi*x_1^2$?",
    "prediction": 0,
    "answer": 2.0,
    "rationale": "",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/number-theory1.json",
    "question": "Find all positive integers $n<2^{250}$ for which simultaneously $n$ divides $2^n$, $n-1$ divides $2^n-1$, and $n-2$ divides $2^n - 2$. Return all positive integers as an ascending list.",
    "prediction": 0,
    "answer": [
      4,
      16,
      65536
    ],
    "rationale": "def solve():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    ans = []\n    for n in range(1, 2**250):\n        if (2**n) % n == 0 and (2**n - 1) % (n - 1) == 0 and (2**n - 2) % (n - 2) == 0:\n            ans.append(n)\n    return ans",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "wenhuchen/divergence1.json",
    "question": "Use divergence therem to evaluate $\\iint_S \\vec{F} \\cdot d \\vec{S}$ where $\\vec{F} = xy \\vec{i} - \\frac{1}{2}y^2\\vec{j} + z\\vec{k}$ and the surface $S$ consists of the three surfaces, $z=4 - 3*x^2 - 3y^2, 1 \\le z \\le 1$ on the sides and $z=0$ on the bottom.",
    "prediction": 8.27935486260011,
    "answer": 7.853,
    "rationale": "def solve():\n    from sympy import symbols, integrate\n\n    x, y, z = symbols('x y z')\n    Fx = x * y\n    Fy = -1/2 * y**2\n    Fz = z\n\n    # Calculate the divergence of F\n    div_F = Fx.diff(x) + Fy.diff(y) + Fz.diff(z)\n\n    # Surface z = 4 - 3*x**2 - 3*y**2\n    z1 = 4 - 3*x**2 - 3*y**2\n\n    # Surface z = 1\n    z2 = 1\n\n    # Surface z = 0\n    z3 = 0\n\n    # Integrate the divergence of F over the volume enclosed by the surfaces\n    ans = integrate(integrate(integrate(div_F, (z, z3, z1)), (y, -((4 - 3*x**2)/3)**0.5, ((4 - 3*x**2)/3)**0.5)), (x, -1, 1))\n\n    return ans.evalf()",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xinyi/message_passing_algorithm.json",
    "question": "The marginal distribution for the variables $x_s$ in a factor $f_s(x_s)$ in a tree-structured factor graph, after running the sum-product message passing algorithm, can be written as the product of the message arriving at the factor node along all its links, times the local factor $f_s(x_s)$. True or false?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "tonyxia/totient1.json",
    "question": "What is 3^(3^(3^(...))) mod 100? There are 2012 3's in the expression.",
    "prediction": 87,
    "answer": 87,
    "rationale": "def solve():\n    # We can use Euler's theorem to solve this problem\n    # Euler's theorem states that a^(phi(n)) \u2261 1 (mod n) for any integer a and n that are relatively prime\n    # In this case, a = 3 and n = 100\n    # First, we need to find the Euler's totient function (phi) for n = 100\n\n    def phi(n):\n        result = n\n        p = 2\n        while p * p <= n:\n            if n % p == 0:\n                while n % p == 0:\n                    n //= p\n                result -= result // p\n            p += 1\n        if n > 1:\n            result -= result // n\n        return result\n\n    # Now, we can find the value of the expression 3^(3^(3^(...))) mod 100\n    # We can use the property a^(b mod phi(n)) \u2261 a^b (mod n) if a and n are relatively prime\n    # In this case, a = 3 and n = 100 are relatively prime, so we can use this property\n\n    n = 100\n    phi_n = phi(n)\n    exp = 3\n    for _ in range(2011):\n        exp = pow(3, exp, phi_n)\n\n    ans = pow(3, exp, n)\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "jianyu_xu/Catalan_2.json",
    "question": "How many paths are there from the origin (0,0) to the point (10,10) on a grid such that the path only moves up or right and does not cross the diagonal line y = x?",
    "prediction": 0,
    "answer": 16796,
    "rationale": "def solve():\n    from math import comb\n\n    # The total number of paths from (0,0) to (10,10) without any restrictions is C(20, 10)\n    total_paths = comb(20, 10)\n\n    # We need to subtract the paths that cross the diagonal line y = x\n    # For each crossing point (i, i), we can calculate the number of paths that cross it\n    # The number of paths from (0,0) to (i-1, i) is C(2i-2, i-1)\n    # The number of paths from (i, i+1) to (10,10) is C(18-2i, 9-i)\n    # So the number of paths that cross the point (i, i) is C(2i-2, i-1) * C(18-2i, 9-i)\n    crossing_paths = sum(comb(2 * i - 2, i - 1) * comb(18 - 2 * i, 9 - i) for i in range(1, 11))\n\n    ans = total_paths - crossing_paths\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/liouville-theorem1.json",
    "question": "For the following functions, which are bounded entire functions? 1. f(x)=0; 2. f(x)= 1+i; 3. f(x)=sin(x); 4. f(x)=min{|cos(x)|,1}. Here i=\\sqrt{-1} and $|\\cdot|$ is the norm of a complex number. Return the numbers of the answers as a list.",
    "prediction": [
      1,
      2,
      3,
      4
    ],
    "answer": [
      1,
      2
    ],
    "rationale": "def solve():\n    import numpy as np\n\n    # Function 1: f(x) = 0\n    def f1(x):\n        return 0\n\n    # Function 2: f(x) = 1 + i\n    def f2(x):\n        return 1 + 1j\n\n    # Function 3: f(x) = sin(x)\n    def f3(x):\n        return np.sin(x)\n\n    # Function 4: f(x) = min{|cos(x)|, 1}\n    def f4(x):\n        return min(abs(np.cos(x)), 1)\n\n    # Check if the functions are bounded entire functions\n    bounded_entire_functions = []\n\n    # Function 1: f(x) = 0\n    if np.all(np.isfinite([f1(x) for x in np.linspace(-100, 100, 1000)])):\n        bounded_entire_functions.append(1)\n\n    # Function 2: f(x) = 1 + i\n    if np.all(np.isfinite([f2(x) for x in np.linspace(-100, 100, 1000)])):\n        bounded_entire_functions.append(2)\n\n    # Function 3: f(x) = sin(x)\n    if np.all(np.isfinite([f3(x) for x in np.linspace(-100, 100, 1000)])):\n        bounded_entire_functions.append(3)\n\n    # Function 4: f(x) = min{|cos(x)|, 1}\n    if np.all(np.isfinite([f4(x) for x in np.linspace(-100, 100, 1000)])):\n        bounded_entire_functions.append(4)\n\n    return bounded_entire_functions",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "wenhuchen/viterbi3.json",
    "question": "Assuming we are underground, and the only thing we can observe is whether a person brings an umbrella or not. The weather could be either rainy or sunny. Assuming the P(rain)=0.6 and P(sunny)=0.4. Assuming the weather on day $k$ is dependent on the weather on day $k-1$. We can write the transition probability as P(sunny $\\mid$ sunny) = P(rain $\\mid$ rain) = 0.7. The person has 60\\% chance to bring an umbrella when the weather is rainy, and 40\\% chance to bring an umbrella when the weather is sunny, i.e. P(umbrella $\\mid$ rain) = 0.6 and P(umbrella $\\mid$ sunny) = 0.4. If we observe that the person (1) brought an umbrella on day 1, (2) did not bring an umbrella on day 2, (3) brought an umbrella on day 3, (4) did not bring an umbrella on day 4.  What are the most likely weather from day 1 to day 4? Return the answer as a list of binary values, where 1 represents rain and 0 represents sunny.",
    "prediction": [
      0,
      0,
      0,
      0
    ],
    "answer": [
      1,
      1,
      1,
      1
    ],
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the transition matrix and emission matrix\n    transition_matrix = np.array([[0.7, 0.3], [0.3, 0.7]])\n    emission_matrix = np.array([[0.6, 0.4], [0.4, 0.6]])\n\n    # Define the initial probabilities\n    initial_probabilities = np.array([0.6, 0.4])\n\n    # Define the observations\n    observations = [1, 0, 1, 0]\n\n    # Initialize the Viterbi algorithm\n    n_states = 2\n    n_observations = len(observations)\n    viterbi = np.zeros((n_states, n_observations))\n    backpointers = np.zeros((n_states, n_observations), dtype=int)\n\n    # Initialize the first column of the Viterbi matrix\n    viterbi[:, 0] = initial_probabilities * emission_matrix[:, observations[0]]\n\n    # Iterate through the observations\n    for t in range(1, n_observations):\n        for s in range(n_states):\n            viterbi[s, t] = np.max(viterbi[:, t - 1] * transition_matrix[:, s] * emission_matrix[s, observations[t]])\n            backpointers[s, t] = np.argmax(viterbi[:, t - 1] * transition_matrix[:, s])\n\n    # Traceback the most likely path\n    most_likely_path = np.zeros(n_observations, dtype=int)\n    most_likely_path[-1] = np.argmax(viterbi[:, -1])\n\n    for t in range(n_observations - 2, -1, -1):\n        most_likely_path[t] = backpointers[most_likely_path[t + 1], t + 1]\n\n    return most_likely_path.tolist()",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "xueguangma/sunk_costs.json",
    "question": "A young couple has made a non-refundable deposit of the first month's rent (equal to $1, 000) on a 6-month apartment lease. The next day they find a different apartment that they like just as well, but its monthly rent is only $900. They plan to be in the apartment only 6 months. Should they switch to the new apartment?",
    "prediction": [
      6000,
      5400
    ],
    "answer": 0.0,
    "rationale": "def solve():\n    initial_deposit = 1000\n    rent_1 = 1000\n    rent_2 = 900\n    lease_duration = 6\n\n    cost_1 = initial_deposit + rent_1 * (lease_duration - 1)\n    cost_2 = rent_2 * lease_duration\n\n    return cost_1, cost_2",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "jianyu_xu/Multinomial_1.json",
    "question": "A group of 10 people is split into 3 different committees of 3, 4, and 3 people, respectively. In how many ways can this be done?",
    "prediction": 4200,
    "answer": 4200,
    "rationale": "def solve():\n  from math import comb\n\n  # There are 10 people, and we need to split them into groups of 3, 4, and 3.\n  # We can use the combination formula to find the number of ways to do this.\n  # C(n, k) = n! / (k! * (n - k)!)\n\n  # First, we choose 3 people out of 10 for the first committee.\n  ways_first_committee = comb(10, 3)\n\n  # Then, we choose 4 people out of the remaining 7 for the second committee.\n  ways_second_committee = comb(7, 4)\n\n  # Finally, the remaining 3 people will form the third committee.\n  # There's only 1 way to do this, so we don't need to calculate it.\n\n  # The total number of ways to split the group is the product of the ways to form each committee.\n  ans = ways_first_committee * ways_second_committee\n\n  return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "maxku/ipnetwork6-mac.json",
    "question": "A network with one primary and four secondary stations uses polling. The size of a data frame is 1000 bytes. The size of the poll, ACK, and NAK frames are 32 bytes each. Each station has 5 frames to send. How many total bytes are exchanged if each station can send only one frame in response to a poll?",
    "prediction": 21280,
    "answer": 21536,
    "rationale": "def solve():\n    primary_station = 1\n    secondary_stations = 4\n    data_frame_size = 1000\n    poll_frame_size = 32\n    ack_frame_size = 32\n    nak_frame_size = 32\n    frames_to_send = 5\n\n    # Each station can send only one frame in response to a poll\n    total_polls = primary_station * frames_to_send * secondary_stations\n    total_data_frames = secondary_stations * frames_to_send\n    total_ack_frames = total_data_frames\n\n    # Calculate total bytes exchanged\n    total_bytes = (total_polls * poll_frame_size) + (total_data_frames * data_frame_size) + (total_ack_frames * ack_frame_size)\n\n    return total_bytes",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "jianyu_xu/Chinese_Remainder_Theorem_4.json",
    "question": "Find the smallest positive integer that leaves a remainder of 1 when divided by 4, a remainder of 2 when divided by 3, and a remainder of 5 when divided by 7.",
    "prediction": 0,
    "answer": 17,
    "rationale": "def solve():\n    num = 1\n    while True:\n        if num % 4 == 1 and num % 3 == 2 and num % 7 == 5:\n            return num",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "xueguangma/sylow_theorem.json",
    "question": "Every group of order $5\\cdot7\\cdot47=1645 is abelian, and cyclic. Is this true? Answer true or false.",
    "prediction": false,
    "answer": true,
    "rationale": "To determine if a group of order 1645 is abelian and cyclic, we can use the following facts:\n\n1. A group of order p, where p is a prime number, is always cyclic and abelian.\n2. A group of order pq, where p and q are distinct prime numbers, is always abelian if and only if p divides q-1 or q divides p-1.\n\nNow, let's analyze the given group of order 1645:\n\nThe prime factorization of 1645 is 5 \u00d7 7 \u00d7 47. Since all the prime factors are distinct, we can apply the second fact mentioned above.\n\n5 divides (7-1) = 6, but 5 does not divide (47-1) = 46.\n7 does not divide (5-1) = 4, and 7 does not divide (47-1) = 46.\n47 does not divide (5-1) = 4, and 47 does not divide (7-1) = 6.\n\nSince none of the prime factors satisfy the condition mentioned in the second fact, the group of order 1645 is not abelian. Therefore, it cannot be cyclic either.\n\nTherefore, the answer is False.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "maxku/signalprocessing11-nyquist.json",
    "question": "Consider $x(t)$ to be given as, $$ x(t)=\\cos (1000 \\pi t) $$ . Let the sampling frequency be $2000 \\mathrm{~Hz}$. Does aliasing occur?",
    "prediction": false,
    "answer": false,
    "rationale": "To determine if aliasing occurs, we need to compare the signal frequency with the Nyquist frequency. The Nyquist frequency is half of the sampling frequency. In this case, the sampling frequency is 2000 Hz, so the Nyquist frequency is 1000 Hz.\n\nThe signal frequency can be found from the given function x(t) = cos(1000\u03c0t). The angular frequency \u03c9 is equal to 1000\u03c0, so the signal frequency f can be calculated as:\n\nf = \u03c9 / (2\u03c0) = (1000\u03c0) / (2\u03c0) = 500 Hz\n\nNow, we compare the signal frequency with the Nyquist frequency:\n\nSignal frequency (500 Hz) \u2264 Nyquist frequency (1000 Hz)\n\nSince the signal frequency is less than or equal to the Nyquist frequency, aliasing does not occur. Therefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "xinyi/dag_3.json",
    "question": "How many distinct directed trees can be constructed from a undirected tree with 100 nodes?",
    "prediction": 633825300114114700748351602688,
    "answer": 100,
    "rationale": "def solve():\n    # In an undirected tree with n nodes, there are n-1 edges.\n    # For each edge, we can choose one of the two directions.\n    # Therefore, there are 2^(n-1) distinct directed trees that can be constructed from an undirected tree with n nodes.\n    n = 100\n    ans = 2**(n-1)\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_2_10.json",
    "question": "Suppose g(x) is the horizontal asymptote of function f(x) = (3^x)/(1+3^{-x}). What are possible values of g(2023)?",
    "prediction": 0,
    "answer": 0,
    "rationale": "def solve():\n    import numpy as np\n\n    def f(x):\n        return (3**x) / (1 + 3**(-x))\n\n    def g(x):\n        return np.divide(3**x, 1 + 3**(-x))\n\n    ans = g(2023)\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "maxku/cv-imageprocessing12-chaincode.json",
    "question": "Figure Q8 shows the contour of an object. Represent it with an 8-directional chain code. Represent the answer as a list with each digit as a element.",
    "prediction": [
      1.528,
      0.0
    ],
    "answer": [
      6,
      7,
      0,
      6,
      6,
      4,
      3,
      4,
      3,
      1,
      1
    ],
    "rationale": "",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "wenhuchen/morera's_theorem2.json",
    "question": "Is function f defined by $f(z) = \\int_0^{\\infy} |e^{zt}| / (t+1) dt$ analytical on the left plane D: Re(z) < 0",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if the function f(z) is analytic on the left plane D: Re(z) < 0, we need to check if it satisfies the Cauchy-Riemann equations and has continuous first partial derivatives.\n\nThe function f(z) is given by:\n\n$f(z) = \\int_0^{\\infty} \\frac{|e^{zt}|}{t+1} dt$\n\nFor Re(z) < 0, we have:\n\n$|e^{zt}| = e^{Re(zt)} = e^{t \\cdot Re(z)}$\n\nSince Re(z) < 0, we have:\n\n$|e^{zt}| = e^{-|t \\cdot Re(z)|}$\n\nNow, the function becomes:\n\n$f(z) = \\int_0^{\\infty} \\frac{e^{-|t \\cdot Re(z)|}}{t+1} dt$\n\nThis function is continuous and differentiable for Re(z) < 0. Moreover, the integral converges for Re(z) < 0. Therefore, the function f(z) is analytic on the left plane D: Re(z) < 0.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "maxku/cv-imageprocessing8-fourier4.json",
    "question": "In the process of searching circles in an image, object O is detected. The contour of the object O is represented with the Fourier Descriptors (35,129,0,1,0,0,-1,0). Given that the Fourier Descriptors of a circle are (0,40,0,0,0,0,0,0). Is the object O a circle-like polygon in the image? Bear in mind that there is some high frequency noise in the image. You should take this into account when you make your judgment.",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if object O is a circle-like polygon, we need to compare its Fourier Descriptors with those of a circle. The Fourier Descriptors of object O are (35,129,0,1,0,0,-1,0), and the Fourier Descriptors of a circle are (0,40,0,0,0,0,0,0).\n\nSince there is high-frequency noise in the image, we can expect some deviation in the Fourier Descriptors of object O from those of a perfect circle. The main difference between the two sets of descriptors is in the first two components (35,129) for object O and (0,40) for a circle. The other components are relatively small, which indicates that the high-frequency noise is not significantly affecting the shape.\n\nConsidering the high-frequency noise and the small deviations in the other components, it is reasonable to conclude that object O is a circle-like polygon in the image. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "elainewan/math_algebra_7_3.json",
    "question": "Does the following transformation have an eigenvector: Counterclockwise rotation through an angle of 45 degrees followed by a scaling by 2 in R^2.",
    "prediction": true,
    "answer": false,
    "rationale": "Yes, the given transformation has an eigenvector. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "maxku/signalprocessing6-Ztransform.json",
    "question": "The difference equation of a causal system is $y[n]+0.5 y[n-1]=x[n]-x[n-2]$, where $y[n]$ is its output and $x[n]$ is its input. Is the system a FIR filter?",
    "prediction": true,
    "answer": false,
    "rationale": "To determine if the system is a Finite Impulse Response (FIR) filter, we need to check if the impulse response of the system is finite in duration. The given difference equation is:\n\n$y[n] + 0.5y[n-1] = x[n] - x[n-2]$\n\nLet's find the impulse response $h[n]$ by setting the input $x[n]$ to the unit impulse function $\\delta[n]$:\n\n$h[n] + 0.5h[n-1] = \\delta[n] - \\delta[n-2]$\n\nNow, we can solve for $h[n]$:\n\nFor $n < 0$, $h[n] = 0$ (causal system)\n\nFor $n = 0$, $h[0] + 0.5h[-1] = 1 - 0 \\Rightarrow h[0] = 1$\n\nFor $n = 1$, $h[1] + 0.5h[0] = 0 - 0 \\Rightarrow h[1] = -0.5$\n\nFor $n = 2$, $h[2] + 0.5h[1] = 0 - 1 \\Rightarrow h[2] = 0.5$\n\nFor $n = 3$, $h[3] + 0.5h[2] = 0 - 0 \\Rightarrow h[3] = 0$\n\nFor $n > 3$, the equation becomes $h[n] + 0.5h[n-1] = 0$. Since $h[3] = 0$, we can see that $h[n] = 0$ for all $n > 3$.\n\nThe impulse response $h[n]$ is finite in duration, as it is nonzero only for $n = 0, 1, 2$ and zero for all other values of $n$. Therefore, the system is an FIR filter. The answer is True.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "xueguangma/sortino_ratio.json",
    "question": "Let\u2019s assume Mutual Fund A has an annualized return of 15% and a downside deviation of 8%. Mutual Fund B has an annualized return of 12% and a downside deviation of 5%. The risk-free rate is 2.5%. What is the Sortino ratio for Fund A?",
    "prediction": 1.5625,
    "answer": 1.56,
    "rationale": "def solve():\n  annualized_return_A = 15\n  downside_deviation_A = 8\n  risk_free_rate = 2.5\n\n  sortino_ratio_A = (annualized_return_A - risk_free_rate) / downside_deviation_A\n  return sortino_ratio_A",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/dividend_discount_model_3.json",
    "question": "If a preferred share of stock pays dividends of $1.90 per year, and the required rate of return for the stock is 9%, then what is its intrinsic value?",
    "prediction": 21.11111111111111,
    "answer": 22.11,
    "rationale": "def solve():\n  dividend = 1.90\n  required_rate_of_return = 0.09\n\n  intrinsic_value = dividend / required_rate_of_return\n  return intrinsic_value",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "jianyu_xu/Multinomial_6.json",
    "question": "A box contains 4 red, 3 green, and 2 blue balls. Balls are distinct even with the same color. In how many ways can we choose 4 balls, if at least 2 are red?",
    "prediction": 57,
    "answer": 81,
    "rationale": "def solve():\n    from math import comb\n\n    total_red = 4\n    total_green = 3\n    total_blue = 2\n    total_balls = total_red + total_green + total_blue\n\n    # Case 1: 2 red balls, 1 green ball, 1 blue ball\n    case1 = comb(total_red, 2) * comb(total_green, 1) * comb(total_blue, 1)\n\n    # Case 2: 3 red balls, 1 green ball\n    case2 = comb(total_red, 3) * comb(total_green, 1)\n\n    # Case 3: 3 red balls, 1 blue ball\n    case3 = comb(total_red, 3) * comb(total_blue, 1)\n\n    # Case 4: 4 red balls\n    case4 = comb(total_red, 4)\n\n    ans = case1 + case2 + case3 + case4\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_10.json",
    "question": "A cylindrical tank of height 4 m and radius 1 m is filled with water. Water drains through a square hole of side 2 cm in the bottom. How long does it take for the tank to go from full to empty?",
    "prediction": 7092.516767214436,
    "answer": 7142,
    "rationale": "def solve():\n  import math\n\n  # Constants\n  g = 9.81  # acceleration due to gravity (m/s^2)\n  h = 4  # height of the tank (m)\n  r = 1  # radius of the tank (m)\n  a = 0.02 * 0.02  # area of the square hole (m^2)\n\n  # Volume of the tank\n  V = math.pi * r**2 * h\n\n  # Time to empty the tank\n  t = (2 * V) / (a * math.sqrt(2 * g * h))\n\n  return t",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/gauss_lemma.json",
    "question": "Is 7 a quadratic residue modulo 19? Use Gauss's Lemma to answer it.",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if 7 is a quadratic residue modulo 19 using Gauss's Lemma, we first need to find the Legendre symbol (7/19). According to Gauss's Lemma, we can compute the Legendre symbol by considering the least positive residues of the first half of the multiples of 7 modulo 19.\n\nThe first half of the multiples of 7 modulo 19 are:\n7, 14, 21, 28, 35, 42, 49, 56, 63\n\nNow, we find the least positive residues modulo 19:\n7, 14, 2, 9, 16, 4, 11, 18, 6\n\nWe count the number of least residues that are greater than half of 19 (i.e., greater than 9.5):\n14, 16, 11, 18\n\nThere are 4 such residues. Therefore, the Legendre symbol (7/19) is (-1)^4 = 1. Since the Legendre symbol is 1, 7 is a quadratic residue modulo 19.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "xueguangma/physics_circuits_1.json",
    "question": "What is the RC time constant of the circuit in seconds?",
    "prediction": 104761.33903738193,
    "answer": 3800.0,
    "rationale": "",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/Schwarz_lemma1.json",
    "question": "Suppose f is analytic on the closed unit disk, f(0) = 0, and |f(z)| $\\leq$ |e^z| whenever |z| = 1. How big can f((1 + i)/2) be? Return a numerical number.",
    "prediction": 1.6487212707001282,
    "answer": 1.9221,
    "rationale": "def solve():\n    import cmath\n\n    def f(z):\n        return cmath.exp(z)\n\n    z = (1 + 1j) / 2\n    ans = abs(f(z))\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/cv-cnn6.json",
    "question": "Consider Convolutional Neural Network D2 which takes input images of size 32x32 with 1 colour channels. The first layer of D2 uses 4 filters of size 5x5, a stride of 2, and zero-padding of width 1. Consider CNN D2 which takes input images of size 32x32 with 1 colour channels. The first layer of D2 uses 4 filters of size 5x5, a stride of 2, and zero-padding of width 1. What would be the total size of the flattened output vector from each filter?",
    "prediction": 900,
    "answer": 25,
    "rationale": "def solve():\n    # Input dimensions\n    input_width = 32\n    input_height = 32\n    input_channels = 1\n\n    # Filter dimensions\n    filter_width = 5\n    filter_height = 5\n    num_filters = 4\n\n    # Stride and padding\n    stride = 2\n    padding = 1\n\n    # Calculate output dimensions\n    output_width = (input_width - filter_width + 2 * padding) // stride + 1\n    output_height = (input_height - filter_height + 2 * padding) // stride + 1\n\n    # Calculate the total size of the flattened output vector from each filter\n    flattened_output_size = output_width * output_height * num_filters\n\n    return flattened_output_size",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/vieta's_formula2.json",
    "question": "The polynomial $x^3 - Ax + 15$ has three real roots. Two of these roots sum to 5. What is |A|?",
    "prediction": 0,
    "answer": 22.0,
    "rationale": "def solve():\n    import sympy as sp\n\n    x, A = sp.symbols('x A')\n    polynomial = x**3 - A*x + 15\n    roots = sp.solve(polynomial, x)\n\n    # Two of the roots sum to 5\n    for i in range(len(roots)):\n        for j in range(i+1, len(roots)):\n            if sp.simplify(roots[i] + roots[j]) == 5:\n                root1, root2 = roots[i], roots[j]\n                break\n\n    # Find the third root\n    third_root = sp.simplify(5 - (root1 + root2))\n\n    # Substitute the third root back into the polynomial\n    A_value = sp.solve(polynomial.subs(x, third_root), A)[0]\n\n    return abs(A_value)",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/mueller2.json",
    "question": "Perform 2 iterations with the M\u00fcller method for the following equation: log_{10}(x) - x + 3 = 0, x_0 = 1/4, x_1 = 1/2, x_2 = 1. What's the decimal value of x_3?",
    "prediction": 3.200565257907755,
    "answer": 3.2,
    "rationale": "def solve():\n    import math\n\n    def f(x):\n        return math.log10(x) - x + 3\n\n    x0, x1, x2 = 1/4, 1/2, 1\n\n    for _ in range(2):\n        q = (x2 - x1) / (x1 - x0)\n        a = q * f(x2) - q * (1 + q) * f(x1) + q**2 * f(x0)\n        b = (2 * q + 1) * f(x2) - (1 + q)**2 * f(x1) + q**2 * f(x0)\n        c = (1 + q) * f(x2)\n\n        r = x2 - (x2 - x1) * min(abs(b + math.sqrt(b**2 - 4 * a * c)), abs(b - math.sqrt(b**2 - 4 * a * c))) / (2 * a)\n\n        x0, x1, x2 = x1, x2, r\n\n    return x2",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/modulararithmetic5.json",
    "question": "Mrs. Walter gave an exam in a mathematics class of five students. She entered the scores in random order into a spreadsheet, which recalculated the class average after each score was entered. Mrs. Walter noticed that after each score was entered, the average was always an integer. The scores (listed in ascending order) were 71,76,80,82,and 91. What was the last score Mrs. Walter entered?",
    "prediction": 80,
    "answer": 80,
    "rationale": "def solve():\n    from itertools import permutations\n\n    scores = [71, 76, 80, 82, 91]\n\n    for perm in permutations(scores):\n        total = 0\n        count = 0\n        all_integers = True\n        for score in perm:\n            total += score\n            count += 1\n            if total % count != 0:\n                all_integers = False\n                break\n        if all_integers:\n            return perm[-1]",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "mingyin/series1.json",
    "question": "For all $n>1$, define $a_n=\\sum_{k=1}^{n-1} \\frac{\\sin (\\frac{(2 k-1) \\pi}{2 n})}{\\cos ^2(\\frac{(k-1) \\pi}{2n}) \\cos ^2 (\\frac{k \\pi}{2n})}$. What is the limit of $a_n/n^3$ as $n$ goes to infinity?",
    "prediction": 0.25801195361710244,
    "answer": 0.258,
    "rationale": "def solve():\n    import numpy as np\n\n    def a_n(n):\n        sum_result = 0\n        for k in range(1, n):\n            sum_result += np.sin((2 * k - 1) * np.pi / (2 * n)) / (np.cos((k - 1) * np.pi / (2 * n)) ** 2 * np.cos(k * np.pi / (2 * n)) ** 2)\n        return sum_result\n\n    n_values = np.arange(2, 1000)\n    a_n_values = np.array([a_n(n) for n in n_values])\n    a_n_over_n3 = a_n_values / n_values ** 3\n\n    limit = np.mean(a_n_over_n3[-10:])\n    return limit",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/relativity3.json",
    "question": "The atomic mass of the 4He atom is 4.002603 u. Find the binding energy of the 4He nucleus in MeV.",
    "prediction": 27.273927135924318,
    "answer": 28.3,
    "rationale": "def solve():\n    # Constants\n    atomic_mass_4He = 4.002603  # atomic mass of 4He in atomic mass units (u)\n    mass_proton = 1.007276466812  # mass of proton in atomic mass units (u)\n    mass_neutron = 1.008664915  # mass of neutron in atomic mass units (u)\n    u_to_kg = 1.66053906660e-27  # conversion factor from atomic mass units to kg\n    c = 2.99792458e8  # speed of light in m/s\n    MeV_to_J = 1.602176634e-13  # conversion factor from MeV to J\n\n    # Calculate mass defect\n    mass_defect = 2 * mass_proton + 2 * mass_neutron - atomic_mass_4He\n\n    # Convert mass defect to kg\n    mass_defect_kg = mass_defect * u_to_kg\n\n    # Calculate binding energy in Joules\n    binding_energy_J = mass_defect_kg * c**2\n\n    # Convert binding energy to MeV\n    binding_energy_MeV = binding_energy_J / MeV_to_J\n\n    return binding_energy_MeV",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/particle3.json",
    "question": "Calculate the minimum kinetic energy of a proton to be scattered from a fixed proton target to produce an antiproton in MeV.",
    "prediction": 938.272,
    "answer": 5630.0,
    "rationale": "def solve():\n  # Constants\n  proton_mass = 938.272  # MeV/c^2\n  antiproton_mass = 938.272  # MeV/c^2\n\n  # Calculate the minimum kinetic energy\n  min_kinetic_energy = 2 * antiproton_mass - proton_mass\n\n  return min_kinetic_energy",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xinyi/fisher_information_1.json",
    "question": "For a parametric family $\\{p_\\theta(x)\\}$ we know that $\\lim_{\\theta'\\to\\theta}\\frac{1}{(\\theta-\\theta')^2}D(p_\\theta||p_{\\theta'}) = \\alpha J(\\theta)$, where $J(\\theta)$ is the Fisher information. Use natural logarithm for KL divergence to compute $\\alpha$.",
    "prediction": 0,
    "answer": 0.5,
    "rationale": "",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "jianyu_xu/combination_1.json",
    "question": "Consider a group of 10 people {A,B,C,D,E,F,G,H,I,J} and we are to choose a committee of 4 people from them. Given that (1) A and B should not be chosen together, and that (2) A, C, F should not be chosen together, then how many ways are there to choose such a committee?",
    "prediction": 176,
    "answer": 176,
    "rationale": "def solve():\n    from math import comb\n\n    total_ways = comb(10, 4)  # Total ways to choose 4 people from 10\n    ab_together = comb(8, 2)  # Ways to choose 4 people with A and B together\n    acf_together = comb(7, 1)  # Ways to choose 4 people with A, C, and F together\n    ab_acf_together = 1  # Ways to choose 4 people with A, B, C, and F together\n\n    ans = total_ways - ab_together - acf_together + ab_acf_together\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/Poisson_process2.json",
    "question": "Let {N(t), t \\in [0, \\infty)} be a Poisson process with rate of $\\lambda = 4$. Find it covariance function $C_N(t1, t2) for t1, t2 \\in [0, \\infy)$. What is C_N(2, 4)?",
    "prediction": 8,
    "answer": 8,
    "rationale": "def solve():\n    # Covariance function for a Poisson process with rate lambda\n    def covariance_poisson(t1, t2, rate):\n        return min(t1, t2) * rate\n\n    # Given values\n    lambda_rate = 4\n    t1 = 2\n    t2 = 4\n\n    # Calculate the covariance\n    ans = covariance_poisson(t1, t2, lambda_rate)\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "maxku/cv-imageprocessing7-histogram.json",
    "question": "Given an image $$ \\begin{array}{llllllll} 6 & 5 & 6 & 7 & 7 & 7 & 7 & 7 \\\\ 7 & 7 & 7 & 7 & 6 & 7 & 7 & 7 \\\\ 8 & 8 & 8 & 6 & 5 & 5 & 6 & 7 \\\\ 8 & 8 & 8 & 6 & 4 & 3 & 5 & 7 \\\\ 7 & 8 & 8 & 6 & 3 & 3 & 4 & 6 \\\\ 7 & 8 & 8 & 6 & 4 & 3 & 4 & 6 \\\\ 8 & 8 & 8 & 7 & 5 & 5 & 5 & 5 \\\\ 8 & 9 & 9 & 8 & 7 & 6 & 6 & 4 \\end{array} $$ . Find an appropriate threshold for thresholding the following image into 2 regions using the histogram.",
    "prediction": 0,
    "answer": 6.25,
    "rationale": "def solve():\n    import numpy as np\n\n    image = np.array([[6, 5, 6, 7, 7, 7, 7, 7],\n                      [7, 7, 7, 7, 6, 7, 7, 7],\n                      [8, 8, 8, 6, 5, 5, 6, 7],\n                      [8, 8, 8, 6, 4, 3, 5, 7],\n                      [7, 8, 8, 6, 3, 3, 4, 6],\n                      [7, 8, 8, 6, 4, 3, 4, 6],\n                      [8, 8, 8, 7, 5, 5, 5, 5],\n                      [8, 9, 9, 8, 7, 6, 6, 4]])\n\n    # Calculate the histogram\n    hist, _ = np.histogram(image, bins=np.arange(11), density=True)\n\n    # Find the threshold using Otsu's method\n    p1 = np.cumsum(hist)\n    p2 = 1 - p1\n    m1 = np.cumsum(hist * np.arange(10)) / p1\n    m2 = (np.sum(hist * np.arange(10)) - np.cumsum(hist * np.arange(10))) / p2\n    variance = p1 * p2 * (m1 - m2)**2\n    threshold = np.argmax(variance)\n\n    return threshold",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "jianyu_xu/Stirling_number_second_kind_1.json",
    "question": "In how many ways can a group of 7 people be divided into 2 non-empty subsets?",
    "prediction": 63,
    "answer": 63,
    "rationale": "def solve():\n  # Total number of ways to divide a group of 7 people into 2 non-empty subsets\n  # is equal to 2^(n-1) - 1, where n is the number of people in the group\n  ans = 2**(7-1) - 1\n  return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "maxku/cv-cnn5.json",
    "question": "Consider Convolutional Neural Network D2 which takes input images of size 32x32 with 1 colour channels. The first layer of D2 uses 4 filters of size 5x5, a stride of 2, and zero-padding of width 1. Consider CNN D2 which takes input images of size 32x32 with 1 colour channels. The first layer of D2 uses 4 filters of size 5x5, a stride of 2, and zero-padding of width 1. What is the total number of weights defined for the entire activation output of this first layer? (ie. If you flattened all filters and channels into a single vector)",
    "prediction": 100,
    "answer": 900,
    "rationale": "def solve():\n    input_channels = 1\n    num_filters = 4\n    filter_size = 5 * 5\n    total_weights = input_channels * num_filters * filter_size\n    return total_weights",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/Poisson_process4.json",
    "question": "Let $N_1(t)$ and $N_2(t)$ be two independent Posson processes with rate $\\lambda_1 = 1$ and $\\lambda_2 = 2$, respectively. Let N(t) be the merged process N(t) = N_1(t) + N_2(t). Given that N(1) = 2, Find the probability that N_1(1) = 1.",
    "prediction": 0.4444444444444445,
    "answer": 0.4444,
    "rationale": "def solve():\n    import math\n\n    # Parameters\n    lambda_1 = 1\n    lambda_2 = 2\n    t = 1\n    N_t = 2\n\n    # Calculate the probability of N_1(1) = 1\n    prob_N1_1 = (math.exp(-lambda_1 * t) * (lambda_1 * t)**1) / math.factorial(1)\n\n    # Calculate the probability of N_2(1) = 1\n    prob_N2_1 = (math.exp(-lambda_2 * t) * (lambda_2 * t)**1) / math.factorial(1)\n\n    # Calculate the probability of N_1(1) = 1 and N_2(1) = 1\n    prob_N1_1_and_N2_1 = prob_N1_1 * prob_N2_1\n\n    # Calculate the probability of N(1) = 2\n    prob_N_2 = (math.exp(-(lambda_1 + lambda_2) * t) * ((lambda_1 + lambda_2) * t)**N_t) / math.factorial(N_t)\n\n    # Calculate the conditional probability of N_1(1) = 1 given N(1) = 2\n    ans = prob_N1_1_and_N2_1 / prob_N_2\n\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "jianyu_xu/Chinese_Remainder_Theorem_3.json",
    "question": "Find the smallest positive integer that leaves a remainder of 5 when divided by 8, a remainder of 1 when divided by 3, and a remainder of 7 when divided by 11.",
    "prediction": 0,
    "answer": 205,
    "rationale": "def solve():\n    num = 1\n    while True:\n        if num % 8 == 5 and num % 3 == 1 and num % 11 == 7:\n            return num",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "xinyi/maximum_entropy_1.json",
    "question": "Maximize the entropy $H(X)$ of a non-negative integer-valued random variable $X$, taking values from 0 to infinity, subject to the constraint $E(X)=1$. Use base 2 logarithm to evaluate $H(X)$.",
    "prediction": 49.999637843997306,
    "answer": 2.0,
    "rationale": "def solve():\n    import numpy as np\n\n    # We will use the method of Lagrange multipliers to solve this problem.\n    # Let p(x) be the probability mass function of X.\n    # The entropy H(X) is given by: H(X) = -sum(p(x) * log2(p(x))) for x = 0 to infinity\n    # The constraint is given by: E(X) = sum(x * p(x)) for x = 0 to infinity = 1\n\n    # Let's define the Lagrangian function L(p, \u03bb) = H(X) - \u03bb(E(X) - 1)\n    # L(p, \u03bb) = -sum(p(x) * log2(p(x))) + \u03bb(sum(x * p(x)) - 1)\n\n    # To maximize the entropy, we need to find the p(x) and \u03bb that maximize L(p, \u03bb)\n    # We will do this by taking the partial derivatives of L(p, \u03bb) with respect to p(x) and \u03bb, and setting them to 0.\n\n    # \u2202L/\u2202p(x) = -log2(p(x)) - 1 + \u03bbx = 0\n    # log2(p(x)) = \u03bbx - 1\n    # p(x) = 2^(\u03bbx - 1)\n\n    # \u2202L/\u2202\u03bb = sum(x * p(x)) - 1 = 0\n    # sum(x * 2^(\u03bbx - 1)) = 1\n\n    # We can solve this equation for \u03bb numerically using the bisection method.\n    def f(\u03bb):\n        return sum(x * 2**(\u03bb * x - 1) for x in range(1, 100)) - 1\n\n    \u03bb_left, \u03bb_right = 0, 2\n    while abs(\u03bb_left - \u03bb_right) > 1e-6:\n        \u03bb_mid = (\u03bb_left + \u03bb_right) / 2\n        if f(\u03bb_mid) < 0:\n            \u03bb_left = \u03bb_mid\n        else:\n            \u03bb_right = \u03bb_mid\n\n    \u03bb_optimal = (\u03bb_left + \u03bb_right) / 2\n\n    # Now we can find the optimal p(x) using the optimal \u03bb.\n    p_optimal = [2**(\u03bb_optimal * x - 1) for x in range(100)]\n\n    # Finally, we can compute the maximum entropy H(X) using the optimal p(x).\n    H_max = -sum(p * np.log2(p) for p in p_optimal)\n\n    return H_max",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/econ_micro_14_2.json",
    "question": "A single firm monopolizes the entire market for widgets and can produce at constant average and marginal costs of AC = MC = 10. Originally, the firm faces a market demand curve given by Q = 60 - P. Calculate the profit-maximizing price for the firm.",
    "prediction": -10,
    "answer": 35,
    "rationale": "def solve():\n    # import library\n    from sympy import symbols, Eq, solve\n\n    # implement the code\n    Q, P = symbols('Q P')\n    MC = 10\n    demand_eq = Eq(Q, 60 - P)\n    revenue_eq = Eq(P * Q, P * (60 - P))\n    marginal_revenue_eq = revenue_eq.subs(P, P + MC)\n\n    profit_maximizing_price = solve(marginal_revenue_eq, P)[0]\n\n    return profit_maximizing_price",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/cauchy-integral-theorem1.json",
    "question": "Let f be a bounded entire function, z_1,z_2 be two points in the ball B(0,r). What is the value of the integral $\\int_{|z|=r} f(z)/(z-z_1)(z-z_2) dz$?",
    "prediction": 0,
    "answer": 0.0,
    "rationale": "def solve():\n    # Since f is a bounded entire function, by Liouville's theorem, f must be a constant function.\n    # Let's denote the constant value of f as c.\n    # Then the integral becomes:\n    # \u222b(c/(z-z_1)(z-z_2))dz over |z|=r\n    # This integral is a Cauchy integral, and since z_1 and z_2 are inside the circle |z|=r, the integral is 0.\n    ans = 0\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/parallelogram1.json",
    "question": "ABCD is a parallelogram such that AB is parallel to DC and DA parallel to CB. The length of side AB is 20 cm. E is a point between A and B such that the length of AE is 3 cm. F is a point between points D and C. Find the length of DF in cm such that the segment EF divide the parallelogram in two regions with equal areas.",
    "prediction": 0,
    "answer": 17,
    "rationale": "def solve():\n  # In a parallelogram, opposite sides are equal in length\n  DC = AB = 20\n\n  # Length of EB\n  EB = AB - AE\n  EB = 20 - 3\n\n  # Since the area of the two regions is equal, the height of the triangle AEF is equal to the height of the parallelogram\n  # Let's denote the height of the parallelogram as h\n  # Area of parallelogram = base * height\n  # Area of triangle AEF = 0.5 * base * height\n  # Area of parallelogram = 2 * Area of triangle AEF\n  # AB * h = 2 * 0.5 * AE * h\n  # DC * h = 2 * 0.5 * DF * h\n\n  # We can cancel out the height (h) from both sides\n  # DC = 2 * DF\n  # 20 = 2 * DF\n\n  # Solving for DF\n  DF = 20 / 2\n\n  return DF",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_11.json",
    "question": "What is the limit of the sequence a_n = n/(\\sqrt{n^2 + 1})?",
    "prediction": 1.0,
    "answer": 1,
    "rationale": "def solve():\n    import sympy as sp\n\n    n = sp.Symbol('n')\n    a_n = n / sp.sqrt(n**2 + 1)\n    limit = sp.limit(a_n, n, sp.oo)\n\n    return float(limit)",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/p_value2.json",
    "question": "You have a coin and you would like to check whether it is fair or biased. More specifically, let $\\theta$ be the probability of heads, $\\theta = P(H)$. Suppose that you need to choose between the following hypotheses: H_0 (null hypothesis): The coin is fair, i.e. $\\theta = \\theta_0 = 1 / 2$. H_1 (the alternative hypothesis): The coin is not fair, i.e. $\\theta > 1 / 2$. We toss 100 times and observe 60 heads. Can we reject H_0 at significance level $\\alpha = 0.01$?",
    "prediction": false,
    "answer": false,
    "rationale": "To determine whether we can reject the null hypothesis H_0 at a significance level of \u03b1 = 0.01, we need to calculate the p-value. The p-value is the probability of observing 60 or more heads in 100 tosses, assuming the coin is fair (\u03b8 = 1/2).\n\nWe can use the binomial distribution to calculate the p-value. The probability mass function (PMF) of the binomial distribution is given by:\n\nP(X = k) = C(n, k) * p^k * (1-p)^(n-k)\n\nwhere n is the number of trials (100 tosses), k is the number of successes (60 heads), p is the probability of success (1/2), and C(n, k) is the number of combinations of n items taken k at a time.\n\nThe p-value is the sum of the probabilities of observing 60 or more heads:\n\np-value = P(X \u2265 60) = \u03a3 P(X = k) for k = 60 to 100\n\nCalculating the p-value, we get:\n\np-value \u2248 0.0176\n\nSince the p-value (0.0176) is greater than the significance level \u03b1 (0.01), we cannot reject the null hypothesis H_0. Therefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "maxku/cv-imageprocessing1-morphology.json",
    "question": "In Image processing, opening is a process in which first dilation operation is performed and then erosion operation is performed. Is it true?",
    "prediction": false,
    "answer": false,
    "rationale": "Therefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "maxku/ipnetwork14-hammingdist.json",
    "question": "Calculate the Hamming pairwise distances and determine the minimum Hamming distance among the following codewords: 000000,010101,101010,110110",
    "prediction": 3,
    "answer": 3,
    "rationale": "def solve():\n    def hamming_distance(s1, s2):\n        return sum(ch1 != ch2 for ch1, ch2 in zip(s1, s2))\n\n    codewords = [\"000000\", \"010101\", \"101010\", \"110110\"]\n    distances = []\n\n    for i in range(len(codewords)):\n        for j in range(i+1, len(codewords)):\n            distances.append(hamming_distance(codewords[i], codewords[j]))\n\n    return min(distances)",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/fermat_last.json",
    "question": "For an integer a > 0 and an integer b > 0, is there any other number c > 0 such that a^10 + b^10 = c^10?",
    "prediction": false,
    "answer": false,
    "rationale": "By Fermat's Last Theorem, there are no three positive integers a, b, and c that satisfy the equation a^n + b^n = c^n for any integer value of n greater than 2. Since 10 is greater than 2, there is no such number c that satisfies the given equation. Therefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "xueguangma/differential_product_rule.json",
    "question": "For $p(x)=f(x)g(x)$, if $f(2)=3$, $f'(2)=-4$, $g(2)=1$, and $g'(2)=6$, what is $p'(2)$?",
    "prediction": 14,
    "answer": 14,
    "rationale": "def solve():\n  # Given values\n  f_2 = 3\n  f_prime_2 = -4\n  g_2 = 1\n  g_prime_2 = 6\n\n  # Using the product rule: p'(x) = f'(x)g(x) + f(x)g'(x)\n  p_prime_2 = f_prime_2 * g_2 + f_2 * g_prime_2\n\n  return p_prime_2",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "maxku/signalprocessing16-Ztransform.json",
    "question": "Are the circuits shown in Fig. Qla and Fig. Q1b are identical? (Hint: Compare the Tranfer functions)",
    "prediction": 0,
    "answer": true,
    "rationale": "Unfortunately, I cannot see the figures you are referring to. Please provide the necessary information about the circuits or their transfer functions so that I can help you determine if they are identical.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "xinyi/expected_waiting_time.json",
    "question": "Let $X_0, X_1, X_2, \\ldots$ be drawn i.i.d. from $p(x)$, and $x\\in\\{1,2,3,\\ldots,100\\}. Let $N$ be the waiting time to the next occurrence of $X_0$. Compute $E(N)$.",
    "prediction": 100.0,
    "answer": 100.0,
    "rationale": "def solve():\n    # import library\n    import numpy as np\n\n    # implement the code\n    p_x = 1/100  # probability of each x in {1, 2, ..., 100}\n    E_N = 1/p_x  # expected waiting time to the next occurrence of X_0\n\n    return E_N",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/math_algebra_additional_1.json",
    "question": "Let f_1, ..., f_n be polynomials. Do they span the space P of all polynomials?",
    "prediction": false,
    "answer": false,
    "rationale": "Therefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "jianyu_xu/Lah_number_6.json",
    "question": "How many ways are there to divide a set of 8 elements into 5 non-empty ordered subsets?",
    "prediction": 58800,
    "answer": 11760,
    "rationale": "def solve():\n    from math import comb\n\n    # Using Stirling numbers of the second kind\n    # S(n, k) = k * S(n-1, k) + S(n-1, k-1)\n    def stirling_number(n, k):\n        if n == k or k == 1:\n            return 1\n        if k == 0 or n == 0:\n            return 0\n        return k * stirling_number(n - 1, k) + stirling_number(n - 1, k - 1)\n\n    n = 8\n    k = 5\n    ans = stirling_number(n, k) * comb(n, k)\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/Spectrum-theorem1.json",
    "question": "Suppose H=L^2[0,1]. Operator $A: u(t) \\mapsto t\\times u(t)$ is a map from H to H. Then A is a bounded linear operator. Then the spectrum of A is: (a) [0,1], (b) [0,1/2], (c) [1/2, 1], (d) none of the above. Which one is correct?",
    "prediction": "(a)",
    "answer": "(a)",
    "rationale": "To determine the spectrum of the operator A, we need to consider the eigenvalue problem Au = \u03bbu, where u is an element of H and \u03bb is an eigenvalue. In this case, Au(t) = t * u(t), so the eigenvalue problem becomes:\n\nt * u(t) = \u03bb * u(t)\n\nNow, we can divide both sides by u(t) (assuming u(t) \u2260 0):\n\nt = \u03bb\n\nSince t is in the interval [0, 1], \u03bb must also be in the interval [0, 1]. Therefore, the answer is (a) [0, 1].",
    "answer_type": "option",
    "correct": true
  },
  {
    "id": "wenhuchen/curvature3.json",
    "question": "If r(t) = (6t+2)i + 5t^2j - 8tk, find the Binormal vector as [xi, yj, zk]. What are x, y, z? Return them as a list.",
    "prediction": [
      8.0,
      100.0,
      2.0,
      100.0,
      0.0,
      6.0,
      100.0,
      2.0,
      100.0
    ],
    "answer": [
      0.8,
      0.0,
      0.6
    ],
    "rationale": "def solve():\n    import sympy as sp\n\n    t = sp.Symbol('t')\n    r_t = sp.Matrix([6*t + 2, 5*t**2, -8*t])\n    r_t_diff = r_t.diff(t)\n    r_t_diff2 = r_t_diff.diff(t)\n\n    T = r_t_diff / r_t_diff.norm()\n    N = r_t_diff2 / r_t_diff2.norm()\n\n    B = T.cross(N)\n\n    x, y, z = B[0], B[1], B[2]\n    ans = [x, y, z]\n\n    return ans",
    "answer_type": "list of float",
    "correct": false
  },
  {
    "id": "elainewan/econ_micro_18.json",
    "question": "Clare manages a piano store. Her utility function is given by Utility = w - 100, where w is the total of all monetary payments to her and 100 represents the monetary equivalent of the disutility of exerting effort to run the store. Her next best alternative to managing the store gives her zero utility. The store's revenue depends on random factors, with an equal chance of being $1,000 or $400. If shareholders offered to share half of the store's revenue with her, what would her expected utility be?",
    "prediction": 250.0,
    "answer": 250,
    "rationale": "def solve():\n    # Calculate the expected revenue\n    expected_revenue = (1000 + 400) / 2\n\n    # Calculate Clare's share of the revenue\n    clare_share = expected_revenue * 0.5\n\n    # Calculate Clare's utility\n    utility = clare_share - 100\n\n    return utility",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/Runge-Kutta_Method2.json",
    "question": "Use the Runge-Kutta method with $h=0.1$ to find approximate values of the solution of $(y-1)^2 * y' = 2x + 3$ with y(1) = 4. What is y(0)?",
    "prediction": 3.4662120697499406,
    "answer": 3.46621207,
    "rationale": "def runge_kutta(f, x0, y0, h, n):\n    x = x0\n    y = y0\n    for i in range(n):\n        k1 = h * f(x, y)\n        k2 = h * f(x + h/2, y + k1/2)\n        k3 = h * f(x + h/2, y + k2/2)\n        k4 = h * f(x + h, y + k3)\n        y = y + (k1 + 2*k2 + 2*k3 + k4) / 6\n        x = x + h\n    return y\ndef f(x, y):\n    return (2*x + 3) / (y - 1)**2\ndef solve():\n    x0 = 1\n    y0 = 4\n    h = -0.1\n    n = 10\n    y = runge_kutta(f, x0, y0, h, n)\n    return y",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/state_tree.json",
    "question": "A certain underlying state graph is a tree where each node has three successor nodes, indexed $a$, $b$, $c$. There are two assets defined on this tree which pay no dividends except at the terminal time $T$. At a certain period it is known that the prices of the two accets are multiplied by factors, depending on the successor node. These factors are shown in the table below:\n | | a | b | c\nsecurity | 1 | 1.2 | 1.0 | 0.8\n | 2 | 1.2 | 1.3 | 1.4\n\n Is there a short-tem riskless asset for this period? Answer True or False.",
    "prediction": false,
    "answer": true,
    "rationale": "To determine if there is a short-term riskless asset for this period, we need to check if there is a linear combination of the two assets that results in a constant return, regardless of the successor node.\n\nLet x and y be the weights of security 1 and security 2, respectively. We want to find x and y such that:\n\nx * 1.2 + y * 1.2 = x * 1.0 + y * 1.3 = x * 0.8 + y * 1.4\n\nSolving this system of equations, we get:\n\n0.2x = 0.3y\n0.2x = 0.1y\n\nDividing the first equation by the second equation, we get:\n\n(0.2x) / (0.2x) = (0.3y) / (0.1y)\n\n1 = 3\n\nThis is a contradiction, so there is no solution for x and y that satisfies the given conditions. Therefore, there is no short-term riskless asset for this period. The answer is False.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "maxku/ipnetwork20-ip.json",
    "question": "Given a network in the figure, From Interface m1 of router R2 it can reach how many destinations?",
    "prediction": [
      1.528,
      0.0
    ],
    "answer": 4,
    "rationale": "",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/markov-chain1.json",
    "question": "the matrix in ./mingyin/mc.png represents a markov chain. What is the period of state 0? What is the period of state 1? Return the two answers as a list.",
    "prediction": [
      12,
      12
    ],
    "answer": [
      2,
      2
    ],
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the transition matrix\n    P = np.array([[0.5, 0.5, 0, 0],\n                  [0.5, 0, 0.5, 0],\n                  [0, 0.5, 0, 0.5],\n                  [0, 0, 0.5, 0.5]])\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def find_period(state):\n        # Find the period of a state in a Markov chain\n        n = len(P)\n        powers = [np.linalg.matrix_power(P, k) for k in range(1, n+1)]\n        periods = [k for k, power in enumerate(powers, 1) if power[state, state] > 0]\n        period = periods[0]\n        for p in periods[1:]:\n            period = lcm(period, p)\n        return period\n\n    period_0 = find_period(0)\n    period_1 = find_period(1)\n\n    return [period_0, period_1]",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "jianyu_xu/Ramsey_2.json",
    "question": "What is the minimum number of people needed in a room to guarantee that there are 3 mutual friends or 3 mutual strangers?",
    "prediction": 2,
    "answer": 6,
    "rationale": "def solve():\n    def ramsey_theory(n):\n        if n == 0:\n            return 0\n        return ramsey_theory(n - 1) + n\n\n    n = 1\n    while ramsey_theory(n) < 3:\n        n += 1\n\n    return n",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/basic-electronics-3-2.json",
    "question": "In the figure, what is the magnitude of the potential difference across the $20 \\Omega$ resistor? Answer in unit of W (3 sig.fig.).",
    "prediction": 3.84,
    "answer": 7.76,
    "rationale": "",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_9_2.json",
    "question": "Find the arc length of y = (1/4)x^4 over the interval [1,2] using the Trapezoidal Rule T_5.",
    "prediction": 3.957736384245928,
    "answer": 3.958,
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the function and its derivative\n    def f(x):\n        return (1/4) * x**4\n\n    def df(x):\n        return x**3\n\n    # Define the arc length function\n    def arc_length(x):\n        return np.sqrt(1 + df(x)**2)\n\n    # Implement the Trapezoidal Rule\n    def trapezoidal_rule(a, b, n, func):\n        h = (b - a) / n\n        x = np.linspace(a, b, n + 1)\n        y = func(x)\n        return h * (0.5 * y[0] + 0.5 * y[-1] + np.sum(y[1:-1]))\n\n    # Set the interval and number of trapezoids\n    a, b = 1, 2\n    n = 5\n\n    # Calculate the arc length using the Trapezoidal Rule\n    ans = trapezoidal_rule(a, b, n, arc_length)\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "panlu/similarity4.json",
    "question": "If polygon ABCDE ~ polygon PQRST, AB = BC = 8, AE = CD = 4, ED = 6, QR = QP, and RS = PT = 3, find the perimeter of polygon PQRST.",
    "prediction": 18.0,
    "answer": 22.5,
    "rationale": "def solve():\n    # Given sides of polygon ABCDE\n    AB = BC = 8\n    AE = CD = 4\n    ED = 6\n\n    # Given sides of polygon PQRST\n    QR = QP = RS = PT = 3\n\n    # Since the polygons are similar, their corresponding sides are proportional\n    # Let's find the ratio of their corresponding sides\n    ratio = QR / AB\n\n    # Now, we can find the sides PS and ST using the ratio\n    PS = AE * ratio\n    ST = CD * ratio\n\n    # Finally, we can find the perimeter of polygon PQRST\n    perimeter = 2 * (QP + RS + ST + PS)\n\n    return perimeter",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/signalprocessing14-Ztransform.json",
    "question": "The difference equation of a digital system is given by $$ y[n]-y[n-1]=2 x[n-1]-x[n-2], $$ where $x[n]$ and $y[n]$ are, respectively the current samples of the input and the output signals of the system. Determine if the system is a stable system.",
    "prediction": true,
    "answer": false,
    "rationale": "To determine if the system is stable, we need to analyze its impulse response. First, let's find the impulse response of the system. We can do this by setting the input signal x[n] to the impulse function, which is defined as:\n\n$$\nx[n] = \\delta[n] = \\begin{cases}\n1, & \\text{if}\\ n = 0 \\\\\n0, & \\text{otherwise}\n\\end{cases}\n$$\n\nNow, we can substitute this into the given difference equation:\n\n$$\ny[n] - y[n-1] = 2\\delta[n-1] - \\delta[n-2]\n$$\n\nWe can now solve this difference equation for the impulse response, which is the output signal y[n] when the input signal is the impulse function:\n\n1. For n = 0:\n$$\ny[0] - y[-1] = 2\\delta[-1] - \\delta[-2] \\Rightarrow y[0] = 0\n$$\n\n2. For n = 1:\n$$\ny[1] - y[0] = 2\\delta[0] - \\delta[-1] \\Rightarrow y[1] = 2\n$$\n\n3. For n = 2:\n$$\ny[2] - y[1] = 2\\delta[1] - \\delta[0] \\Rightarrow y[2] = -1\n$$\n\n4. For n > 2:\n$$\ny[n] - y[n-1] = 2\\delta[n-1] - \\delta[n-2] \\Rightarrow y[n] = 0\n$$\n\nSo, the impulse response of the system is:\n\n$$\nh[n] = \\begin{cases}\n0, & \\text{if}\\ n = 0 \\\\\n2, & \\text{if}\\ n = 1 \\\\\n-1, & \\text{if}\\ n = 2 \\\\\n0, & \\text{if}\\ n > 2\n\\end{cases}\n$$\n\nNow, we can determine if the system is stable by checking if the impulse response is absolutely summable:\n\n$$\n\\sum_{n=-\\infty}^{\\infty} |h[n]| = |0| + |2| + |-1| + \\sum_{n=3}^{\\infty} |0| = 0 + 2 + 1 + 0 = 3\n$$\n\nSince the sum is finite, the system is stable. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "mingyin/series5.json",
    "question": "Sum the series $\\sum_{m=1}^{\\infty} \\sum_{n=1}^{\\infty}\\frac{m^2 n}{3^m(n3^m+m3^n)}$",
    "prediction": 0.28124999869063894,
    "answer": 0.28125,
    "rationale": "def solve():\n    import math\n\n    # Set a tolerance for the sum convergence\n    tolerance = 1e-10\n\n    # Initialize the outer sum\n    outer_sum = 0\n    m = 1\n\n    while True:\n        # Initialize the inner sum\n        inner_sum = 0\n        n = 1\n\n        while True:\n            # Calculate the term\n            term = (m**2 * n) / (3**m * (n * 3**m + m * 3**n))\n\n            # Add the term to the inner sum\n            inner_sum += term\n\n            # Check if the term is smaller than the tolerance\n            if term < tolerance:\n                break\n\n            # Increment n\n            n += 1\n\n        # Add the inner sum to the outer sum\n        outer_sum += inner_sum\n\n        # Check if the inner sum is smaller than the tolerance\n        if inner_sum < tolerance:\n            break\n\n        # Increment m\n        m += 1\n\n    return outer_sum",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/math_calculus_3_8.json",
    "question": "Julian is jogging around a circular track of radius 50 m. In a coordinate system with its origin at the center of the track, Julian's x-coordinate is changing at a rate of -1.25 m/s when his coordinates are (40, 30). Find dy/dt at this moment.",
    "prediction": 1.6666666666666667,
    "answer": 1.667,
    "rationale": "def solve():\n  import math\n\n  # Given values\n  radius = 50\n  dx_dt = -1.25\n  x = 40\n  y = 30\n\n  # Using the Pythagorean theorem, we can find the relationship between x and y:\n  # x^2 + y^2 = radius^2\n  # Differentiating both sides with respect to time t, we get:\n  # 2x(dx/dt) + 2y(dy/dt) = 0\n\n  # Now, we can solve for dy/dt:\n  dy_dt = -(2 * x * dx_dt) / (2 * y)\n\n  return dy_dt",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "maxku/cv-imageprocessing2-morphology.json",
    "question": "In Image processing, closing is a process in which first dilation operation is performed and then erosion operation is performed. Is it true?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "maxku/basic-electronics-2-1.json",
    "question": "Given $V_s = 5V$, $R_1 = 480 \\Omega$, $R_2 = 320 \\Omega$, and $R_3 = 200 \\Omega$, find the power dissipated by the 3 resistors $P_1, P_2, P_3$ in the figure. Represent your answer as a list [$P_1, P_2, P_3$] in the unit of mW.",
    "prediction": [
      12.0,
      8.0,
      5.0
    ],
    "answer": [
      12,
      8,
      5
    ],
    "rationale": "def solve():\n    # Constants\n    Vs = 5  # Voltage source in volts\n    R1 = 480  # Resistance R1 in ohms\n    R2 = 320  # Resistance R2 in ohms\n    R3 = 200  # Resistance R3 in ohms\n\n    # Calculate total resistance\n    R_total = R1 + R2 + R3\n\n    # Calculate current through the circuit\n    I = Vs / R_total\n\n    # Calculate power dissipated by each resistor\n    P1 = (I**2) * R1 * 1000  # Power in mW\n    P2 = (I**2) * R2 * 1000  # Power in mW\n    P3 = (I**2) * R3 * 1000  # Power in mW\n\n    # Return the power dissipated by each resistor as a list\n    return [P1, P2, P3]",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "maxku/cv-imageprocessing11-histogram.json",
    "question": "An image has the gray level PDF $p_r(r)$ shown in Fig. Q1a. One wants to do histogram specification SO that the processed image will have the specified $p_z(z)$ shown in Fig. Q1b. Can we use intensity mapping function $T: z=1-r$ to achieve the goal?",
    "prediction": 0,
    "answer": false,
    "rationale": "To determine if we can use the intensity mapping function $T: z=1-r$ to achieve the goal, we need to check if the transformation will result in the desired probability density function $p_z(z)$.\n\nFirst, let's find the transformation function $T^{-1}: r=1-z$. Now, we can find the probability density function $p_r(r)$ after the transformation:\n\n$p_r(r) = p_z(z) \\cdot \\left|\\frac{dz}{dr}\\right|$\n\nSince $z=1-r$, we have $\\frac{dz}{dr} = -1$. Therefore, the absolute value of the derivative is 1.\n\nNow, we need to check if $p_r(r) = p_z(1-r)$ for all values of $r$. If this condition holds true, then the intensity mapping function $T: z=1-r$ can be used to achieve the goal.\n\nHowever, without the actual figures (Fig. Q1a and Fig. Q1b) showing the gray level PDFs $p_r(r)$ and $p_z(z)$, we cannot determine if this condition holds true or not. Therefore, we cannot provide a definitive answer to the question.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "maxku/ipnetwork9-datatransmission.json",
    "question": "Suppose Host A wants to send a large file to Host B. The path from Host A to Host B has three links, of rates R1 = 500 kbps, R2 = 2 Mbps, and R3 = Mbps. Suppose the file is 4 million bytes. Dividing the file size by the throughput, roughly how many seconds will it take to transfer the file to Host B?",
    "prediction": 64.0,
    "answer": 64,
    "rationale": "def solve():\n  # Convert rates to bytes per second\n  R1 = 500 * 1000 / 8\n  R2 = 2 * 1000 * 1000 / 8\n  R3 = 1 * 1000 * 1000 / 8\n\n  # Find the minimum rate (bottleneck)\n  bottleneck_rate = min(R1, R2, R3)\n\n  # Calculate the time to transfer the file\n  file_size = 4 * 1000 * 1000  # 4 million bytes\n  transfer_time = file_size / bottleneck_rate\n\n  return transfer_time",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "elainewan/math_algebra_3_3.json",
    "question": "What is the vector that spans the kernel of A = [[1, 0, 2, 4], [0, 1, -3, -1], [3, 4, -6, 8], [0, -1, 3, 4]]?",
    "prediction": [
      0.5345224838248486,
      -0.8017837257372732,
      -0.2672612419124245,
      2.4130490558023993e-16
    ],
    "answer": [
      -2,
      3,
      1,
      0
    ],
    "rationale": "def solve():\n    import numpy as np\n\n    A = np.array([[1, 0, 2, 4], [0, 1, -3, -1], [3, 4, -6, 8], [0, -1, 3, 4]])\n    _, _, Vt = np.linalg.svd(A)\n    kernel_basis = Vt[-1]\n\n    return kernel_basis.tolist()",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "wenhuchen/triangle1.json",
    "question": "Find the size of angle MBD in the figure below.",
    "prediction": 70,
    "answer": 72,
    "rationale": "",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/complete-metric-space2.json",
    "question": "Let L^1[0,2] be the space of all the Lebesgue integrable functions on the interval [0,2], and C[0,2] be the space of all the continuous functions on the interval [0,2]. Suppose H=L^1[0,2], and X=C[0,2]. For any f\\in L^1[0,2], define operator T as $(Tf)(x)=\\int_0^x f(t)dt$. For the linear operator T from H to X, what is the norm of T? For the linear operator T from H to H, what is the norm of T? Return the answers of two questions as a list. For example, if the norm for the first question is 2, the second is 3, then return [2,3].",
    "prediction": [
      1,
      2
    ],
    "answer": [
      1,
      2
    ],
    "rationale": "def solve():\n    # The norm of T as a linear operator from H to X is 1\n    norm_H_to_X = 1\n\n    # The norm of T as a linear operator from H to H is 2\n    norm_H_to_H = 2\n\n    return [norm_H_to_X, norm_H_to_H]",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "mingyin/fourier-analysis1.json",
    "question": "suppose $-\\pi<x<\\pi$. what is the value of $(\\sum_{n=1}^{\\infty}(-1)^{n-1} \\frac{cos(nx)}{n})/log(2cos(x/2))$? Rounding it to the hundredths place and return the value.",
    "prediction": 0,
    "answer": 1.0,
    "rationale": "def solve(x, tolerance=1e-8, max_iterations=1000):\n    import math\n\n    def cos_series(x, tolerance, max_iterations):\n        sum_cos = 0\n        term = 1\n        n = 0\n        while abs(term) > tolerance and n < max_iterations:\n            sum_cos += term\n            n += 1\n            term *= -1 * x**2 / ((2 * n) * (2 * n - 1))\n        return sum_cos\n\n    def log_base_2_cos_x_over_2(x):\n        return math.log(2 * cos_series(x / 2, tolerance, max_iterations), 2)\n\n    sum_series = 0\n    n = 1\n    term = cos_series(n * x, tolerance, max_iterations) / n\n    while abs(term) > tolerance and n < max_iterations:\n        sum_series += term\n        n += 1\n        term = (-1)**(n - 1) * cos_series(n * x, tolerance, max_iterations) / n\n\n    ans = sum_series / log_base_2_cos_x_over_2(x)\n    return round(ans, 2)",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/math_abstact_algebra_7.json",
    "question": "What is the order of group Z_{18}?",
    "prediction": 18,
    "answer": 18,
    "rationale": "def solve():\n  n = 18\n  return n",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/covariance3.json",
    "question": "Assuming $x$ and $y$ are both 2-d random variable. The covariance matrix of $x=((1,2),(2,3),(3,3),(4,4))$, $y=((3,4),(1,5),(5,3),(3,3))$ is $Cov$. What is summation of the eigenvalue of $Cov$?",
    "prediction": 4.437499999999998,
    "answer": 2.767,
    "rationale": "def solve():\n    import numpy as np\n\n    x = np.array([[1, 2], [2, 3], [3, 3], [4, 4]])\n    y = np.array([[3, 4], [1, 5], [5, 3], [3, 3]])\n\n    # Calculate the covariance matrix\n    cov_matrix = np.cov(x.T, y.T, bias=True)\n\n    # Calculate the eigenvalues\n    eigenvalues, _ = np.linalg.eig(cov_matrix)\n\n    # Sum the eigenvalues\n    ans = np.sum(eigenvalues)\n\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/cantor-set1.json",
    "question": "is 1/4 belongs to Cantor set? Is 1/13 belongs to Cantor set? Return the two answers as a list with 1 for yes and 0 for no. For example, if you think both belong to Cantor set, return [1,1]",
    "prediction": 0,
    "answer": [
      1,
      1
    ],
    "rationale": "def solve():\n    def is_in_cantor_set(x):\n        while x > 0:\n            if int(x * 3) % 3 == 1:\n                return 0\n            x = x * 3 - int(x * 3)\n        return 1\n\n    ans = [is_in_cantor_set(1/4), is_in_cantor_set(1/13)]\n    return ans",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "elainewan/math_algebra_6_3.json",
    "question": "What is the determinant of matrix [[0, 1, 2], [7, 8, 3], [6, 5, 4]]?",
    "prediction": -36.0,
    "answer": -36,
    "rationale": "def solve():\n  import numpy as np\n\n  matrix = np.array([[0, 1, 2], [7, 8, 3], [6, 5, 4]])\n  ans = np.linalg.det(matrix)\n  return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/bisection2.json",
    "question": "Find the interval in which the smallest positive root of the following equations lies: x^3 - x - 4 = 0. Determine the roots correct to two decimal places using the bisection method",
    "prediction": [
      [
        1,
        2
      ],
      1.79
    ],
    "answer": 1.8,
    "rationale": "def solve():\n    import numpy as np\n\n    def f(x):\n        return x**3 - x - 4\n\n    def bisection(a, b, tol):\n        while (b - a) / 2 > tol:\n            c = (a + b) / 2\n            if f(c) == 0:\n                return c\n            elif f(a) * f(c) < 0:\n                b = c\n            else:\n                a = c\n        return (a + b) / 2\n\n    # Find the interval in which the smallest positive root lies\n    a = 1\n    b = 2\n    while f(a) * f(b) > 0:\n        a += 1\n        b += 1\n\n    # Determine the root correct to two decimal places using the bisection method\n    tol = 0.01\n    root = bisection(a, b, tol)\n\n    return (a, b), round(root, 2)",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/fourier5-FT.json",
    "question": "Is the Fourier transform of the signal x(t)=(1-e^{-|t|})[u(t+1)-u(t-1)] real?",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if the Fourier transform of the given signal is real, we first need to find the Fourier transform of x(t). The given signal x(t) can be written as:\n\nx(t) = (1 - e^{-|t|})[u(t + 1) - u(t - 1)]\n\nwhere u(t) is the unit step function. We can split the signal into two parts:\n\nx(t) = (1 - e^{-t})[u(t + 1) - u(t - 1)] for t \u2265 0\nx(t) = (1 - e^{t})[u(t + 1) - u(t - 1)] for t < 0\n\nNow, we can find the Fourier transform of x(t) using the definition:\n\nX(\u03c9) = \u222b_{-\u221e}^{\u221e} x(t) e^{-j\u03c9t} dt\n\nFor t \u2265 0, we have:\n\nX(\u03c9) = \u222b_{-1}^{1} (1 - e^{-t}) e^{-j\u03c9t} dt\n\nFor t < 0, we have:\n\nX(\u03c9) = \u222b_{-1}^{1} (1 - e^{t}) e^{-j\u03c9t} dt\n\nNow, we need to check if the Fourier transform X(\u03c9) is real. To do this, we can check if the imaginary part of X(\u03c9) is zero. The imaginary part of X(\u03c9) can be found by taking the imaginary part of the integrals above.\n\nFor t \u2265 0, the imaginary part is:\n\nIm{X(\u03c9)} = \u222b_{-1}^{1} (1 - e^{-t}) (-sin(\u03c9t)) dt\n\nFor t < 0, the imaginary part is:\n\nIm{X(\u03c9)} = \u222b_{-1}^{1} (1 - e^{t}) (-sin(\u03c9t)) dt\n\nAdding the two integrals, we get:\n\nIm{X(\u03c9)} = \u222b_{-1}^{1} [(1 - e^{-|t|}) (-sin(\u03c9t))] dt\n\nNow, we can see that the integrand is an odd function of t, i.e., f(-t) = -f(t). Therefore, the integral of an odd function over a symmetric interval is zero:\n\nIm{X(\u03c9)} = 0\n\nSince the imaginary part of the Fourier transform X(\u03c9) is zero, the Fourier transform is real.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "tonyxia/score2.json",
    "question": "True or false: there exists a graph with score (1, 1, 2, 2, 3, 3, 4, 4).",
    "prediction": false,
    "answer": true,
    "rationale": "A graph's score, also known as its degree sequence, is a list of the degrees of its vertices in non-increasing order. The Havel-Hakimi theorem provides a method to determine if a given degree sequence is graphical, meaning that there exists a graph with that degree sequence.\n\nThe Havel-Hakimi algorithm works as follows:\n1. Sort the degree sequence in non-increasing order.\n2. Remove the first number (N) from the sequence.\n3. Subtract 1 from the next N numbers in the sequence.\n4. Repeat steps 1-3 until the sequence is all zeros or becomes invalid (contains negative numbers).\n\nApplying the Havel-Hakimi algorithm to the given degree sequence (1, 1, 2, 2, 3, 3, 4, 4):\n\n1. The sequence is already sorted: (1, 1, 2, 2, 3, 3, 4, 4)\n2. Remove the first number: (1, 2, 2, 3, 3, 4, 4)\n3. Subtract 1 from the next 1 number: (1, 1, 3, 3, 4, 4)\n4. Sort the sequence: (4, 4, 3, 3, 1, 1)\n5. Remove the first number: (4, 3, 3, 1, 1)\n6. Subtract 1 from the next 4 numbers: (3, 2, 0, 0)\n7. Sort the sequence: (3, 2, 0, 0)\n8. Remove the first number: (2, 0, 0)\n9. Subtract 1 from the next 2 numbers: (-1, -1)\n\nThe sequence has become invalid with negative numbers. Therefore, the answer is False.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "wenhuchen/synthetic_division.json",
    "question": "Determine the multiplicity of the root \u03be = 1, of the polynomial P(x) = x^5 - 2x^4 + 4x^3 - x^2 - 7x + 5 = 0 using synthetic division. Find P'(2) + P''(2).",
    "prediction": [
      0,
      163
    ],
    "answer": 163,
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the polynomial P(x)\n    def P(x):\n        return x**5 - 2*x**4 + 4*x**3 - x**2 - 7*x + 5\n\n    # Define the derivative of P(x)\n    def P_derivative(x):\n        return 5*x**4 - 8*x**3 + 12*x**2 - 2*x - 7\n\n    # Define the second derivative of P(x)\n    def P_double_derivative(x):\n        return 20*x**3 - 24*x**2 + 24*x - 2\n\n    # Synthetic division\n    def synthetic_division(coefficients, root):\n        new_coefficients = [coefficients[0]]\n        for i in range(1, len(coefficients)):\n            new_coefficients.append(coefficients[i] + new_coefficients[-1] * root)\n        return new_coefficients[:-1]\n\n    # Find the multiplicity of the root \u03be = 1\n    coefficients = [1, -2, 4, -1, -7, 5]\n    root = 1\n    multiplicity = 0\n\n    while True:\n        new_coefficients = synthetic_division(coefficients, root)\n        if new_coefficients[-1] == 0:\n            multiplicity += 1\n            coefficients = new_coefficients\n        else:\n            break\n\n    # Calculate P'(2) + P''(2)\n    result = P_derivative(2) + P_double_derivative(2)\n\n    return multiplicity, result",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "jianyu_xu/Stirling_number_first_kind_1.json",
    "question": "How many ways are there to partition a set of 5 elements into 3 non-empty cycles?",
    "prediction": 94,
    "answer": 35,
    "rationale": "def solve():\n    # We can use the formula for Stirling numbers of the first kind to solve this problem.\n    # The Stirling number of the first kind, S(n, k), represents the number of ways to partition a set of n elements into k non-empty cycles.\n    # S(n, k) = (k-1) * S(n-1, k-1) + n * S(n-1, k)\n    \n    def stirling_number(n, k):\n        if n == k or k == 1:\n            return 1\n        if k == 0 or n == 0:\n            return 0\n        return (k - 1) * stirling_number(n - 1, k - 1) + n * stirling_number(n - 1, k)\n\n    ans = stirling_number(5, 3)\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/signalprocessing15-DB.json",
    "question": "If the peak voltage value of a signal is 20 times the peak voltage value of the noise, what is the SNR? What is the $\\mathrm{SNR}_{\\mathrm{dB}}$ (in 3 sig.fig.)?",
    "prediction": [
      20.0,
      13.01
    ],
    "answer": 26.0,
    "rationale": "def solve():\n    import math\n\n    # Given values\n    peak_signal_voltage = 20\n    peak_noise_voltage = 1\n\n    # Calculate SNR\n    SNR = peak_signal_voltage / peak_noise_voltage\n\n    # Calculate SNR in dB (3 significant figures)\n    SNR_dB = round(10 * math.log10(SNR), 3)\n\n    return SNR, SNR_dB",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/semiconductor5.json",
    "question": "Find the fraction of the standard solar flux reaching the Earth (about 1000 W/m^2) available to a solar collector lying flat on the Earth\u2019s surface at Miami (latitude 26\u00b0N) at noon on the winter solstice.",
    "prediction": 760.405965600031,
    "answer": 0.656,
    "rationale": "import math\ndef solve():\n    latitude = 26\n    declination = -23.5\n    standard_solar_flux = 1000\n\n    angle_of_incidence = 90 - (latitude - declination)\n    fraction_of_solar_flux = math.cos(math.radians(angle_of_incidence))\n    solar_flux_available = standard_solar_flux * fraction_of_solar_flux\n\n    return solar_flux_available",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/quadrilateral2.json",
    "question": "ABCD is a Quadrilateral. E is the midpoint of BC. F is the midpoint of AD. Area of ABG=9 and Area of GEHF=21. What is the Area of CHD?",
    "prediction": 9.0,
    "answer": 12,
    "rationale": "def solve():\n  # Given area of ABG and GEHF\n  area_ABG = 9\n  area_GEHF = 21\n\n  # Since E and F are midpoints, the area of quadrilateral ABCD is twice the area of GEHF\n  area_ABCD = 2 * area_GEHF\n\n  # Now, we can find the area of triangle ABE by subtracting the area of triangle ABG from half of the area of quadrilateral ABCD\n  area_ABE = (area_ABCD / 2) - area_ABG\n\n  # Finally, we can find the area of triangle CHD by subtracting the area of triangle ABE from half of the area of quadrilateral ABCD\n  area_CHD = (area_ABCD / 2) - area_ABE\n\n  return area_CHD",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "panlu/standing_sound_wave1.json",
    "question": "On a day when the speed of sound is the fundamental frequency of a particular stopped organ pipe is 220 Hz. The second overtone of this pipe has the same wavelength as the third harmonic of an open pipe. How long is the open pipe? (Unit: m)",
    "prediction": 0.25984848484848483,
    "answer": 0.47,
    "rationale": "def solve():\n  # Constants\n  speed_of_sound = 343  # m/s (assuming room temperature)\n  \n  # Fundamental frequency of stopped pipe\n  f1 = 220  # Hz\n\n  # Wavelength of the fundamental frequency of stopped pipe\n  wavelength1 = speed_of_sound / f1\n\n  # Second overtone of stopped pipe is the third harmonic\n  # So, the frequency of the second overtone is 3 times the fundamental frequency\n  f2 = 3 * f1\n\n  # Wavelength of the second overtone of stopped pipe\n  wavelength2 = speed_of_sound / f2\n\n  # The third harmonic of an open pipe has the same wavelength as the second overtone of the stopped pipe\n  wavelength_open_pipe = wavelength2\n\n  # The length of the open pipe is half the wavelength of its third harmonic\n  length_open_pipe = wavelength_open_pipe / 2\n\n  return length_open_pipe",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xueguangma/dividend_discount_model_4.json",
    "question": "If a stock pays a $5 dividend this year, and the dividend has been growing 6% annually, what will be the stock\u2019s intrinsic value, assuming a required rate of return of 12%?",
    "prediction": 88.33333333333334,
    "answer": 88.33,
    "rationale": "def solve():\n    dividend = 5\n    growth_rate = 0.06\n    required_rate_of_return = 0.12\n\n    intrinsic_value = dividend * (1 + growth_rate) / (required_rate_of_return - growth_rate)\n    return intrinsic_value",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/random-walk3.json",
    "question": "A symmetric random walk on the three-dimensional cubic lattice Z^3 is transient or persistent? Return 1 for persistent and 0 for transient.",
    "prediction": 0,
    "answer": 0.0,
    "rationale": "def solve():\n    # In a symmetric random walk on the three-dimensional cubic lattice Z^3,\n    # the probability of returning to the origin is less than 1, which means\n    # the walk is transient.\n    return 0",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/kinetics2.json",
    "question": "The planet Pluto (radius 1180 km) is populated by three species of purple caterpillar. Studies have established the following facts: 1. A line of 5 mauve caterpillars is as long as a line of 7 violet caterpillars. 2. A line of 3 lavender caterpillars and 1 mauve caterpillar is as long as a line of 8 violet caterpillars. 3. A line of 5 lavender caterpillars, 5 mauve caterpillars and 2 violet caterpillars is 1 m long in total. 4.  A lavender caterpillar takes 10 s to crawl the length of a violet caterpillar. 5. Violet and mauve caterpillars both crawl twice as fast as lavender caterpillars. How many years would it take a mauve caterpillar to crawl around the equator of Pluto?",
    "prediction": 0.235101428921626,
    "answer": 23.0,
    "rationale": "def solve():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the length of each caterpillar as follows:\n    # Mauve caterpillar: m\n    # Violet caterpillar: v\n    # Lavender caterpillar: l\n\n    m, v, l = symbols('m v l')\n\n    # We can write the given facts as equations:\n    eq1 = Eq(5 * m, 7 * v)  # Fact 1\n    eq2 = Eq(3 * l + m, 8 * v)  # Fact 2\n    eq3 = Eq(5 * l + 5 * m + 2 * v, 100)  # Fact 3 (1 m = 100 cm)\n\n    # Solve the equations for m, v, and l\n    caterpillar_lengths = solve((eq1, eq2, eq3), (m, v, l))\n\n    # Fact 4: A lavender caterpillar takes 10 s to crawl the length of a violet caterpillar\n    time_lavender_crawl_violet = 10  # seconds\n\n    # Fact 5: Violet and mauve caterpillars both crawl twice as fast as lavender caterpillars\n    time_violet_crawl_violet = time_lavender_crawl_violet / 2\n    time_mauve_crawl_violet = time_lavender_crawl_violet / 2\n\n    # Calculate the time it takes for a mauve caterpillar to crawl its own length\n    time_mauve_crawl_mauve = time_mauve_crawl_violet * (caterpillar_lengths[m] / caterpillar_lengths[v])\n\n    # Calculate the distance around the equator of Pluto\n    pluto_radius = 1180 * 1000  # km to m\n    pluto_circumference = 2 * 3.14159265359 * pluto_radius\n\n    # Calculate the time it takes for a mauve caterpillar to crawl around the equator of Pluto\n    time_mauve_crawl_pluto = (pluto_circumference / caterpillar_lengths[m]) * time_mauve_crawl_mauve\n\n    # Convert the time to years\n    time_mauve_crawl_pluto_years = time_mauve_crawl_pluto / (60 * 60 * 24 * 365)\n\n    return time_mauve_crawl_pluto_years",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/differential_equation2.json",
    "question": "Is (t-y)y' - 2y +3t + y^2/t = 0 an Euler homogeneous equation?",
    "prediction": false,
    "answer": true,
    "rationale": "An Euler homogeneous equation is a differential equation of the form:\n\na(t)y'' + b(t)y' + c(t)y = 0\n\nwhere a(t), b(t), and c(t) are functions of t only, and the equation is homogeneous if the sum of the powers of t in a(t), b(t), and c(t) is the same for all terms.\n\nLet's examine the given equation:\n\n(t-y)y' - 2y + 3t + y^2/t = 0\n\nFirst, we need to rewrite the equation in the form of a(t)y'' + b(t)y' + c(t)y = 0. To do this, we can rearrange the terms:\n\ny' - y/t = (2y - 3t - y^2/t)/t\n\nNow, we can rewrite the equation as:\n\ny' - (1/t)y = (2/t)y - 3 - (y/t^2)y\n\nComparing this equation to the general form of an Euler homogeneous equation, we can see that it does not fit the form since the coefficients of y' and y are not functions of t only. Additionally, the sum of the powers of t in the coefficients is not the same for all terms.\n\nTherefore, the answer is False.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "maxku/ipnetwork15-application-chord.json",
    "question": "In Chord, assume the size of the identifier space is 16. The active nodes are N3, N6, N8 and N12. Show all the target key (in ascending order, ignore the node's identifier itself) for N6.",
    "prediction": [
      0,
      1,
      2,
      4,
      5,
      7,
      9,
      10,
      11,
      13,
      14,
      15
    ],
    "answer": [
      7,
      8,
      10,
      14
    ],
    "rationale": "def solve():\n    identifier_space = 16\n    active_nodes = [3, 6, 8, 12]\n    target_node = 6\n\n    target_keys = []\n    for i in range(1, identifier_space):\n        key = (target_node + i) % identifier_space\n        if key not in active_nodes:\n            target_keys.append(key)\n\n    return sorted(target_keys)",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "wenhuchen/chain_rule1.json",
    "question": "If z = arctan(e^{1 + (1 + x)^2}), what's the derivative of $\\frac{\\partial z}{\\partial x}$ at x = 0.",
    "prediction": 0.26580222883408,
    "answer": 0.3017,
    "rationale": "def solve():\n    import sympy as sp\n\n    x = sp.Symbol('x')\n    z = sp.atan(sp.exp(1 + (1 + x)**2))\n    dz_dx = sp.diff(z, x)\n    ans = dz_dx.subs(x, 0)\n\n    return ans.evalf()",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/jensen3.json",
    "question": "If a,b,c,d > 0 and c^2 + d^2 = (a^2 + b^2)^3, is a^3/c + b^3/d < 1?",
    "prediction": true,
    "answer": false,
    "rationale": "We are given that c^2 + d^2 = (a^2 + b^2)^3 and we want to determine if a^3/c + b^3/d < 1.\n\nFirst, let's rewrite the inequality as a^3d + b^3c < cd. Now, we will use the given equation to manipulate the inequality.\n\nSince c^2 + d^2 = (a^2 + b^2)^3, we can write it as c^2 + d^2 = a^6 + 3a^4b^2 + 3a^2b^4 + b^6.\n\nNow, let's consider the left side of the inequality, a^3d + b^3c. We want to show that this is less than cd.\n\nNotice that a^6 + b^6 \u2265 a^3d + b^3c, because a^6 and b^6 are the smallest terms in the expansion of (a^2 + b^2)^3. \n\nSince a^6 + b^6 \u2265 a^3d + b^3c, we can write the inequality as:\n\na^6 + b^6 \u2265 a^3d + b^3c > cd.\n\nNow, we know that a^6 + 3a^4b^2 + 3a^2b^4 + b^6 = c^2 + d^2. Since a^6 + b^6 > cd, it follows that:\n\n3a^4b^2 + 3a^2b^4 > c^2 + d^2 - cd.\n\nSince a, b, c, and d are all positive, the left side of this inequality is positive. Therefore, the right side must also be positive:\n\nc^2 + d^2 - cd > 0.\n\nNow, let's consider the inequality a^3d + b^3c < cd. Since a^6 + b^6 > cd, we can write:\n\na^3d + b^3c < cd < a^6 + b^6.\n\nThus, we have shown that a^3d + b^3c < cd, which means that a^3/c + b^3/d < 1.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "mingyin/series2.json",
    "question": "What is the value of the series $\\sum_{k=1}^{\\infty} \\frac{(-1)^{k-1}}{k} \\sum_{n=0}^{\\infty} \\frac{1}{k 2^n+1}$?",
    "prediction": 0.99999999985001,
    "answer": 1.0,
    "rationale": "def solve():\n    import math\n\n    def inner_sum(k):\n        n = 0\n        total = 0\n        term = 1 / (k + 1)\n        while term > 1e-10:\n            total += term\n            n += 1\n            term = 1 / (k * 2**n + 1)\n        return total\n\n    k = 1\n    ans = 0\n    term = inner_sum(k) / k\n    while abs(term) > 1e-10:\n        ans += (-1)**(k-1) * term\n        k += 1\n        term = inner_sum(k) / k\n\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/math_calculus_9_3.json",
    "question": "Find the arc length of y = x^{-1} over the interval [1,2] using the Simpson's Rule S_8.",
    "prediction": 1.2220234154134575,
    "answer": 1.132,
    "rationale": "def solve():\n    import numpy as np\n\n    def f(x):\n        return 1/x\n\n    def arc_length_derivative(x):\n        return np.sqrt(1 + (1/x**2))\n\n    def simpsons_rule(a, b, n, func):\n        h = (b - a) / n\n        x = np.linspace(a, b, n + 1)\n        y = func(x)\n        return h / 3 * np.sum(y[0:-1:2] + 4 * y[1::2] + y[2::2])\n\n    a = 1\n    b = 2\n    n = 8\n\n    ans = simpsons_rule(a, b, n, arc_length_derivative)\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/relativity3.json",
    "question": "An observer S who lives on the x-axis sees a flash of red light at x = 1210 m, then after 4.96 \u00b5s, a flash of blue at x = 480 m. Use subscripts R and B to label the coordinates of the events. What is the measured time interval (in \u00b5s) between these flashes?",
    "prediction": 4.956882920110193,
    "answer": 4.32,
    "rationale": "def solve():\n  # Given coordinates of red and blue flashes\n  x_R = 1210\n  x_B = 480\n\n  # Given time interval between the flashes\n  time_interval = 4.96\n\n  # Calculate the distance between the flashes\n  distance = abs(x_R - x_B)\n\n  # Calculate the time interval between the flashes\n  time_interval_measured = time_interval * (1 - (distance / (2 * x_R * x_B)))\n\n  return time_interval_measured",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/quantum2.json",
    "question": "Calculate the momentum uncertainty of a tennis ball constrained to be in a fence enclosure of length 35 m surrounding the court in kg m/s.",
    "prediction": 8.587227514285715e-38,
    "answer": 3e-36,
    "rationale": "def solve():\n  h_bar = 1.0545718e-34  # Reduced Planck constant in J s\n  delta_x = 35  # Length of the fence enclosure in meters\n  m_tennis_ball = 0.057  # Mass of a tennis ball in kg\n\n  # Using Heisenberg's uncertainty principle: delta_p * delta_x >= h_bar / 2\n  delta_p = h_bar / (2 * delta_x)  # Momentum uncertainty in kg m/s\n\n  return delta_p * m_tennis_ball",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/optics3.json",
    "question": "The image produced by a concave mirror is at -16.2m, and the magnification is 1.79. What is the object distance in terms of meter?",
    "prediction": 9.050279329608937,
    "answer": 9.05,
    "rationale": "def solve():\n    image_distance = -16.2\n    magnification = 1.79\n\n    # Using the magnification formula: magnification = - (image_distance / object_distance)\n    object_distance = - (image_distance / magnification)\n\n    return object_distance",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "maxku/ipnetwork21-ip.json",
    "question": "Consider the following graph, with links costs listed, and assume we are using shortest-path (or lowest-cost) routing, and that routing has equilibrated to a constant set of routing tables. The routing algorithm uses poisoned reverse, advertising an infinite weight for the poisoned paths. What distance does C advertise to B?",
    "prediction": [
      1.528,
      0.0
    ],
    "answer": 5,
    "rationale": "",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/signalprocessing13-Ztransform.json",
    "question": "The difference equation of a digital system is given by $$ y[n]=8 x[n]+2 x[n-1]-x[n-2], $$ where $x[n]$ and $y[n]$ are, respectively the current samples of the input and the output signals of the system. Determine if the system is a FIR.",
    "prediction": true,
    "answer": true,
    "rationale": "An FIR (Finite Impulse Response) system is a system where the output depends only on the current and past input samples, and not on any past output samples. In the given difference equation, we can see that the output y[n] depends only on the current and past input samples x[n], x[n-1], and x[n-2]. There are no terms involving past output samples.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "maxku/cv-imageprocessing15-DCT-2.json",
    "question": "The 4 8x8 images shown below are encoded with JPEG coding. Based on their expected DCT (Discrete Cosine Transform) coefficients, Which image has the most non-zero AC coefficients? (a): Image A, (b): Image B, (c): Image C, (d): Image D.",
    "prediction": 0,
    "answer": "(b)",
    "rationale": "Unfortunately, I cannot see the images you are referring to. Please provide a description of the images or their characteristics, and I will be happy to help you determine which image has the most non-zero AC coefficients.",
    "answer_type": "option",
    "correct": false
  },
  {
    "id": "panlu/energy_conservation1.json",
    "question": "In Jules Verne's 1865 story with this title, three men went to the moon in a shell fired from a giant cannon sunk in the earth in Florida. Find the minimum muzzle speed that would allow a shell to escape from the earth completely (the escape speed). Neglect air resistance, the earth's rotation, and the gravitational pull of the moon. The earth's radius and mass are $R_E}=$ $6.38 \\times 10^6 m$ and $m_E=5.97 \\times 10^{24} kg$. (Unit: 10 ^ 4 m/s)",
    "prediction": 1.1176213405331195,
    "answer": 1.12,
    "rationale": "def solve():\n  import math\n\n  # Constants\n  G = 6.67430 * 10**(-11)  # Gravitational constant, m^3 kg^(-1) s^(-2)\n  R_E = 6.38 * 10**6  # Earth's radius, m\n  m_E = 5.97 * 10**24  # Earth's mass, kg\n\n  # Calculate escape speed\n  escape_speed = math.sqrt(2 * G * m_E / R_E)\n\n  # Convert to 10^4 m/s\n  ans = escape_speed / 10**4\n\n  return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "jianyu_xu/pigeonhole_4.json",
    "question": "In a group of 1000 people, at least how many people have to share the same birthday?",
    "prediction": 3,
    "answer": 3,
    "rationale": "def solve():\n  # We will use the Pigeonhole Principle to solve this problem\n  # There are 365 days in a year (ignoring leap years), so there are 365 \"pigeons\" (birthdays)\n  # There are 1000 people, so there are 1000 \"holes\" (people)\n  # According to the Pigeonhole Principle, at least one of the 365 days must have ceil(1000/365) people sharing the same birthday\n  import math\n  ans = math.ceil(1000/365)\n  return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "mingyin/cayley-theorem1.json",
    "question": "given a finite group A, and a collection of permutations B. Then (a) there exists B such that A is isomorphic to B; (b) for any B, A is isomorphic to B; (c) A can never be isomorphic to B; (d) none of the above. Which option is correct?",
    "prediction": "(a)",
    "answer": "(a)",
    "rationale": "Therefore, the answer is (a).",
    "answer_type": "option",
    "correct": true
  },
  {
    "id": "jianyu_xu/pigeonhole_5.json",
    "question": "In a set of 20 positive integers, at least how many pairs of numbers have a difference that is a multiple of 10?",
    "prediction": 1,
    "answer": 10,
    "rationale": "def solve():\n    # We can use the Pigeonhole Principle to solve this problem.\n    # We have 20 positive integers and we want to find the minimum number of pairs with a difference that is a multiple of 10.\n    # We can divide the integers into 10 groups based on their remainders when divided by 10 (0, 1, 2, ..., 9).\n    # By the Pigeonhole Principle, at least one group will have at least 2 integers (20 integers and 10 groups).\n    # Any two integers in the same group will have a difference that is a multiple of 10.\n    # Therefore, the minimum number of pairs with a difference that is a multiple of 10 is 1.\n\n    return 1",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/implicit-function-theorem2.json",
    "question": "suppose F(x,y,z)=0. What is $\\frac{\\partial x}{\\partial y} \\frac{\\partial y}{\\partial z} \\frac{\\partial z}{\\partial x}$?",
    "prediction": -1,
    "answer": -1.0,
    "rationale": "def solve():\n    # The given equation is F(x, y, z) = 0\n    # We need to find the product of partial derivatives:\n    # \u2202x/\u2202y * \u2202y/\u2202z * \u2202z/\u2202x\n\n    # Since we don't have any specific function F(x, y, z), we cannot compute the partial derivatives.\n    # However, we can use the cyclic property of partial derivatives to simplify the expression.\n\n    # According to the cyclic property:\n    # \u2202x/\u2202y * \u2202y/\u2202z * \u2202z/\u2202x = -1\n\n    ans = -1\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/optics1.json",
    "question": "Suppose a student who was farsighted wears glasses that allows him to read at a distance of 20cm from his eyes to the book. His near-point distance is 63cm. If his glasses are 1.5cm from his eyes, what is the refractive power of his glasses lenses?",
    "prediction": -3.7793891452428037,
    "answer": 3.846,
    "rationale": "def solve():\n  # Given values\n  near_point_distance = 63  # in cm\n  reading_distance = 20  # in cm\n  glasses_distance = 1.5  # in cm\n\n  # Calculate the image distance (di) and object distance (do)\n  di = reading_distance - glasses_distance\n  do = near_point_distance - glasses_distance\n\n  # Calculate the refractive power (P) using the lens formula: 1/f = 1/do - 1/di\n  P = (1 / do) - (1 / di)\n\n  # Convert the refractive power to diopters\n  P_diopters = P * 100\n\n  return P_diopters",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/euler's_method1.json",
    "question": "Suppose we have the following differential equation with the initial condition: $\\frac{\\partial p}{\\partial x} = 0.5 * x * (1-x)$ and $p(0)=2$. Use Euler's method to approximate p(2), using step of 1.",
    "prediction": 2.0,
    "answer": 2.0,
    "rationale": "def solve():\n    def dp_dx(x):\n        return 0.5 * x * (1 - x)\n\n    x = 0\n    p = 2\n    step = 1\n\n    for _ in range(2):\n        p += dp_dx(x) * step\n        x += step\n\n    return p",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/differential_equation5.json",
    "question": "Is the differential equation $2tyy' + 2t + ty^2 = 0$ the total derivative of the potential function $\\phi(t, y) = t^2 + ty^2$?",
    "prediction": false,
    "answer": false,
    "rationale": "To determine if the given differential equation is the total derivative of the potential function, we need to compute the partial derivatives of the potential function with respect to t and y, and then compare them with the given differential equation.\n\nThe potential function is given by:\n$\\phi(t, y) = t^2 + ty^2$\n\nNow, let's compute the partial derivatives:\n\n$\\frac{\\partial \\phi}{\\partial t} = 2t + y^2$\n\n$\\frac{\\partial \\phi}{\\partial y} = 2ty$\n\nNow, let's compute the total derivative of the potential function:\n\n$d\\phi = \\frac{\\partial \\phi}{\\partial t} dt + \\frac{\\partial \\phi}{\\partial y} dy$\n\n$d\\phi = (2t + y^2) dt + (2ty) dy$\n\nNow, let's compare this with the given differential equation:\n\n$2tyy' + 2t + ty^2 = 0$\n\nWe can rewrite the differential equation as:\n\n$2ty \\frac{dy}{dt} + 2t + ty^2 = 0$\n\nComparing this with the total derivative of the potential function, we can see that they are not the same:\n\n$d\\phi = (2t + y^2) dt + (2ty) dy \\neq 2ty \\frac{dy}{dt} + 2t + ty^2$\n\nTherefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "xinyi/neural_networks.json",
    "question": "Consider a two-layer fully-connected neural network in which the hidden-unit nonlinear activation functions are given by logistic sigmoid functions. Does there exist an equivalent network in which the hidden unit nonlinear activation functions are given by hyperbolic tangent functions?",
    "prediction": true,
    "answer": true,
    "rationale": "Yes, there exists an equivalent network with hyperbolic tangent activation functions. This is because the logistic sigmoid function can be transformed into a hyperbolic tangent function by the following equation:\n\ntanh(x) = 2 * sigmoid(2x) - 1\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "xinyi/kraft_inequality.json",
    "question": "Let $C$ be a variable length code that satisfies the Kraft inequality with equality but does not satisfy the prefix condition. Then $C$ has finite decoding delay. True or False?",
    "prediction": false,
    "answer": false,
    "rationale": "Therefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "maxku/ipnetwork19-tcp.json",
    "question": "Fig.Q3 shows an excerpt of the transmission phase of a TCP connection. Assume the length of the IP header is 20 bytes. What is the ACK number at message 6?",
    "prediction": [
      1.528,
      0.0
    ],
    "answer": 839,
    "rationale": "",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "xinyi/chi_square_test.json",
    "question": "The Chi-square statistic $\\chi^2=\\sum_c\\frac{(P(x)-Q(x))^2}{Q(x)}$ is (twice) the first term in the Taylor series expansion of $D(P||Q)$ about $Q$. True or False?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "wenhuchen/compound_interest1.json",
    "question": "A teacher wants to invest $30,000 into an account that compounds annually. The interest rate at this bank is 1.8%. How much money will be in the account after 6 years?",
    "prediction": 33389.34678034261,
    "answer": 33389.35,
    "rationale": "def solve():\n  principal = 30000\n  interest_rate = 0.018\n  years = 6\n\n  future_value = principal * (1 + interest_rate) ** years\n  return future_value",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/Bounded-variation1.json",
    "question": "Let f be a real function on [0,1]. If the bounded variation of f on [0,1] equals f(1)-f(0), then: (a) f is increasing on [0,1]; (b) f is decreasing on [0,1]; (c) None of the above. Which one is correct?",
    "prediction": "(a)",
    "answer": "(a)",
    "rationale": "Therefore, the answer is (a).",
    "answer_type": "option",
    "correct": true
  },
  {
    "id": "jianyu_xu/Stirling_number_second_kind_6.json",
    "question": "In how many ways can a set of 6 distinct letters be partitioned into 3 non-empty groups if each group must contain at least 2 letters?",
    "prediction": 180,
    "answer": 15,
    "rationale": "def solve():\n    from math import comb\n\n    # We have 6 distinct letters and we want to partition them into 3 non-empty groups.\n    # Each group must contain at least 2 letters.\n    # Let's consider the possible cases for the groups' sizes: (2, 2, 2), (2, 2, 3), and (2, 3, 4).\n\n    # Case 1: (2, 2, 2)\n    # We have 3 pairs of letters, so we can choose the first pair in C(6, 2) ways,\n    # the second pair in C(4, 2) ways, and the last pair in C(2, 2) ways.\n    case1 = comb(6, 2) * comb(4, 2) * comb(2, 2)\n\n    # Case 2: (2, 2, 3)\n    # We can choose the first pair in C(6, 2) ways, the second pair in C(4, 2) ways,\n    # and the last group of 3 letters is determined.\n    case2 = comb(6, 2) * comb(4, 2)\n\n    # Case 3: (2, 3, 4)\n    # We can choose the first pair in C(6, 2) ways, and the remaining 4 letters form the second group.\n    # The last group is empty, so this case is not valid.\n\n    ans = case1 + case2\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "panlu/uniform_circular_motion1.json",
    "question": "An Aston Martin V8 Vantage sports car has a lateral acceleration of $0.96g = (0.96)(9.8 m / s^2) = 9.4 m / s^2$. This is the maximum centripetal acceleration the car can sustain without skidding out of a curved path. If the car is traveling at a constant 40m/s on level ground, what is the radius R of the tightest unbanked curve it can negotiate? (Unit: m))",
    "prediction": 170.06802721088437,
    "answer": 170,
    "rationale": "def solve():\n  # import library\n  import math\n\n  # given values\n  lateral_acceleration = 0.96 * 9.8  # m/s^2\n  speed = 40  # m/s\n\n  # formula for centripetal acceleration: a_c = v^2 / R\n  # solving for R: R = v^2 / a_c\n  radius = math.pow(speed, 2) / lateral_acceleration\n\n  return radius",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "mingyin/double-integral3.json",
    "question": "compute the integral $\\iint_V \\frac{d x d y d z}{(1+x+y+z)^3}$, where V={(x, y, z): x, y, z \\geq 0, x+y+z\\leq 1}.",
    "prediction": 0.03407359027997265,
    "answer": 0.034,
    "rationale": "def solve():\n    from scipy.integrate import tplquad\n\n    def integrand(x, y, z):\n        return 1 / (1 + x + y + z)**3\n\n    def z_lower(x, y):\n        return 0\n\n    def z_upper(x, y):\n        return 1 - x - y\n\n    def y_lower(x):\n        return 0\n\n    def y_upper(x):\n        return 1 - x\n\n    x_lower = 0\n    x_upper = 1\n\n    ans, _ = tplquad(integrand, x_lower, x_upper, y_lower, y_upper, z_lower, z_upper)\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/stokes-theorem1.json",
    "question": "compute the integral $\\iint_{\\Sigma} x^3 dy*dz +y^3 dz*dx+z^3 dx*dy$, where is the outward of the ellipsoid x^2+y^2+z^2/4=1. Round the answer to the thousands decimal.",
    "prediction": 0,
    "answer": 30.15928896,
    "rationale": "def solve():\n    from scipy.integrate import nquad\n    import numpy as np\n\n    # Define the limits of integration\n    def z_lower(x, y):\n        return -2 * np.sqrt(1 - x**2 - y**2)\n\n    def z_upper(x, y):\n        return 2 * np.sqrt(1 - x**2 - y**2)\n\n    def y_lower(x):\n        return -np.sqrt(1 - x**2)\n\n    def y_upper(x):\n        return np.sqrt(1 - x**2)\n\n    # Define the integrand function\n    def integrand(z, y, x):\n        return x**3 + y**3 + z**3\n\n    # Compute the integral\n    ans, _ = nquad(integrand, [z_lower, z_upper, y_lower, y_upper], [-1, 1])\n    return round(ans, 3)",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "jianyu_xu/Chinese_Remainder_Theorem_5.json",
    "question": "Find the smallest positive integer that leaves a remainder of 1 when divided by 2, a remainder of 2 when divided by 3, a remainder of 3 when divided by 4, and a remainder of 4 when divided by 5.",
    "prediction": 0,
    "answer": 59,
    "rationale": "def solve():\n    num = 1\n    while True:\n        if num % 2 == 1 and num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/basic-electronics-6-1.json",
    "question": "Given the following circuit (with all current and voltage values in rms), find the value of $V_C$ in the unit of V.",
    "prediction": 3.84,
    "answer": 14.5,
    "rationale": "",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/circular2.json",
    "question": "Tangent Circle at C. AB: common tangent. \u2220OQB=112. What is \u2220BAC? Return the numeric value.",
    "prediction": 56.0,
    "answer": 34.0,
    "rationale": "def solve():\n    # Given angle OQB\n    angle_OQB = 112\n\n    # Using the property of tangent circles, the angle between the common tangent and the line connecting the centers is half the angle between the radii\n    angle_BAC = angle_OQB / 2\n\n    return angle_BAC",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/ipnetwork1-ip.json",
    "question": "In an IPv4 datagram, the value of the total-length field is $(00 \\mathrm{~A} 0)_{16}$ and the value of the headerlength (HLEN) is (5) $1_{16}$. How many bytes of payload are being carried by the datagram?",
    "prediction": 156,
    "answer": 140,
    "rationale": "def solve():\n  total_length_hex = \"00A0\"\n  header_length_hex = \"51\"\n\n  # Convert hex to decimal\n  total_length_decimal = int(total_length_hex, 16)\n  header_length_decimal = int(header_length_hex, 16)\n\n  # Calculate the number of 32-bit words in the header\n  header_length_words = header_length_decimal & 0x0F\n\n  # Calculate the header length in bytes\n  header_length_bytes = header_length_words * 4\n\n  # Calculate the payload length in bytes\n  payload_length = total_length_decimal - header_length_bytes\n\n  return payload_length",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/definite_matrix1.json",
    "question": "Consider the matrix of A=[[1, 4], [4, 1]], is this a positive definite matrix?",
    "prediction": false,
    "answer": false,
    "rationale": "To determine if a matrix is positive definite, we can check if all its eigenvalues are positive. Let's find the eigenvalues of matrix A:\n\nA = [[1, 4], [4, 1]]\n\nThe characteristic equation is given by the determinant of (A - \u03bbI) = 0, where \u03bb is the eigenvalue and I is the identity matrix.\n\n(A - \u03bbI) = [[1 - \u03bb, 4], [4, 1 - \u03bb]]\n\nThe determinant is:\n\n(1 - \u03bb)^2 - (4 * 4) = \u03bb^2 - 2\u03bb - 15\n\nThe roots of this quadratic equation are the eigenvalues of matrix A. We can use the quadratic formula to find the roots:\n\n\u03bb = (-b \u00b1 \u221a(b^2 - 4ac)) / 2a\n\nIn this case, a = 1, b = -2, and c = -15:\n\n\u03bb = (2 \u00b1 \u221a((-2)^2 - 4(1)(-15))) / 2(1)\n\u03bb = (2 \u00b1 \u221a(64)) / 2\n\u03bb = (2 \u00b1 8) / 2\n\nThe two eigenvalues are:\n\n\u03bb1 = (2 + 8) / 2 = 10 / 2 = 5\n\u03bb2 = (2 - 8) / 2 = -6 / 2 = -3\n\nSince one of the eigenvalues (\u03bb2 = -3) is negative, the matrix A is not positive definite.\n\nTherefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "panlu/force_and_power1.json",
    "question": "Each of the four jet engines on an Airbus A380 airliner develops athrust (a forward force on the airliner) of 322,000 N (72,000 lb).When the airplane is flying at 250 m/s, what horsepower does each engine develop? (Unit: hp)",
    "prediction": 107952.25962183184,
    "answer": 108000,
    "rationale": "def solve():\n  thrust = 322000  # Newtons\n  velocity = 250  # m/s\n  work_done = thrust * velocity  # Work done = Force x Distance\n  watts = work_done  # 1 Watt = 1 Joule per second\n  hp_conversion = 745.7  # 1 hp = 745.7 Watts\n  horsepower = watts / hp_conversion\n  return horsepower",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/Limit-of-sequence4.json",
    "question": "suppose the sequence a_n satisfies $lim_{n\\rightarrow\\infty}a_n\\sum_{i=1}^n a_i^2=1$. What is the limit of  3n(a_n)^3?",
    "prediction": 0,
    "answer": 1.0,
    "rationale": "def solve():\n    import sympy as sp\n\n    n = sp.Symbol('n')\n    a_n = sp.Function('a_n')(n)\n    sum_a_i_squared = sp.Sum(a_n**2, (n, 1, n))\n    limit_a_n_sum = sp.limit(a_n * sum_a_i_squared, n, sp.oo)\n\n    # Given that the limit of a_n * sum_a_i_squared is 1\n    limit_eq = sp.Eq(limit_a_n_sum, 1)\n\n    # Solve for a_n\n    a_n_sol = sp.solve(limit_eq, a_n)[0]\n\n    # Now find the limit of 3n(a_n)^3\n    limit_3n_a_n_cubed = sp.limit(3 * n * a_n_sol**3, n, sp.oo)\n\n    return limit_3n_a_n_cubed",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/cramer's_rule1.json",
    "question": "For the two linear equations $2 * x + 3 * y = 10$ and $4 * x + 4 * y = 12$ iwth variables x and y. Use cramer's rule to solve these two variables.",
    "prediction": [
      -1.0000000000000004,
      3.9999999999999996
    ],
    "answer": [
      -1,
      4
    ],
    "rationale": "def solve():\n    import numpy as np\n\n    # Coefficients of the linear equations\n    A = np.array([[2, 3], [4, 4]])\n    B = np.array([10, 12])\n\n    # Calculate the determinant of A\n    det_A = np.linalg.det(A)\n\n    # If the determinant is zero, the system has no unique solution\n    if det_A == 0:\n        return \"No unique solution\"\n\n    # Calculate the determinants of the matrices obtained by replacing the columns of A with B\n    A_x = A.copy()\n    A_x[:, 0] = B\n    det_A_x = np.linalg.det(A_x)\n\n    A_y = A.copy()\n    A_y[:, 1] = B\n    det_A_y = np.linalg.det(A_y)\n\n    # Use Cramer's rule to find the solutions\n    x = det_A_x / det_A\n    y = det_A_y / det_A\n\n    return [x, y]",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "wenhuchen/Adams-Bashforth1.json",
    "question": "The two-step Adams-Bashforth method of approximation uses the approximation scheme $y_{i+2}=y_{i+1} - 1/2 * hf(t_i,y_i)+ 3/2 * hf(t_{i+1},y_{i+1})$. Given that y(0)=1 and y(1)=2, use the Adams-Bashforth method to approximate y(3) for y=-y^2 with a step size of h=1.",
    "prediction": -3.5,
    "answer": -19.875,
    "rationale": "def solve():\n    # Import necessary libraries\n    import numpy as np\n\n    # Define the function f(t, y)\n    def f(t, y):\n        return -y**2\n\n    # Define the Adams-Bashforth method\n    def adams_bashforth(y0, y1, h):\n        t0 = 0\n        t1 = 1\n        y2 = y1 - 1/2 * h * f(t0, y0) + 3/2 * h * f(t1, y1)\n        return y2\n\n    # Set initial conditions\n    y0 = 1\n    y1 = 2\n    h = 1\n\n    # Calculate y(3) using the Adams-Bashforth method\n    ans = adams_bashforth(y0, y1, h)\n\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/Fluid_mechanics1.json",
    "question": "A parachutist with mass m=80 kg is undergoing free fall. The drag force applied on him is $F_D = kv^2$, where v is the velocity measured relative to the air. The constant k=0.27 [Ns^2/m^2] is given. Find the distance traveled h in meters, until v=0.95$v_t$ is achieved, where $v_t$ is the terminal velocity. Return the numeric value.",
    "prediction": 176.13199849975683,
    "answer": 345.0,
    "rationale": "def solve():\n    import math\n\n    m = 80  # mass of parachutist in kg\n    k = 0.27  # drag force constant in Ns^2/m^2\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Calculate terminal velocity\n    v_t = math.sqrt((2 * m * g) / k)\n\n    # Calculate the velocity at 0.95 * terminal velocity\n    v = 0.95 * v_t\n\n    # Calculate the distance traveled h using the formula h = (m/k) * (1 - exp(-k*v^2/(2*m*g)))\n    h = (m / k) * (1 - math.exp(-k * v**2 / (2 * m * g)))\n\n    return h",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/Lagrange's_multiplier2.json",
    "question": "Find the absolute minimum value of the function $f(x,y)=x^2+y^2$ subject to the constraint $x^2+2*y^2=1$.",
    "prediction": 0.5000000526757635,
    "answer": 0.5,
    "rationale": "def solve():\n    from scipy.optimize import minimize\n\n    # Objective function\n    def f(xy):\n        x, y = xy\n        return x**2 + y**2\n\n    # Constraint function\n    def constraint(xy):\n        x, y = xy\n        return x**2 + 2*y**2 - 1\n\n    # Initial guess\n    x0 = [0, 0]\n\n    # Define the constraint\n    cons = {'type': 'eq', 'fun': constraint}\n\n    # Minimize the objective function subject to the constraint\n    result = minimize(f, x0, constraints=cons)\n\n    # Return the minimum value\n    return result.fun",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/De_Moivre's_formula.json",
    "question": "What is $(\\frac{1 + cos(2x) + i*sin(2x)}{1 + cos(2x) - i*sin(2x)})^30$ with $x = \\pi / 60$?",
    "prediction": -0.9999999999999994,
    "answer": -1.0,
    "rationale": "def solve():\n  import math\n  import cmath\n\n  x = math.pi / 60\n  numerator = 1 + math.cos(2 * x) + 1j * math.sin(2 * x)\n  denominator = 1 + math.cos(2 * x) - 1j * math.sin(2 * x)\n  complex_result = (numerator / denominator) ** 30\n\n  return complex_result",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/math_algebra_7.json",
    "question": "Let A be an invertible n * n matrix and v and eigenvector of both A and B, is v necesarily an eigenvector of A + B?",
    "prediction": true,
    "answer": true,
    "rationale": "Let's consider the definition of an eigenvector. A vector v is an eigenvector of a matrix A if Av = \u03bbv for some scalar \u03bb. Similarly, v is an eigenvector of B if Bv = \u03bcv for some scalar \u03bc.\n\nNow, let's examine the action of (A + B) on v:\n\n(A + B)v = Av + Bv = \u03bbv + \u03bcv = (\u03bb + \u03bc)v\n\nSince \u03bb and \u03bc are scalars, their sum (\u03bb + \u03bc) is also a scalar. Therefore, v is an eigenvector of (A + B) with the eigenvalue (\u03bb + \u03bc).\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "tonyxia/euler-graph3.json",
    "question": "Suppose a convex polygon has 26 faces and 39 edges. How many vertices does it have?",
    "prediction": 15,
    "answer": 15,
    "rationale": "def solve():\n  # Using Euler's formula for convex polyhedra: V - E + F = 2\n  # Where V is the number of vertices, E is the number of edges, and F is the number of faces\n  F = 26\n  E = 39\n\n  # Rearrange the formula to find the number of vertices: V = E - F + 2\n  V = E - F + 2\n\n  return V",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/covariance2.json",
    "question": "Assuming $x$ and $y$ are both 2-d random variable. The covariance matrix of $x=((1,2),(2,3),(3,5),(4,4))$, $y=((3,4),(1,5),(5,3),(3,3))$ is $Cov$. What is the trace of $Cov$?",
    "prediction": 5.1875,
    "answer": -0.166,
    "rationale": "def solve():\n    import numpy as np\n\n    x = np.array([[1, 2], [2, 3], [3, 5], [4, 4]])\n    y = np.array([[3, 4], [1, 5], [5, 3], [3, 3]])\n\n    cov_matrix = np.cov(x.T, y.T, bias=True)\n    trace_cov = np.trace(cov_matrix)\n\n    return trace_cov",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/econ_micro_11.json",
    "question": "John's Lawn Mowing Service is a small business that acts as a price-taker (i.e., MR = P). The prevailing market price of lawn mowing is $20 per acre. John's costs are given by total cost = 0.1q^2 + 10q + 50, where q = the number of acres John chooses to cut a day. Calculate John's maximum daily profit.",
    "prediction": 200.0,
    "answer": 200,
    "rationale": "def solve():\n    from scipy.optimize import minimize_scalar\n\n    def profit(q):\n        price = 20\n        total_cost = 0.1 * q**2 + 10 * q + 50\n        total_revenue = price * q\n        return -(total_revenue - total_cost)\n\n    result = minimize_scalar(profit, bounds=(0, 100), method='bounded')\n    max_profit = -result.fun\n    return max_profit",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/ODE3.json",
    "question": "Find the solutions to the second order boundary-value problem. y''-2y'+2y=0, y(0)=0, y(\\pi/2) = 1. What is y(\\pi/4)?",
    "prediction": 0.32239694215769193,
    "answer": 0.322,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.integrate import solve_bvp\n\n    def fun(x, y):\n        return np.vstack((y[1], 2*y[1] - 2*y[0]))\n\n    def bc(ya, yb):\n        return np.array([ya[0], yb[0] - 1])\n\n    x = np.linspace(0, np.pi/2, 100)\n    y = np.zeros((2, x.size))\n\n    sol = solve_bvp(fun, bc, x, y)\n\n    y_pi_4 = sol.sol(np.pi/4)[0]\n\n    return y_pi_4",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/score3.json",
    "question": "True or false: there exists a graph with score (1, 2, 3, 4, 5).",
    "prediction": true,
    "answer": false,
    "rationale": "A graph's score is a sequence of non-negative integers that represent the degrees of its vertices. The Havel-Hakimi theorem states that a sequence of non-negative integers is graphical (i.e., can be the degree sequence of a simple, undirected graph) if and only if the sequence obtained by deleting the first number and subtracting 1 from the next first numbers is graphical.\n\nLet's apply the Havel-Hakimi theorem to the given sequence (1, 2, 3, 4, 5):\n\n1. Remove the first number and subtract 1 from the next 1 numbers: (1, 2, 3, 4) -> (2, 3, 3, 4)\n2. Sort the sequence in non-increasing order: (4, 3, 3, 2)\n3. Remove the first number and subtract 1 from the next 4 numbers: (3, 3, 2) -> (2, 2, 1)\n4. Sort the sequence in non-increasing order: (2, 2, 1)\n5. Remove the first number and subtract 1 from the next 2 numbers: (2, 1) -> (1, 0)\n6. Sort the sequence in non-increasing order: (1, 0)\n7. Remove the first number and subtract 1 from the next 1 numbers: (0) -> ()\n\nThe sequence is reduced to an empty sequence, which means that the given sequence (1, 2, 3, 4, 5) is graphical, and there exists a graph with this score. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "mingyin/Limit-of-sequence1.json",
    "question": "suppose the sequence a_n satisfies 0<a_n<1, and $(1-a_n)a_{n+1}>1/4$ for all n, what is the limit of a_n as n goes to infinity?",
    "prediction": 0,
    "answer": 0.5,
    "rationale": "def solve():\n    import numpy as np\n\n    def next_a(a_n):\n        return (1/4 + a_n/2) / (1 - a_n)\n\n    a_n = 0.5\n    prev_a_n = 0\n    tolerance = 1e-8\n\n    while np.abs(a_n - prev_a_n) > tolerance:\n        prev_a_n = a_n\n        a_n = next_a(a_n)\n\n    return a_n",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/math_algebra_7_5.json",
    "question": "Assuming there is a 2 * 2 matrices A, there exists a nonzero matrix M such that AM = MD, where D = [[2, 0], [0, 3]]? What are the eigen values of A? Return your answer as a list.",
    "prediction": [
      2.0,
      3.0
    ],
    "answer": [
      2,
      3
    ],
    "rationale": "def solve():\n    # import library\n    import numpy as np\n\n    # Define the given matrix D\n    D = np.array([[2, 0], [0, 3]])\n\n    # Since AM = MD, the eigenvalues of A are the same as the eigenvalues of D\n    eigenvalues, _ = np.linalg.eig(D)\n\n    # Return the eigenvalues as a list\n    return list(eigenvalues)",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "xinyi/fisher_information_2.json",
    "question": "What is the Fisher information for the Gaussian distribution family $f_\\theta(x)=N(0,\\theta)$? (a) $2\\theta$. (b) $2\\theta^2$. (c) $0.5\\theta^{-1}$. (d) $0.5\\theta^{-2}$. Which option is correct?",
    "prediction": "(d)",
    "answer": "(d)",
    "rationale": "The Fisher information for a Gaussian distribution family with mean 0 and variance $\\theta$ is given by the formula:\n\n$I(\\theta) = \\frac{1}{\\theta^2}$.\n\nComparing this with the given options, we can see that the correct option is (d) $0.5\\theta^{-2}$. Therefore, the answer is (d).",
    "answer_type": "option",
    "correct": true
  },
  {
    "id": "jianyu_xu/inclusion_and_exclusion_2.json",
    "question": "In how many ways can we color a loop of 5 vertices with 3 colors such that no two adjacent vertices have the same color?",
    "prediction": 30,
    "answer": 30,
    "rationale": "def solve():\n    # We can use the chromatic polynomial formula for a cycle graph\n    # P(G, k) = (k-1)^n + (-1)^n * (k-1)\n    # where G is the cycle graph, k is the number of colors, and n is the number of vertices\n    n = 5\n    k = 3\n    ans = (k-1)**n + (-1)**n * (k-1)\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "xinyi/random_walk_on_chessboard.json",
    "question": "Find the entropy rate of the Markov chain associated with a random walk of a king on the 3 by 3 chessboard. Use base 2 logarithm and return the entropy rate in bits.",
    "prediction": 0,
    "answer": 2.24,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.linalg import eig\n\n    # Transition matrix for the random walk of a king on a 3x3 chessboard\n    P = np.array([\n        [1/3, 1/2, 0, 1/2, 0, 0, 0, 0, 0],\n        [1/3, 0, 1/2, 1/2, 1/2, 0, 0, 0, 0],\n        [0, 1/2, 1/3, 0, 1/2, 1/2, 0, 0, 0],\n        [1/3, 1/2, 0, 0, 1/2, 0, 1/2, 1/2, 0],\n        [0, 1/2, 1/2, 1/2, 0, 1/2, 1/2, 1/2, 1/2],\n        [0, 0, 1/2, 0, 1/2, 1/3, 0, 1/2, 1/2],\n        [0, 0, 0, 1/2, 1/2, 0, 1/3, 1/2, 0],\n        [0, 0, 0, 1/2, 1/2, 1/2, 1/3, 0, 1/2],\n        [0, 0, 0, 0, 1/2, 1/2, 0, 1/2, 1/3]\n    ])\n\n    # Find the stationary distribution\n    eigenvalues, eigenvectors = eig(P.T)\n    stationary_distribution = eigenvectors[:, np.isclose(eigenvalues, 1)].real\n    stationary_distribution /= np.sum(stationary_distribution)\n\n    # Calculate the entropy rate\n    entropy_rate = 0\n    for i in range(9):\n        for j in range(9):\n            if P[i, j] > 0:\n                entropy_rate -= stationary_distribution[i] * P[i, j] * np.log2(P[i, j])\n\n    return entropy_rate.item()",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/econ_micro_15.json",
    "question": "Suppose instead that there are two firms in the market facing no costs of production and a demand curve given by Q = 150 - P for their identical products. Suppose the two firms choose prices simultaneously as in the Bertrand model. Compute the prices in the nash equilibrium.",
    "prediction": 0,
    "answer": 0,
    "rationale": "def solve():\n    # In the Bertrand model with identical products and no costs of production,\n    # firms will set prices equal to marginal cost, which is 0 in this case.\n    # Therefore, both firms will set a price of 0 to maximize their profits.\n    # This will result in a Nash equilibrium, as neither firm has an incentive to deviate from this price.\n    \n    price_nash_equilibrium = 0\n    return price_nash_equilibrium",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "maxku/ipnetwork2-ip.json",
    "question": "Suppose there are three routers between a source host and a destination host. Ignoring fragmentation, an IP datagram sent from the source host to the destination host will travel over how many interfaces? How many forwarding tables will be indexed to move the datagram from the source to the destination? Answer in [Interfaces, Tables].",
    "prediction": [
      8,
      3
    ],
    "answer": [
      8,
      4
    ],
    "rationale": "def solve():\n  # There are 3 routers between the source and destination host.\n  # Each router has 2 interfaces (input and output).\n  # The source host has 1 interface (output) and the destination host has 1 interface (input).\n  interfaces = 3 * 2 + 1 + 1\n\n  # There are 3 routers, so 3 forwarding tables will be indexed.\n  tables = 3\n\n  ans = [interfaces, tables]\n  return ans",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "xueguangma/forward_price_2.json",
    "question": "Consider a forward contract on a 4-year bond with maturity 1 year. The current value of the bond is $1018.86, it has a face value of $1000 and a coupon rate of 10% per annum. A coupon has just been paid on the bond and further coupons will be paid after 6 months and after 1 year, just prior to delivery. Interest rates for 1 year out are flat at 8%. Compute the forward price of the bond.",
    "prediction": 998.4457230769232,
    "answer": 999.998976,
    "rationale": "def solve():\n  # Given values\n  bond_value = 1018.86\n  face_value = 1000\n  coupon_rate = 0.1\n  interest_rate = 0.08\n  time_to_maturity = 1\n\n  # Calculate the present value of the coupons\n  coupon_payment = face_value * coupon_rate / 2\n  present_value_coupon1 = coupon_payment / (1 + interest_rate / 2)\n  present_value_coupon2 = coupon_payment / (1 + interest_rate)\n\n  # Calculate the forward price of the bond\n  forward_price = (bond_value - present_value_coupon1 - present_value_coupon2) * (1 + interest_rate)\n\n  return forward_price",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/math_calculus_16.json",
    "question": "Let rectangle R = [1, 2.5] * [1, 2]. Calculate the Riemann Sum S_{3,2} for \\int \\int_{R} xy dA for the integral, using the lower-left vertex of rectangles as sample points.",
    "prediction": 2.8125,
    "answer": 2.812,
    "rationale": "def solve():\n    # Define the limits of integration\n    x_min, x_max = 1, 2.5\n    y_min, y_max = 1, 2\n\n    # Define the number of rectangles in each direction\n    num_rectangles_x = 3\n    num_rectangles_y = 2\n\n    # Calculate the width and height of each rectangle\n    delta_x = (x_max - x_min) / num_rectangles_x\n    delta_y = (y_max - y_min) / num_rectangles_y\n\n    # Initialize the Riemann Sum\n    riemann_sum = 0\n\n    # Iterate through the rectangles\n    for i in range(num_rectangles_x):\n        for j in range(num_rectangles_y):\n            # Calculate the lower-left vertex of the rectangle\n            x = x_min + i * delta_x\n            y = y_min + j * delta_y\n\n            # Calculate the value of the function at the lower-left vertex\n            f_xy = x * y\n\n            # Add the contribution of this rectangle to the Riemann Sum\n            riemann_sum += f_xy * delta_x * delta_y\n\n    return riemann_sum",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/strong-law-of-large-number1.json",
    "question": "Let N be a spatial Poisson process with constant intensity $11$ in R^d, where d\\geq2. Let S be the ball of radius $r$ centered at zero.  Denote |S| to be the volume of the ball. What is N(S)/|S| as $r\\rightarrow\\infty$?",
    "prediction": 11,
    "answer": 11.0,
    "rationale": "def solve():\n  import math\n\n  # Intensity of the Poisson process\n  intensity = 11\n\n  # As r approaches infinity, the ratio N(S)/|S| converges to the intensity of the Poisson process\n  ans = intensity\n  return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/nuclear4.json",
    "question": "The spontaneous fission activity rate of U-238 is 6.7 fissions/kg s. A sample of shale contains 0.055% U-238 by weight. Calculate the number of spontaneous fissions in one day in a 106-kg pile of the shale by determining the number of fissions.",
    "prediction": 33748.704000000005,
    "answer": 320000000.0,
    "rationale": "def solve():\n  # Constants\n  fission_rate = 6.7  # fissions/kg s\n  u238_percentage = 0.055 / 100  # U-238 by weight\n  shale_weight = 106  # kg\n  seconds_in_a_day = 24 * 60 * 60  # seconds\n\n  # Calculate the number of spontaneous fissions in one day\n  u238_weight = shale_weight * u238_percentage\n  fissions_per_day = u238_weight * fission_rate * seconds_in_a_day\n\n  return fissions_per_day",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/gaussian-elimination3.json",
    "question": "Suppose V is a finite-dimensional vector space on F. $M1={a_1,a_2,a_3}$ is a basis of V, $M2={b_1,b_2,b_3}$ is another basis of V. Suppose the coordinates of b_1,b_2,b_3 under M1 are $c_1=(1,1,-1),c_2=(1,-1,1),c_3=(-1,1,1)$. Suppose the coordinate of $d\\in V$ under M1 is (1,3,5). What is the coordinate of d under M2? Return the three coordinate values as a list.",
    "prediction": [
      -1,
      3,
      7
    ],
    "answer": [
      2,
      3,
      4
    ],
    "rationale": "def solve():\n    # import library\n    import numpy as np\n\n    # implement the code\n    M1_to_M2 = np.array([[1, 1, -1], [1, -1, 1], [-1, 1, 1]])\n    d_M1 = np.array([1, 3, 5])\n\n    d_M2 = np.dot(M1_to_M2, d_M1)\n\n    return list(d_M2)",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "xinyi/change_of_variable.json",
    "question": "Consider a probability density $p_x(x)$ defined over a continuous variable x, and suppose that we make a nonlinear change of variable using $x = g(y)$. The location $\\hat{y}$ of the maximum of the density in $y$ is not in general related to the location $\\hat{x}$ \u0302of the maximum of the density over x by the simple functional relation $\\hat{x} = g(\u0302\\hat{y})$.",
    "prediction": false,
    "answer": true,
    "rationale": "To answer this question, let's first understand the relationship between the probability density functions of $x$ and $y$. Given the transformation $x = g(y)$, we can find the probability density function of $y$ using the change of variables formula:\n\n$p_y(y) = p_x(g(y)) \\cdot \\left|\\frac{dg(y)}{dy}\\right|$\n\nNow, let's consider the locations of the maxima of the densities. Let $\\hat{x}$ be the location of the maximum of $p_x(x)$ and $\\hat{y}$ be the location of the maximum of $p_y(y)$. We want to determine if $\\hat{x} = g(\\hat{y})$ holds true in general.\n\nTo find the maximum of $p_y(y)$, we can take the derivative of $p_y(y)$ with respect to $y$ and set it to zero:\n\n$\\frac{d}{dy} \\left[p_x(g(y)) \\cdot \\left|\\frac{dg(y)}{dy}\\right|\\right] = 0$\n\nHowever, this equation does not guarantee that $\\hat{x} = g(\\hat{y})$ in general, because the maximum of $p_y(y)$ depends on both the transformed probability density function $p_x(g(y))$ and the derivative of the transformation function $\\frac{dg(y)}{dy}$. The relationship between the maxima of the densities is not a simple functional relation due to the presence of the derivative term.\n\nTherefore, the answer is False.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "wenhuchen/cauchy_riemann2.json",
    "question": "If $u(x, y) = 4x^3y - 4xy^3$, is there a function v(x, y) such that u(x,y) + iv(x,y) is an analytical function?",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if there exists a function v(x, y) such that u(x, y) + iv(x, y) is an analytical function, we need to check if the Cauchy-Riemann equations are satisfied. The Cauchy-Riemann equations are given by:\n\n\u2202u/\u2202x = \u2202v/\u2202y\n\u2202u/\u2202y = -\u2202v/\u2202x\n\nGiven u(x, y) = 4x^3y - 4xy^3, we first find the partial derivatives of u with respect to x and y:\n\n\u2202u/\u2202x = 12x^2y - 4y^3\n\u2202u/\u2202y = 4x^3 - 12xy^2\n\nNow, we need to find a function v(x, y) such that its partial derivatives satisfy the Cauchy-Riemann equations:\n\n\u2202v/\u2202y = 12x^2y - 4y^3\n\u2202v/\u2202x = -(4x^3 - 12xy^2)\n\nIntegrating the first equation with respect to y, we get:\n\nv(x, y) = 6x^2y^2 - y^4 + g(x)\n\nwhere g(x) is an arbitrary function of x.\n\nNow, we differentiate v(x, y) with respect to x:\n\n\u2202v/\u2202x = 12xy^2 + g'(x)\n\nComparing this with the second Cauchy-Riemann equation, we have:\n\n12xy^2 + g'(x) = -4x^3 + 12xy^2\n\nThis implies that g'(x) = -4x^3, and integrating g'(x) with respect to x, we get:\n\ng(x) = -x^4 + C\n\nwhere C is a constant.\n\nThus, the function v(x, y) is given by:\n\nv(x, y) = 6x^2y^2 - y^4 - x^4 + C\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "elainewan/math_real_analysis_additional_5.json",
    "question": "Define f: R \to R by f(x) = (x^3) / (1 + x^2). Is f uniformly continuous on R?",
    "prediction": false,
    "answer": true,
    "rationale": "To determine if f(x) = (x^3) / (1 + x^2) is uniformly continuous on R, we can use the Lipschitz condition. A function is uniformly continuous if there exists a constant L such that for all x, y in R, |f(x) - f(y)| \u2264 L|x - y|.\n\nLet's find the derivative of f(x):\n\nf'(x) = (d/dx) [(x^3) / (1 + x^2)]\n\nUsing the quotient rule, we get:\n\nf'(x) = [(3x^2)(1 + x^2) - (x^3)(2x)] / (1 + x^2)^2\n\nf'(x) = [3x^2 + 3x^4 - 2x^4] / (1 + x^2)^2\n\nf'(x) = [3x^2 + x^4] / (1 + x^2)^2\n\nNow, let's analyze the behavior of f'(x) as x approaches infinity:\n\nlim (x -> \u221e) f'(x) = lim (x -> \u221e) [3x^2 + x^4] / (1 + x^2)^2\n\nUsing L'Hopital's rule twice, we get:\n\nlim (x -> \u221e) f'(x) = lim (x -> \u221e) [12x^3 + 4x^5] / [4x^3(1 + x^2)]\n\nlim (x -> \u221e) f'(x) = lim (x -> \u221e) [3x^2 + x^4] / [4(1 + x^2)]\n\nAs x approaches infinity, the limit does not exist, which means that the derivative is unbounded. Therefore, the Lipschitz condition is not satisfied, and f(x) is not uniformly continuous on R.\n\nTherefore, the answer is False.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "maxku/basic-electronics-2-2.json",
    "question": "In the figure, given $V_{S1} = V_{S2} = V_{S3} = 5V$, and $R_1 = R_2 = R_3 = 100\\Omega$. Find the voltage values with reference to ground $V_A, V_B, V_C, V_D$ in the figure. Represent the answer in a list $[V_A, V_B, V_C, V_D]$ (in 3 sig.fig.) in the unit of V.",
    "prediction": [
      5.0,
      5.0,
      5.0,
      0
    ],
    "answer": [
      -5,
      -8,
      -6,
      0
    ],
    "rationale": "def solve():\n    # Constants\n    Vs1 = Vs2 = Vs3 = 5  # Voltage sources in Volts\n    R1 = R2 = R3 = 100  # Resistances in Ohms\n\n    # Kirchhoff's Current Law (KCL) equations\n    # I1 = I2 + I3\n    # I1 = (Vs1 - VA) / R1\n    # I2 = (VA - VB) / R2\n    # I3 = (VA - VC) / R3\n\n    # Solving the KCL equations\n    VA = (Vs1 * R2 * R3 + Vs2 * R1 * R3 + Vs3 * R1 * R2) / (R1 * R2 + R1 * R3 + R2 * R3)\n    VB = (Vs1 * R2 + Vs2 * R1) / (R1 + R2)\n    VC = (Vs1 * R3 + Vs3 * R1) / (R1 + R3)\n    VD = 0  # Ground reference\n\n    ans = [round(VA, 3), round(VB, 3), round(VC, 3), round(VD, 3)]\n    return ans",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "elainewan/econ_micro_12.json",
    "question": "Suppose there are 100 identical firms in a perfectly competitive industry. Each firm has a short-run total cost function of the form C(q) = \frac{1}{300}q^3 + 0.2q^2 + 4q + 10. Suppose market demand is given by Q = -200P + 8,000. What will be the short-run equilibrium price?",
    "prediction": 40.0,
    "answer": 25,
    "rationale": "def solve():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    P, q = symbols('P q')\n\n    # Market demand function\n    Q = -200 * P + 8000\n\n    # Total cost function for a single firm\n    C_q = (1/300) * q**3 + 0.2 * q**2 + 4 * q + 10\n\n    # Derive the marginal cost function for a single firm\n    MC_q = C_q.diff(q)\n\n    # In a perfectly competitive market, price equals marginal cost\n    P_eq_MC = Eq(P, MC_q)\n\n    # Solve for q in terms of P\n    q_in_terms_of_P = solve(P_eq_MC, q)[0]\n\n    # Substitute q in terms of P into the market demand function\n    Q_in_terms_of_P = Q.subs(q, q_in_terms_of_P)\n\n    # Since there are 100 identical firms, multiply q by 100\n    Q_in_terms_of_P = Q_in_terms_of_P * 100\n\n    # Solve for the equilibrium price\n    equilibrium_price = solve(Eq(Q, Q_in_terms_of_P), P)[0]\n\n    return float(equilibrium_price)",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/signalprocessing1-nyquist.json",
    "question": "For the signal f(t)=3sin(200\u03c0t)+ 6sin(400\u03c0t) + sin(500\u03c0t), determine the minimum sampling requency (in \u03c0Hz) satisfying the Nyquist criterion.",
    "prediction": 3141.592653589793,
    "answer": 500,
    "rationale": "def solve():\n    import numpy as np\n\n    # Frequencies of the given signal\n    freq1 = 200\n    freq2 = 400\n    freq3 = 500\n\n    # Find the maximum frequency\n    max_freq = max(freq1, freq2, freq3)\n\n    # Apply the Nyquist criterion\n    min_sampling_frequency = 2 * max_freq\n\n    return min_sampling_frequency * np.pi",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "tonyxia/semiconductor6.json",
    "question": "Find the fraction of the standard solar flux reaching the Earth (about 1000 W/m^22) available to a solar collector lying flat on the Earth\u2019s surface at Regina, Saskatchewan (latitude 50\u00b0N) at noon on the summer solstice.",
    "prediction": 0.44713474135516723,
    "answer": 0.891,
    "rationale": "import math\ndef solve():\n    latitude = 50\n    declination_angle = 23.44\n    angle_of_incidence = 90 - (latitude - declination_angle)\n    fraction_of_solar_flux = math.cos(math.radians(angle_of_incidence))\n    return fraction_of_solar_flux",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/gamma-function1.json",
    "question": "x=0.3168. what is the value of $x*\\prod_{n=1}^\\infty(1-\\frac{x^2}{n^2 \\pi^2})/sin(x)$?",
    "prediction": 1.0000010082619564,
    "answer": 1.0,
    "rationale": "def solve():\n    import math\n\n    x = 0.3168\n    product = 1\n    n = 1\n    tolerance = 1e-10\n\n    while True:\n        term = 1 - (x**2) / (n**2 * math.pi**2)\n        product *= term\n        if abs(term - 1) < tolerance:\n            break\n        n += 1\n\n    ans = x * product / math.sin(x)\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/banach-fixed-point-theorem1.json",
    "question": "Let C[0,1] be all the continuous function on in the interval [0,1]. For the integral equation $x(t)-\\lambda \\int_0^1 e^{t-s} x(s) ds=y(t)$, where $y(t)\\in C[0,1]$ is a given function. \\lambda is a constant and |\\lambda|<1. Then there exists a unique solution x(t)\\in C[0,1]. This conclusion can be proved by: 1. Implicit function theorem, 2. Riesz representation theorem, 3. Banach fixed point theorem, 4. None of the above. Return the number as the answer.",
    "prediction": 3,
    "answer": 3.0,
    "rationale": "def solve():\n    return 3",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/geometric_brownian_motion.json",
    "question": "Assume the Black-Scholes framework. For $t \\ge 0$, let $S(t)$ be the time-$t$ price of a nondividend-paying stock. You are given:\n(i) $S(0)=0.5\n(ii) The stock price process is $\\frac{dS(t)}{S(t)} = 0.05dt+0.2dZ(t)$ where $Z(t)$ is a standart Brownian motion.\n(iii) $E[S(1)^\\alpha]=1.4$, where $\\alpha$ is a negative constant.\n(iv) The continuously compounded risk-free interest rate is $3%$.\nConsider a contingent claim that pays $S(1)^\\alpha$ at time 1. What is the time-0 price of the contigent claim?",
    "prediction": 0.49212602985991294,
    "answer": 1.372,
    "rationale": "def solve():\n    import numpy as np\n\n    # Given values\n    S0 = 0.5\n    mu = 0.05\n    sigma = 0.2\n    E_S1_alpha = 1.4\n    r = 0.03\n\n    # Calculate the expected value of S(1)\n    E_S1 = S0 * np.exp(mu)\n\n    # Calculate the value of alpha\n    alpha = np.log(E_S1_alpha / E_S1)\n\n    # Calculate the time-0 price of the contingent claim\n    ans = S0**alpha * np.exp(-r)\n\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/optics7.json",
    "question": "An object of height 5cm is placed 10 cm in front of a convex mirror that has a radius of curvature of 45.0 cm. Determine the magnification of the image.",
    "prediction": 1.8,
    "answer": 1.8,
    "rationale": "def solve():\n    object_height = 5\n    object_distance = 10\n    radius_of_curvature = 45.0\n\n    # Using the mirror formula: 1/f = 1/u + 1/v\n    # For a convex mirror, the focal length is half the radius of curvature\n    focal_length = radius_of_curvature / 2\n\n    # Calculate the image distance (v) using the mirror formula\n    image_distance = 1 / ((1 / focal_length) - (1 / object_distance))\n\n    # Calculate the magnification using the formula: m = -v/u\n    magnification = -image_distance / object_distance\n\n    return magnification",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xinyi/mixture_model.json",
    "question": "What is the number of equivalent parameter settings due to interchange symmetries in a mixture model with 10 components?",
    "prediction": 3628800,
    "answer": 3628800,
    "rationale": "def solve():\n    import math\n    ans = math.factorial(10)\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "xinyi/kernel_2.json",
    "question": "A positive-definite kernel function satisfies the Cauchy-Schwartz inequality. True or false?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "mingyin/Sylveete-rank-inequality1.json",
    "question": "Both A, B are n-by-n matrices with rank(A)=n, rank(A*B)=0. What is rank(B)?",
    "prediction": 0,
    "answer": 0.0,
    "rationale": "def solve():\n    # Since rank(A) = n and rank(A*B) = 0, it implies that B must have a rank of 0.\n    # This is because the product of two matrices can only have a rank of 0 if one of the matrices has a rank of 0.\n    ans = 0\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xinyi/rate_distortion_function_1.json",
    "question": "Consider a source $X$ uniformly distributed on the set $\\{1, 2, \\dots, m\\}$. The rate distortion function for this source with Hamming distortion is $R(D) = \\log{m}-H(D)-D\\log{(m-1)}$ for $0\\leq D\\leq 1-\\frac{1}{m}$, and $R(D) = 0$ otherwise. True or False?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "maxku/graphtheory9-shortestpath.json",
    "question": "Let a undirected graph G with edges E = {<2,6>,<2,8>,<2,5>,<6,5>,<5,8>,<6,10>,<10,8>}, which <A,B> represent Node A is connected to Node B. What is the shortest path from node 2 to node 10? Represent the path as a list.",
    "prediction": [
      2,
      6,
      10
    ],
    "answer": [
      2,
      8,
      10
    ],
    "rationale": "def solve():\n    from collections import deque\n\n    graph = {\n        2: [6, 8, 5],\n        6: [2, 5, 10],\n        8: [2, 5, 10],\n        5: [2, 6, 8],\n        10: [6, 8]\n    }\n\n    def bfs_shortest_path(graph, start, goal):\n        explored = set()\n        queue = deque([[start]])\n\n        if start == goal:\n            return [start]\n\n        while queue:\n            path = queue.popleft()\n            node = path[-1]\n            if node not in explored:\n                neighbors = graph[node]\n                for neighbor in neighbors:\n                    new_path = list(path)\n                    new_path.append(neighbor)\n                    queue.append(new_path)\n                    if neighbor == goal:\n                        return new_path\n\n                explored.add(node)\n\n    ans = bfs_shortest_path(graph, 2, 10)\n    return ans",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "maxku/cv-videoprocessing4-gop.json",
    "question": "A QCIF (176x144) image sequence is encoded using the MPEG video coding algorithm with the following Group Of Pictures (GOP). When a single bit error occurs in the 5th picture of a GOP, which pictures could possibly be affected by this error? Represent the answer in a list sorted in ascending order.",
    "prediction": [
      5
    ],
    "answer": [
      4,
      6,
      7,
      8,
      9,
      10,
      11,
      12
    ],
    "rationale": "def solve():\n  # A Group of Pictures (GOP) in MPEG video coding consists of I, P, and B frames.\n  # I-frames are independent frames, P-frames are predicted from previous I or P frames, and B-frames are bidirectionally predicted.\n  # A typical GOP structure is IBBPBBPBBPBB, where the first frame is an I-frame, followed by B and P frames.\n  \n  # In this case, a single bit error occurs in the 5th picture of a GOP.\n  error_position = 5\n\n  # We need to find which pictures could possibly be affected by this error.\n  affected_pictures = []\n\n  # Since B-frames are dependent on both previous and future I or P frames, an error in a B-frame will affect the following P-frame.\n  # An error in a P-frame will affect all the subsequent B-frames and the next P-frame.\n  gop_structure = \"IBBPBBPBBPBB\"\n\n  if gop_structure[error_position - 1] == \"B\":\n    affected_pictures.append(error_position)\n    if gop_structure[error_position] == \"P\":\n      affected_pictures.append(error_position + 1)\n  elif gop_structure[error_position - 1] == \"P\":\n    affected_pictures.append(error_position)\n    for i in range(error_position, len(gop_structure)):\n      if gop_structure[i] == \"B\":\n        affected_pictures.append(i + 1)\n      elif gop_structure[i] == \"P\":\n        affected_pictures.append(i + 1)\n        break\n\n  return affected_pictures",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "xueguangma/zscore.json",
    "question": "If the annual earnings per share has mean $8.6 and standard deviation $3.4, what is the chance that an observed EPS less than $5.5?",
    "prediction": 0.18094629672817414,
    "answer": 0.1814,
    "rationale": "def solve():\n    from scipy.stats import norm\n\n    mean = 8.6\n    std_dev = 3.4\n    target_value = 5.5\n\n    # Calculate the z-score\n    z_score = (target_value - mean) / std_dev\n\n    # Calculate the probability using the cumulative distribution function (CDF)\n    probability = norm.cdf(z_score)\n\n    return probability",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/double_integral1.json",
    "question": "Passing to polar coordinates, calculate the double integral $\\iint_S ydxdy$ with $y$ > 0, where S is a semicircle of a diameter 1 with center at point C(1/2, 0) above the X axis.",
    "prediction": 0.08329159802478886,
    "answer": 0.0833,
    "rationale": "def solve():\n    import numpy as np\n\n    def integrand(r, theta):\n        x = r * np.cos(theta) + 1/2\n        y = r * np.sin(theta)\n        return y\n\n    def polar_jacobian(r, theta):\n        return r\n\n    def double_integral(integrand, r_bounds, theta_bounds, num_points=1000):\n        r_min, r_max = r_bounds\n        theta_min, theta_max = theta_bounds\n\n        r_values = np.linspace(r_min, r_max, num_points)\n        theta_values = np.linspace(theta_min, theta_max, num_points)\n\n        integral_sum = 0\n        for r in r_values:\n            for theta in theta_values:\n                integral_sum += integrand(r, theta) * polar_jacobian(r, theta)\n\n        integral_sum *= (r_max - r_min) * (theta_max - theta_min) / (num_points ** 2)\n        return integral_sum\n\n    ans = double_integral(integrand, r_bounds=(0, 1/2), theta_bounds=(0, np.pi))\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xinyi/huffman_code_2.json",
    "question": "Which of the following codeword lengths can be the word lengths of a 3-ary Huffman code? (a) (1, 2, 2, 2, 2). (b) (2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3).",
    "prediction": "(a)",
    "answer": "(b)",
    "rationale": "To determine if the given codeword lengths can be the word lengths of a 3-ary Huffman code, we can use the Kraft-McMillan inequality for 3-ary codes, which states that for any uniquely decodable 3-ary code with codeword lengths L1, L2, ..., Ln, the following inequality holds:\n\n\u03a3(1/3^Li) \u2264 1\n\nLet's check both options:\n\n(a) (1, 2, 2, 2, 2)\n(1/3^1) + (1/3^2) + (1/3^2) + (1/3^2) + (1/3^2) = 1/3 + 4/9 = 7/9 \u2264 1\n\n(b) (2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3)\n(1/3^2) * 8 + (1/3^3) * 3 = 8/9 + 3/27 = 8/9 + 1/9 = 9/9 = 1\n\nBoth options (a) and (b) satisfy the Kraft-McMillan inequality for 3-ary codes. Therefore, the answer is (a) and (b).",
    "answer_type": "option",
    "correct": false
  },
  {
    "id": "maxku/graphtheory7-shortestpath.json",
    "question": "Let a undirected graph G with edges E = {<0,1>,<0,2>,<0,3>,<3,5>,<2,3>,<2,4>,<4,5>}, which <A,B> represent Node A is connected to Node B. What is the shortest path from node 0 to node 5? Represent the path as a list.",
    "prediction": [
      0,
      3,
      5
    ],
    "answer": [
      0,
      3,
      5
    ],
    "rationale": "def solve():\n    from collections import deque\n\n    graph = {\n        0: [1, 2, 3],\n        1: [0],\n        2: [0, 3, 4],\n        3: [0, 2, 5],\n        4: [2, 5],\n        5: [3, 4]\n    }\n\n    def bfs_shortest_path(graph, start, end):\n        visited = set()\n        queue = deque([[start]])\n\n        while queue:\n            path = queue.popleft()\n            node = path[-1]\n\n            if node == end:\n                return path\n\n            if node not in visited:\n                visited.add(node)\n                for neighbor in graph[node]:\n                    new_path = list(path)\n                    new_path.append(neighbor)\n                    queue.append(new_path)\n\n    ans = bfs_shortest_path(graph, 0, 5)\n    return ans",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "jianyu_xu/Cayley_1.json",
    "question": "What is the number of labelled forests on 10 vertices with 5 connected components, such that vertices 1, 2, 3, 4, 5 all belong to different connected components?",
    "prediction": 393750,
    "answer": 50000,
    "rationale": "def solve():\n    from math import comb\n\n    n = 10\n    k = 5\n    ans = comb(n - 1, k - 1) * (k ** (n - k))\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "xueguangma/taylors_approximation_theorem.json",
    "question": "Using Taylor's Approximation Theorem to show: What is $\\lim_{x \\to 0} \\frac{e^\\frac{x^4}{2}-\\cos(x^2)}{x^4}$",
    "prediction": 0.0,
    "answer": 1.0,
    "rationale": "def solve():\n    import math\n\n    # Define the Taylor series expansion for e^(x^4/2) and cos(x^2) around x=0\n    def taylor_expansion_e(x):\n        return 1 + (x**4)/2 + (x**8)/16\n\n    def taylor_expansion_cos(x):\n        return 1 - (x**2)/2 + (x**4)/24\n\n    # Define the function to calculate the limit\n    def limit(x):\n        return (taylor_expansion_e(x) - taylor_expansion_cos(x)) / x**4\n\n    # Calculate the limit as x approaches 0\n    x = 1e-10\n    ans = limit(x)\n\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/Liouville\u2019s_theorem1.json",
    "question": "Let f = u(z) + iv(z) be an entire function in complex plane C. If |u(z)| < M for every z in C, where M is a positive constant, is f is a constant function?",
    "prediction": true,
    "answer": true,
    "rationale": "Yes, f is a constant function.\n\nAccording to Liouville's theorem, if a function is entire (holomorphic on the entire complex plane) and bounded, then it must be a constant function. Since |u(z)| < M for every z in C, the function f is bounded. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "wenhuchen/relativity1.json",
    "question": "The earth and sun are 8.3 light-minutes apart. Ignore their relative motion for this problem and assume they live in a single inertial frame, the Earth-Sun frame. Events A and B occur at t = 0 on the earth and at 2 minutes on the sun respectively. Find the time difference in minutes between the events according to an observer moving at u = 0.8c from Earth to Sun. Repeat if observer is moving in the opposite direction at u = 0.8c.",
    "prediction": [
      -7.733333333333336,
      14.400000000000004
    ],
    "answer": 14,
    "rationale": "def solve():\n    import math\n\n    # Constants\n    c = 1  # speed of light in light-minutes per minute\n    d = 8.3  # distance between Earth and Sun in light-minutes\n    u1 = 0.8 * c  # velocity of observer moving from Earth to Sun\n    u2 = -0.8 * c  # velocity of observer moving from Sun to Earth\n    tA = 0  # time of event A on Earth\n    tB = 2  # time of event B on Sun\n\n    # Time dilation formula\n    def time_difference(u, t1, t2):\n        gamma = 1 / math.sqrt(1 - (u / c) ** 2)\n        delta_t = gamma * (t2 - t1 - u * (d / c ** 2))\n        return delta_t\n\n    # Calculate time differences for both observers\n    delta_t1 = time_difference(u1, tA, tB)\n    delta_t2 = time_difference(u2, tA, tB)\n\n    return [delta_t1, delta_t2]",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/minimal-polynomial1.json",
    "question": "matrix $A=(\\begin{array}{rrrr} -2 & -1 & -1 & -1 \\ 2 & 1 & 3 & 2 \\ 1 & 1 & 0 & 1 \\ -1 & -1 & -2 & -2 \\end{array})$. Suppose f is the minimal polynomial of A. What is f(99)? Return the numeric without explanation.",
    "prediction": 0,
    "answer": 990000.0,
    "rationale": "def solve():\n    import numpy as np\n\n    A = np.array([[-2, -1, -1, -1],\n                  [2, 1, 3, 2],\n                  [1, 1, 0, 1],\n                  [-1, -1, -2, -2]])\n\n    # Find the minimal polynomial of A\n    from sympy import Matrix, minimal_polynomial\n    from sympy.abc import x\n\n    min_poly = minimal_polynomial(Matrix(A), x)\n\n    # Evaluate f(99)\n    ans = min_poly.subs(x, 99)\n\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xueguangma/spot_rate.json",
    "question": "Suppose that:\nThe 1-year spot rate is 3%;\nThe 2-year spot rate is 4%; and\nThe 3-year spot rate is 5%. What is the price of a 100-par value 3-year bond paying 6% annual coupon payment?",
    "prediction": 102.93936544088956,
    "answer": 102.95,
    "rationale": "def solve():\n    # Given spot rates\n    spot_rates = [0.03, 0.04, 0.05]\n\n    # Given bond information\n    par_value = 100\n    coupon_rate = 0.06\n    years = 3\n\n    # Calculate the present value of coupon payments\n    coupon_payment = par_value * coupon_rate\n    pv_coupon_payments = sum([coupon_payment / (1 + spot_rates[i])**(i+1) for i in range(years)])\n\n    # Calculate the present value of the par value\n    pv_par_value = par_value / (1 + spot_rates[-1])**years\n\n    # Calculate the bond price\n    bond_price = pv_coupon_payments + pv_par_value\n\n    return bond_price",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/math_abstact_algebra_7_6.json",
    "question": "What are the generators of the additive cyclic group Z?",
    "prediction": [
      1,
      -1
    ],
    "answer": [
      1,
      -1
    ],
    "rationale": "def solve():\n    # In the additive cyclic group Z, every integer is a generator\n    # However, we can represent the generators as a list of two integers: 1 and -1\n    # 1 represents the positive generator and -1 represents the negative generator\n    ans = [1, -1]\n    return ans",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "elainewan/math_real_analysis_additional_3.json",
    "question": "Let x \\in R with 0 < x < 1 and n \\in N. Is (1 - x)^n >= 1/(1+nx)?",
    "prediction": true,
    "answer": false,
    "rationale": "To answer this question, we will use the Bernoulli Inequality, which states that for any real number x with 0 < x < 1 and any natural number n, we have:\n\n(1 - x)^n >= 1 - nx\n\nNow, we want to show that (1 - x)^n >= 1/(1 + nx). We can rewrite the inequality as:\n\n1 - nx >= 1/(1 + nx)\n\nMultiplying both sides by (1 + nx), we get:\n\n(1 - nx)(1 + nx) >= 1\n\nExpanding the left side, we have:\n\n1 - n^2x^2 >= 1\n\nAdding n^2x^2 to both sides, we get:\n\n1 >= n^2x^2\n\nSince x is between 0 and 1, x^2 is also between 0 and 1. Therefore, n^2x^2 is non-negative, and the inequality holds.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "jianyu_xu/integer_programming_2.json",
    "question": "Solve the following linear programming problems: maximize 3x + y subject to (1) -x + y <= 1, (2) 2x + y <= 4, (3) x>= 0 and y >= 0. What's [x, y] for the optimal solution?",
    "prediction": [
      2,
      0
    ],
    "answer": [
      2,
      0
    ],
    "rationale": "def solve():\n    from scipy.optimize import linprog\n\n    # Objective function: -3x - y (we need to minimize, so we use the negative of the function)\n    c = [-3, -1]\n\n    # Inequality constraints matrix\n    A = [[-1, 1], [2, 1]]\n\n    # Inequality constraints vector\n    b = [1, 4]\n\n    # Bounds for x and y\n    x_bounds = (0, None)\n    y_bounds = (0, None)\n\n    # Solve the linear programming problem\n    res = linprog(c, A_ub=A, b_ub=b, bounds=[x_bounds, y_bounds], method='highs')\n\n    # Return the optimal solution for x and y\n    return res.x",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "wenhuchen/trapezoidal_rule1.json",
    "question": "Use the Trapezoidal Rule with to approximate $\\int_0^{\\pi} sin^2(x)dx$. Return the approximated demical value.",
    "prediction": 1.5707963267948966,
    "answer": 1.570796,
    "rationale": "def solve():\n    import numpy as np\n\n    def f(x):\n        return np.sin(x)**2\n\n    a = 0\n    b = np.pi\n    n = 1000\n    h = (b - a) / n\n\n    x = np.linspace(a, b, n + 1)\n    y = f(x)\n\n    ans = h * (0.5 * y[0] + 0.5 * y[-1] + np.sum(y[1:-1]))\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/double-integral1.json",
    "question": "suppose I=[0,1]\\times[0,1], where exp is the exponential function. What is the numeric of the double integral of the function f(x,y)=x*y^3 exp^{x^2+y^2} over I?",
    "prediction": 0.42957045711476133,
    "answer": 0.4295,
    "rationale": "def solve():\n    from scipy.integrate import dblquad\n    import numpy as np\n\n    def f(x, y):\n        return x * y**3 * np.exp(x**2 + y**2)\n\n    ans, _ = dblquad(f, 0, 1, lambda x: 0, lambda x: 1)\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xinyi/random_walk_on_3D_maze.json",
    "question": "A bird is lost in a 3 by 3 by 3 cubical maze. The bird flies from room to room going to adjoining rooms with equal probability through each of the walls. To be specific, the corner rooms have 3 exits. What is the entropy rate of this random walk? Use base 2 logarithm and return the entropy rate in bits.",
    "prediction": 0,
    "answer": 2.03,
    "rationale": "def solve():\n    import numpy as np\n\n    # Transition matrix for the 3x3x3 cube\n    P = np.array([\n        [0, 1/3, 0, 1/3, 0, 0, 0, 0, 0],\n        [1/3, 0, 1/3, 0, 1/3, 0, 0, 0, 0],\n        [0, 1/3, 0, 0, 0, 1/3, 0, 0, 0],\n        [1/3, 0, 0, 0, 1/3, 0, 1/3, 0, 0],\n        [0, 1/3, 0, 1/3, 0, 1/3, 0, 1/3, 0],\n        [0, 0, 1/3, 0, 1/3, 0, 0, 0, 1/3],\n        [0, 0, 0, 1/3, 0, 0, 0, 1/3, 0],\n        [0, 0, 0, 0, 1/3, 0, 1/3, 0, 1/3],\n        [0, 0, 0, 0, 0, 1/3, 0, 1/3, 0]\n    ])\n\n    # Compute the stationary distribution\n    eigvals, eigvecs = np.linalg.eig(P.T)\n    stationary_distribution = eigvecs[:, np.isclose(eigvals, 1)].real\n    stationary_distribution /= np.sum(stationary_distribution)\n\n    # Compute the entropy rate\n    entropy_rate = 0\n    for i in range(9):\n        for j in range(9):\n            if P[i, j] > 0:\n                entropy_rate -= stationary_distribution[i] * P[i, j] * np.log2(P[i, j])\n\n    return entropy_rate.item()",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/divisibility5.json",
    "question": "For how many positive integral values of x \u2264 100 is 3^x \u2212 x^2 divisible by 5?",
    "prediction": 20,
    "answer": 20,
    "rationale": "def solve():\n    count = 0\n    for x in range(1, 101):\n        if (3**x - x**2) % 5 == 0:\n            count += 1\n    return count",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "xueguangma/extreme_value_theorem.json",
    "question": "Let $f(x) = 1/x$ on $(0, 1]$ and $f(x) = 3$ if $x = 0$. Is there a global maximum on interval $[0, 1]$?",
    "prediction": false,
    "answer": false,
    "rationale": "To determine if there is a global maximum on the interval $[0, 1]$, we need to analyze the function $f(x) = 1/x$ on $(0, 1]$ and $f(x) = 3$ if $x = 0$.\n\nFirst, let's consider the function $f(x) = 1/x$ on $(0, 1]$. As $x$ approaches $0$, $f(x)$ approaches infinity. On the other hand, as $x$ approaches $1$, $f(x)$ approaches $1$. Therefore, the function is unbounded as $x$ approaches $0$.\n\nNow, let's consider the function $f(x) = 3$ if $x = 0$. In this case, the function has a value of $3$ at $x = 0$.\n\nSince the function $f(x) = 1/x$ is unbounded as $x$ approaches $0$, there is no global maximum on the interval $[0, 1]$.\n\nTherefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "xueguangma/options_theory.json",
    "question": "An investor who is bullish about a stock may wish to construct a bull spread for that stock. One way to construct such a spread is to buy a call with strke price $K_1$ and sell a call with the same expiration date but with a strike price of $K_2 > K_1$. If we draw the payoff curve for that a spread, the initial cost of the spread would be negative is this True? Answer True or False.",
    "prediction": false,
    "answer": false,
    "rationale": "Therefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "panlu/young\u2019s_modulus1.json",
    "question": "A steel rod 2.0 m long has a cross-sectional area of $0.30 cm ^ 2$. It is hung by one end from a support, and a 550-kg milling machine is hung from its other end. Determine the stress on the rod and the resulting strain and elongation. (Unit: mm)",
    "prediction": [
      179850000.0,
      0.00089925,
      1.7985
    ],
    "answer": 1.8,
    "rationale": "def solve():\n    import math\n\n    # Constants\n    length = 2.0 * 1000  # Convert to mm\n    area = 0.30  # cm^2\n    mass = 550.0  # kg\n    g = 9.81  # m/s^2, acceleration due to gravity\n    E_steel = 200 * (10 ** 9)  # Pa, Young's modulus for steel\n\n    # Convert area to m^2\n    area_m2 = area * (10 ** -4)\n\n    # Calculate the force acting on the rod\n    force = mass * g\n\n    # Calculate the stress on the rod\n    stress = force / area_m2\n\n    # Calculate the strain on the rod\n    strain = stress / E_steel\n\n    # Calculate the elongation of the rod\n    elongation = strain * length\n\n    return stress, strain, elongation",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "panlu/sound_wave_amplitude1.json",
    "question": "In a sinusoidal sound wave of moderate loudness, the maximum pressure variations are about $3.0 \\times 10 ^ {-2}$ Pa above and below atmospheric pressure. Find the corresponding maximum displacement if the frequency is 1000 Hz. In air at normal atmospheric pressure and density, the speed of sound is 344 m/s and the bulk modulus is $1.42 \\times 10^5$ Pa. (Unit: $10 ^ {-8}$)",
    "prediction": 1.1566753610622253,
    "answer": 1.2,
    "rationale": "def solve():\n    import math\n\n    max_pressure_variation = 3.0 * 10 ** (-2)  # Pa\n    frequency = 1000  # Hz\n    speed_of_sound = 344  # m/s\n    bulk_modulus = 1.42 * 10 ** 5  # Pa\n\n    # Calculate the angular frequency\n    angular_frequency = 2 * math.pi * frequency\n\n    # Calculate the wave number\n    wave_number = angular_frequency / speed_of_sound\n\n    # Calculate the maximum displacement\n    max_displacement = max_pressure_variation / (bulk_modulus * wave_number)\n\n    # Convert the result to the required unit\n    ans = max_displacement * 10 ** 8\n\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "panlu/center_of_mass1.json",
    "question": "James (mass 90.0 kg) and Ramon (mass 60.0 kg) are 20.0 m apart on a frozen pond. Midway between them is a mug of their favorite beverage. They pull on the ends of a light rope stretched between them. When James has moved 6.0 m toward the mug, how far has Ramon moved? (Unit: m)",
    "prediction": 9.0,
    "answer": 1.0,
    "rationale": "def solve():\n  mass_james = 90.0\n  mass_ramon = 60.0\n  total_distance = 20.0\n  distance_james = 6.0\n\n  # Using the conservation of momentum principle, we can find the distance Ramon moved\n  distance_ramon = (mass_james * distance_james) / mass_ramon\n\n  return distance_ramon",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/jensen1.json",
    "question": "For any triangle ABC, we have sin(A) + sin(B) + sin(C) $\\le$ 3\\sqrt(3)/2, is this true or false?",
    "prediction": true,
    "answer": true,
    "rationale": "We know that the sum of the angles in a triangle is 180 degrees or \u03c0 radians. Let A, B, and C be the angles of the triangle in radians. We have:\n\nA + B + C = \u03c0\n\nWe want to find the maximum value of sin(A) + sin(B) + sin(C). Using the sum-to-product identities, we can rewrite the expression as:\n\nsin(A) + sin(B) + sin(C) = 2sin((A + B)/2)cos((A - B)/2) + sin(C)\n\nNow, we know that the maximum value of the sine function is 1, and the maximum value of the cosine function is also 1. Therefore, the maximum value of the expression 2sin((A + B)/2)cos((A - B)/2) is 2.\n\nSince sin(C) \u2264 1, the maximum value of sin(A) + sin(B) + sin(C) is 2 + 1 = 3.\n\nHowever, we also know that the maximum value of sin(x) is achieved when x = \u03c0/2. Therefore, the maximum value of sin(A) + sin(B) + sin(C) is achieved when A = B = \u03c0/3 and C = \u03c0/3. In this case, we have:\n\nsin(A) + sin(B) + sin(C) = sin(\u03c0/3) + sin(\u03c0/3) + sin(\u03c0/3) = 3sin(\u03c0/3) = 3\u221a3/2\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "jianyu_xu/pigeonhole_3.json",
    "question": "In a group of 10 people, each of whom has one of 3 different eye colors, at least how many people must have the same eye color?",
    "prediction": 4,
    "answer": 4,
    "rationale": "def solve():\n  total_people = 10\n  total_colors = 3\n\n  # Using the Pigeonhole Principle\n  min_same_color = (total_people // total_colors) + 1\n\n  return min_same_color",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/euler's_method2.json",
    "question": "Use euler's method to find the solution to the differential equation $\\frac{\\partial y}{\\partial x} = 3x + 4y$ at $x=1$ with the initial condition y(0) = 0 and step size $h=0.25$. What is y(1)?",
    "prediction": 2.0625,
    "answer": 2.0625,
    "rationale": "def solve():\n    import numpy as np\n\n    def dy_dx(x, y):\n        return 3 * x + 4 * y\n\n    def euler_method(x0, y0, h, x):\n        while x0 < x:\n            y0 = y0 + h * dy_dx(x0, y0)\n            x0 += h\n        return y0\n\n    x0 = 0\n    y0 = 0\n    h = 0.25\n    x = 1\n\n    ans = euler_method(x0, y0, h, x)\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xinyi/dag_1.json",
    "question": "If there exists an ordered numbering of the nodes such that for each node there are no links going to a lower-numbered node, then there are no directed cycles in a directed graph. True or false?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "elainewan/math_algebra_1_2.json",
    "question": "Suppose the graph of a polynomial f(t) = a + bt + ct^2 passes through points (1, -1), (2, 3), and (3, 13). What is f(-1)?",
    "prediction": 9.0,
    "answer": 9,
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the points\n    points = np.array([[1, -1], [2, 3], [3, 13]])\n\n    # Create the matrix A and vector B for the system of linear equations\n    A = np.array([[1, t, t**2] for t in points[:, 0]])\n    B = points[:, 1]\n\n    # Solve the system of linear equations to find the coefficients a, b, and c\n    coefficients = np.linalg.solve(A, B)\n\n    # Define the polynomial function f(t)\n    def f(t):\n        return coefficients[0] + coefficients[1]*t + coefficients[2]*t**2\n\n    # Calculate f(-1)\n    ans = f(-1)\n\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "jianyu_xu/Lah_number_1.json",
    "question": "A group of 7 people is to be divided into 3 committees. Within each committee, people are ranked in a certain order. In how many ways can this be done?",
    "prediction": 5040,
    "answer": 12600,
    "rationale": "def solve():\n    import math\n\n    # Calculate the number of ways to divide the group into 3 committees\n    ways_to_divide = math.comb(7, 3) * math.comb(4, 2)\n\n    # Calculate the number of ways to rank people within each committee\n    ways_to_rank = math.perm(3, 3) * math.perm(2, 2) * math.perm(2, 2)\n\n    # Calculate the total number of ways to divide and rank the group\n    ans = ways_to_divide * ways_to_rank\n\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/hmm_smoothing1.json",
    "question": "Assuming we are underground, and the only thing we can observe is whether a person brings an umbrella or not. The weather could be either rain or sunny. Assuming the P(rain)=0.6 and P(sunny)=0.4. Assuming the weather on day $k$ is dependent on the weather on day $k-1$. We can write the transition probability as P(sunny $\\mid$ sunny) = P(rain $\\mid$ rain) = 0.7. The person has 60% chance to bring an umbrella when the weather is rain, and 40% chance to bring an umbrella when the weather is sunny, i.e. P(umbrella $\\mid$ rain) = 0.6 and P(umbrella $\\mid$ sunny) = 0.4. If we observe that the person (1) brought an umbrella on day 1, (2) did not bring an umbrella on day 2, (3) brought an umbrella on day 3.  What is the probability that day 2 is raining?",
    "prediction": 0.0,
    "answer": 0.5167,
    "rationale": "",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/ipnetwork21-ip-2.json",
    "question": "Consider the following graph, with links costs listed, and assume we are using shortest-path (or lowest-cost) routing, and that routing has equilibrated to a constant set of routing tables. The routing algorithm uses poisoned reverse, advertising an infinite weight for the poisoned paths. is the distance that B advertise to C infinity?",
    "prediction": false,
    "answer": true,
    "rationale": "Therefore, the answer is False.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "wenhuchen/kepler's_law1.json",
    "question": "Titan, the largest moon of Saturn, has a mean orbital radius of 1.22x10^9 m. The orbital period of Titan is 15.95 days. Hyperion, another moon of Saturn, orbits at a mean radius of 1.48x10^9 m. Use Kepler's third law of planetary motion to predict the orbital period of Hyperion in days.",
    "prediction": 21.311475271329048,
    "answer": 21.3,
    "rationale": "def solve():\n    # Constants\n    titan_radius = 1.22 * 10**9  # meters\n    titan_period = 15.95  # days\n    hyperion_radius = 1.48 * 10**9  # meters\n\n    # Kepler's Third Law: (T1/T2)^2 = (R1/R2)^3\n    # We want to find T2 (Hyperion's orbital period)\n    # T2 = T1 * (R2/R1)^(3/2)\n    hyperion_period = titan_period * (hyperion_radius / titan_radius)**(3/2)\n\n    return hyperion_period",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/math_abstact_algebra_7_2.json",
    "question": "Let M be the inverse of the group element ((3, 5), (4, 6)) in Z_7. What is M[0][1]?",
    "prediction": 6,
    "answer": 6,
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the matrix\n    matrix = np.array([[3, 5], [4, 6]])\n\n    # Calculate the determinant\n    det = int(np.linalg.det(matrix)) % 7\n\n    # Find the multiplicative inverse of the determinant in Z_7\n    for i in range(7):\n        if (det * i) % 7 == 1:\n            det_inv = i\n            break\n\n    # Calculate the adjugate matrix\n    adjugate = np.array([[6, -5], [-4, 3]])\n\n    # Calculate the inverse matrix in Z_7\n    inverse = (det_inv * adjugate) % 7\n\n    # Return the required element\n    return int(inverse[0][1])",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "maxku/cv-cnn1.json",
    "question": "Given a color image of size 28 x 28 x 3 pixels, how many convolutional filters in the first layer of a Convolutional Neural Network if the first layer's output tensor has size 26 x 26 x 64?",
    "prediction": 1728,
    "answer": 64,
    "rationale": "def solve():\n  # The output tensor size is 26 x 26 x 64\n  output_tensor_size = (26, 26, 64)\n\n  # The input image size is 28 x 28 x 3\n  input_image_size = (28, 28, 3)\n\n  # The spatial dimensions of the filter are the difference between the input and output spatial dimensions\n  filter_spatial_size = (input_image_size[0] - output_tensor_size[0] + 1, input_image_size[1] - output_tensor_size[1] + 1)\n\n  # The number of input channels is 3 (RGB)\n  input_channels = 3\n\n  # The number of output channels is 64\n  output_channels = 64\n\n  # The total number of filters is the product of the input channels, output channels, and the spatial dimensions of the filter\n  num_filters = input_channels * output_channels * filter_spatial_size[0] * filter_spatial_size[1]\n\n  return num_filters",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/fourier4-FT.json",
    "question": "Is the Fourier transform of the signal x(t)=(1-e^{-|t|})[u(t+1)-u(t-1)] even?",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if the Fourier transform of the given signal is even, we first need to find the Fourier transform of x(t) and then check its symmetry properties.\n\nThe given signal x(t) can be written as:\n\nx(t) = (1 - e^{-|t|})[u(t + 1) - u(t - 1)]\n\nwhere u(t) is the unit step function.\n\nNow, let's find the Fourier transform of x(t), which is defined as:\n\nX(f) = \u222b_{-\u221e}^{\u221e} x(t) e^{-j2\u03c0ft} dt\n\nSince x(t) is nonzero only in the interval [-1, 1], we can rewrite the integral as:\n\nX(f) = \u222b_{-1}^{1} (1 - e^{-|t|}) e^{-j2\u03c0ft} dt\n\nNow, let's split the integral into two parts, one for t < 0 and one for t > 0:\n\nX(f) = \u222b_{-1}^{0} (1 - e^{t}) e^{-j2\u03c0ft} dt + \u222b_{0}^{1} (1 - e^{-t}) e^{-j2\u03c0ft} dt\n\nLet's call the first integral X1(f) and the second integral X2(f):\n\nX1(f) = \u222b_{-1}^{0} (1 - e^{t}) e^{-j2\u03c0ft} dt\nX2(f) = \u222b_{0}^{1} (1 - e^{-t}) e^{-j2\u03c0ft} dt\n\nNow, let's check the symmetry properties of X(f). A function is even if its value is the same when the argument is replaced by its negative:\n\nX(-f) = X1(-f) + X2(-f)\n\nX1(-f) = \u222b_{-1}^{0} (1 - e^{t}) e^{j2\u03c0ft} dt\nX2(-f) = \u222b_{0}^{1} (1 - e^{-t}) e^{j2\u03c0ft} dt\n\nNow, let's compare X(f) and X(-f):\n\nX(f) = X1(f) + X2(f)\nX(-f) = X1(-f) + X2(-f)\n\nBy comparing the integrals, we can see that X1(f) = X1(-f) and X2(f) = X2(-f). Therefore, the Fourier transform X(f) is even.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "maxku/basic-electronics-5-3.json",
    "question": "Calculate the total capacitive reactance in the figure. Answer in unit of Ohm (3 sig.fig.).",
    "prediction": 3.84,
    "answer": 3.18,
    "rationale": "",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/cv-colorsci1-rgb.json",
    "question": "What is the total number of colors in RGB color space?",
    "prediction": 16777216,
    "answer": 16777216,
    "rationale": "def solve():\n  # In RGB color space, each color can have a value from 0 to 255\n  # There are 3 colors: Red, Green, and Blue\n  total_colors = 256 * 256 * 256\n  return total_colors",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "panlu/molar_heat_capacity1.json",
    "question": "A camper pours 0.300 kg of coffee, initially in a pot at 70.0\u00b0C into a 0.120-kg aluminum cup initially at 20.0\u00b0C. What is the equilibrium temperature? Assume that coffee has the same specific heat as water and that no heat is exchanged with the surroundings. (Unit: \u00b0C)",
    "prediction": 50.00000000000001,
    "answer": 66.0,
    "rationale": "def solve():\n  # Constants\n  mass_coffee = 0.300  # kg\n  mass_cup = 0.120  # kg\n  initial_temp_coffee = 70.0  # \u00b0C\n  initial_temp_cup = 20.0  # \u00b0C\n  specific_heat_water = 4186  # J/(kg\u00b7K)\n  specific_heat_aluminum = 903  # J/(kg\u00b7K)\n\n  # Calculate the heat gained by the cup and the heat lost by the coffee\n  heat_lost_coffee = mass_coffee * specific_heat_water * (initial_temp_coffee - initial_temp_cup)\n  heat_gained_cup = mass_cup * specific_heat_aluminum * (initial_temp_coffee - initial_temp_cup)\n\n  # Calculate the equilibrium temperature\n  equilibrium_temp = (heat_lost_coffee + heat_gained_cup) / (mass_coffee * specific_heat_water + mass_cup * specific_heat_aluminum)\n\n  return equilibrium_temp",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/econ_micro_7.json",
    "question": "George is seen to place an even-money $100,000 bet on the Bulls to win the NBA Finals. If George has a logarithmic utility-of-wealth function and if his current wealth is $1,000,000, what must he believe is the minimum probability that the Bulls will win?",
    "prediction": 1.0,
    "answer": 0.525,
    "rationale": "def solve():\n    import math\n\n    # Constants\n    initial_wealth = 1000000\n    bet_amount = 100000\n\n    # Calculate the expected utility if George loses the bet\n    expected_utility_loss = math.log(initial_wealth - bet_amount)\n\n    # Calculate the expected utility if George wins the bet\n    expected_utility_win = math.log(initial_wealth + bet_amount)\n\n    # Calculate the minimum probability that George believes the Bulls will win\n    min_probability = (expected_utility_loss - expected_utility_win) / (math.log(initial_wealth - bet_amount) - math.log(initial_wealth + bet_amount))\n\n    return min_probability",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_12.json",
    "question": "A model rocket follows the trajectory c(t) = (80t, 200t - 4.9t^2) until it hits the ground, with t in seconds and distance in meters. Find the rocket's maximum height in meters.",
    "prediction": 2040.8163099999997,
    "answer": 2041,
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the function for the trajectory\n    def c(t):\n        return 200 * t - 4.9 * t**2\n\n    # Find the time when the rocket reaches its maximum height\n    t_max = np.argmax([c(t) for t in np.arange(0, 100, 0.01)])\n\n    # Calculate the maximum height\n    max_height = c(t_max * 0.01)\n\n    return max_height",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "tonyxia/totient4.json",
    "question": "What's phi(29791) where phi is Euler's Totient Function?",
    "prediction": 28830,
    "answer": 28830,
    "rationale": "def solve():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def phi(n):\n        result = 1\n        for i in range(2, n):\n            if gcd(i, n) == 1:\n                result += 1\n        return result\n\n    ans = phi(29791)\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "jianyu_xu/Lah_number_4.json",
    "question": "How many ways are there to divide a set of 6 elements into 3 non-empty ordered subsets?",
    "prediction": 90,
    "answer": 1200,
    "rationale": "def solve():\n    # We can use the Stirling numbers of the second kind to solve this problem.\n    # The Stirling number S(n, k) represents the number of ways to partition a set of n elements into k non-empty subsets.\n    # We can calculate S(n, k) using the following recurrence relation:\n    # S(n, k) = k * S(n-1, k) + S(n-1, k-1)\n    \n    def stirling_number(n, k):\n        if n == k or k == 1:\n            return 1\n        if k == 0 or n == 0:\n            return 0\n        return k * stirling_number(n-1, k) + stirling_number(n-1, k-1)\n\n    ans = stirling_number(6, 3)\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/signalprocessing2-DB.json",
    "question": "Is 80 dB twice as loud as 40 dB?",
    "prediction": 0,
    "answer": false,
    "rationale": "No, it is not. The decibel scale is logarithmic, not linear. To determine the difference in loudness, we can use the formula:\n\nDifference (dB) = 10 * log10(P2/P1)\n\nwhere P1 and P2 are the power levels of the two sounds. In this case, the difference is 40 dB (80 dB - 40 dB). Solving for the ratio of the power levels:\n\n40 = 10 * log10(P2/P1)\n\n4 = log10(P2/P1)\n\n10^4 = P2/P1\n\nP2 = 10,000 * P1\n\nTherefore, 80 dB is 10,000 times more powerful than 40 dB, not twice as loud.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "maxku/ipnetwork16-application-chord.json",
    "question": "A Chord based distributed hash table (DHT) with 25 address space is used in a peer- to-peer file sharing network. There are currently 5 active peers in the network with node ID N3, N8, N15, N19 and N30. Show all the target key (in ascending order, ignore the node's identifier itself) for N3.",
    "prediction": [
      0,
      1,
      2,
      4,
      5,
      6,
      7
    ],
    "answer": [
      4,
      5,
      7,
      11,
      19
    ],
    "rationale": "def solve():\n    address_space = 25\n    active_peers = [3, 8, 15, 19, 30]\n    target_keys = []\n\n    for i in range(address_space):\n        if i == active_peers[0]:\n            continue\n        if i < active_peers[0] or i > active_peers[-1]:\n            target_keys.append(i)\n        elif i > active_peers[0] and i < active_peers[1]:\n            target_keys.append(i)\n\n    return target_keys",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "panlu/shock_wave1.json",
    "question": "An airplane is flying at Mach 1.75 at an altitude of 8000 m, where the speed of sound is How long after the plane passes directly overhead will you hear the sonic boom? (Unit: m/s)",
    "prediction": 15.41098138125499,
    "answer": 560,
    "rationale": "def solve():\n    altitude = 8000  # meters\n    mach_number = 1.75\n\n    # Calculate the speed of sound at 8000 m altitude\n    speed_of_sound = 331.3 * (1 + 0.0065 * altitude / 273.15) ** 0.5\n\n    # Calculate the time it takes for the sonic boom to reach the observer\n    time = (altitude ** 2) / ((mach_number ** 2 - 1) * (speed_of_sound ** 2))\n\n    return time ** 0.5",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "xinyi/linear_projection.json",
    "question": "Which of the following matrices takes any vector $v$ and projects it onto the space spanned by the columns of $\\Phi$? (a) $(\\Phi^T\\Phi)^{-1}$. (b) $\\Phi(\\Phi^T\\Phi)^{-1}$. (c) $\\Phi(\\Phi^T\\Phi)^{-1}\\Phi^T$. (d) $\\Phi^T(\\Phi^T\\Phi)^{-1}\\Phi^T$.",
    "prediction": "(c)",
    "answer": "(c)",
    "rationale": "To project a vector $v$ onto the space spanned by the columns of $\\Phi$, we need to find a matrix $P$ such that $Pv$ is the projection of $v$ onto the column space of $\\Phi$. The projection matrix $P$ can be found using the formula $P = \\Phi(\\Phi^T\\Phi)^{-1}\\Phi^T$. \n\nTherefore, the answer is (c).",
    "answer_type": "option",
    "correct": true
  },
  {
    "id": "panlu/pojectile_motion1.json",
    "question": "Sally is driving along a straight highway in her 1965 Mustang. At when she is moving at in the positive x-direction, she passes a signpost at Her x-acceleration as a function of time is\na_x = 2.0 m/s^2 - (0.10 m / s^3) t\n At X meter's, the car reaches maximum x-velocity? What is X?",
    "prediction": 266.66666666666663,
    "answer": 517,
    "rationale": "def solve():\n    import sympy as sp\n\n    t = sp.Symbol('t')\n    a_x = 2.0 - 0.10 * t\n\n    # To find the maximum x-velocity, we need to find when the acceleration is 0\n    t_max_velocity = sp.solve(a_x, t)[0]\n\n    # Now we need to find the velocity function by integrating the acceleration function\n    v_x = sp.integrate(a_x, t)\n\n    # Calculate the maximum velocity by substituting the time at which it occurs\n    max_velocity = v_x.subs(t, t_max_velocity)\n\n    # Now we need to find the position function by integrating the velocity function\n    x = sp.integrate(v_x, t)\n\n    # Calculate the position X at the time when the car reaches maximum x-velocity\n    X = x.subs(t, t_max_velocity)\n\n    return float(X)",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "panlu/rigid-body2.json",
    "question": "An athlete whirls a discus in a circle of radius 80.0 cm. At a certain instant, the athlete is rotating at 10.0 rad / s and the angular speed is increasing at 50.0 rad / s^2. At this instant, find the magnitude (Unit: m / s^2) of the acceleration. Return the numeric value.",
    "prediction": 89.44271909999159,
    "answer": 89.4,
    "rationale": "def solve():\n  import math\n\n  # Given values\n  radius = 0.8  # in meters\n  angular_speed = 10.0  # in rad/s\n  angular_acceleration = 50.0  # in rad/s^2\n\n  # Calculate the radial acceleration\n  radial_acceleration = radius * angular_speed**2\n\n  # Calculate the tangential acceleration\n  tangential_acceleration = radius * angular_acceleration\n\n  # Calculate the total acceleration\n  total_acceleration = math.sqrt(radial_acceleration**2 + tangential_acceleration**2)\n\n  return total_acceleration",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/future_value_2.json",
    "question": "Calculate the future value of an ordinary annuity of $800 per year for 4 years at 5% rate of return.",
    "prediction": 3448.100000000004,
    "answer": 3448.1,
    "rationale": "def solve():\n  pmt = 800  # Annual payment\n  n = 4  # Number of years\n  r = 0.05  # Rate of return\n\n  # Future value of an ordinary annuity formula\n  future_value = pmt * ((1 + r)**n - 1) / r\n\n  return future_value",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/math_algebra_6_5.json",
    "question": "What is the determinant of the matrix A = [[1, 0, 0, 0, 0, 0], [2, 7, 0, 0, 0, 0], [3, 8, 6, 0, 0, 0], [4, 9, 5, 2, 1, 4], [5, 8, 4, 0, 2, 5], [6, 7, 3, 0, 3, 6]]?",
    "prediction": -252.00000000000003,
    "answer": -252,
    "rationale": "def solve():\n    import numpy as np\n\n    A = np.array([[1, 0, 0, 0, 0, 0], [2, 7, 0, 0, 0, 0], [3, 8, 6, 0, 0, 0], [4, 9, 5, 2, 1, 4], [5, 8, 4, 0, 2, 5], [6, 7, 3, 0, 3, 6]])\n    det_A = np.linalg.det(A)\n    return det_A",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "maxku/cv-imageprocessing5-histogram.json",
    "question": "Given image \\begin{tabular}{|llll|} \\hline 7 & 1 & 6 & 0 \\\\ 3 & 3 & 7 & 6 \\\\ 6 & 6 & 5 & 7 \\\\ \\hline \\end{tabular} , and the bit-depth of the image is 4. Is the contrast of the image is poor? Judge it based on the histogram of the image.",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if the contrast of the image is poor, we need to analyze the histogram of the image. First, let's find the frequency of each pixel value in the image.\n\nImage:\n\\begin{tabular}{|llll|}\n\\hline\n7 & 1 & 6 & 0 \\\\\n3 & 3 & 7 & 6 \\\\\n6 & 6 & 5 & 7 \\\\\n\\hline\n\\end{tabular}\n\nFrequency of pixel values:\n0: 1\n1: 1\n3: 2\n5: 1\n6: 4\n7: 3\n\nSince the bit-depth of the image is 4, the maximum pixel value is 2^4 - 1 = 15. However, the pixel values in the image range from 0 to 7, which is only half of the possible range. This indicates that the contrast of the image is poor, as the pixel values are not spread across the entire possible range.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "mingyin/strong-law-of-large-number2.json",
    "question": "Let X_2,X_3,... be independent random variables such that $P(X_n=n)=P(X_n=-n)=1/(2n\\log (n)), P(X_n=0)=1-1/(n*\\log(n))$. Does $n^{-1}\\sum_{i=2}^n X_i$ converges in probability? Does $n^{-1}\\sum_{i=2}^n X_i$ converges in almost surely? Return the answers of the two questions as a list.",
    "prediction": 0,
    "answer": [
      1,
      0
    ],
    "rationale": "def solve():\n    import numpy as np\n\n    def probability_convergence(n, num_trials=10000):\n        sum_x = 0\n        for i in range(2, n + 1):\n            p_n = 1 / (2 * i * np.log(i))\n            sum_x += np.random.choice([i, -i, 0], p=[p_n, p_n, 1 - 2 * p_n])\n        return sum_x / n\n\n    def check_convergence(num_trials=10000, threshold=0.01):\n        convergence_count = 0\n        for _ in range(num_trials):\n            if abs(probability_convergence(1000)) < threshold:\n                convergence_count += 1\n        return convergence_count / num_trials\n\n    convergence_probability = check_convergence()\n\n    if convergence_probability > 0.95:\n        convergence_in_probability = True\n    else:\n        convergence_in_probability = False\n\n    # Since the random variables are independent and not identically distributed,\n    # we cannot apply the strong law of large numbers to determine almost sure convergence.\n    # Therefore, we cannot determine if the sequence converges almost surely.\n    convergence_almost_surely = \"Cannot determine\"\n\n    return [convergence_in_probability, convergence_almost_surely]",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "maxku/ipnetwork3-ip.json",
    "question": "An IPv4 packet contains the following data (in hexadecimal value) in the IP header: 4500 0034 B612 4000 4006 6F80 0A00 008B 5BC6 AEE0 . Does the header contains error?",
    "prediction": true,
    "answer": false,
    "rationale": "To determine if the IPv4 header contains an error, we need to verify the header checksum. The checksum is a 16-bit value in the IP header that is used to detect errors in the header. The checksum is calculated by adding all 16-bit words in the header and taking the one's complement of the sum.\n\nThe IP header in hexadecimal is: 4500 0034 B612 4000 4006 6F80 0A00 008B 5BC6 AEE0\n\nFirst, let's break it down into 16-bit words:\n\n4500\n0034\nB612\n4000\n4006\n6F80\n0A00\n008B\n5BC6\nAEE0\n\nNow, let's add these values together:\n\n4500\n+0034\n+B612\n+4000\n+4006\n+6F80\n+0A00\n+008B\n+5BC6\n+AEE0\n------\n1F623\n\nSince the sum is more than 16 bits, we need to wrap the carry (1) around to the least significant bit:\n\nF623\n+0001\n------\nF624\n\nNow, let's take the one's complement of the sum:\n\nF624 -> 09DB\n\nThe calculated checksum (09DB) does not match the checksum in the header (6F80). Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "wenhuchen/jensen2.json",
    "question": "For any triangle ABC, we have cos(A)cost(B)cos(C) $\\leq$ 1/8, is this true or false?",
    "prediction": true,
    "answer": true,
    "rationale": "By the Law of Cosines, we have:\n\ncos(A) = (b^2 + c^2 - a^2) / (2bc)\ncos(B) = (a^2 + c^2 - b^2) / (2ac)\ncos(C) = (a^2 + b^2 - c^2) / (2ab)\n\nNow, let's multiply cos(A), cos(B), and cos(C):\n\ncos(A)cos(B)cos(C) = [(b^2 + c^2 - a^2)(a^2 + c^2 - b^2)(a^2 + b^2 - c^2)] / (8a^2b^2c^2)\n\nBy the triangle inequality, we know that the sum of any two sides of a triangle is greater than the third side:\n\na + b > c\na + c > b\nb + c > a\n\nAdding all three inequalities, we get:\n\n2(a + b + c) > 2(a + b + c)\n\nDividing by 2:\n\na + b + c > a + b + c\n\nNow, let's use the substitution:\n\np = a + b + c\n\nThen, we have:\n\na = p - b - c\nb = p - a - c\nc = p - a - b\n\nSubstituting these expressions into the product of cosines, we get:\n\ncos(A)cos(B)cos(C) = [(2bc - p(p - a))(2ac - p(p - b))(2ab - p(p - c))] / (8a^2b^2c^2)\n\nNow, let's consider the function:\n\nf(x) = x(p - x)\n\nTaking the derivative of f(x) with respect to x, we get:\n\nf'(x) = p - 2x\n\nSetting f'(x) = 0, we find the critical point:\n\np - 2x = 0\nx = p/2\n\nSince f'(x) changes sign at x = p/2, we know that f(x) has a maximum at x = p/2. Therefore, we have:\n\nf(x) \u2264 f(p/2) = (p/2)(p/2) = p^2/4\n\nNow, let's substitute this back into the product of cosines:\n\ncos(A)cos(B)cos(C) \u2264 [(p^2/4)(p^2/4)(p^2/4)] / (8a^2b^2c^2)\n\nSince a, b, and c are positive, we have:\n\ncos(A)cos(B)cos(C) \u2264 p^6 / (2^9a^2b^2c^2)\n\nNow, let's consider the function:\n\ng(x) = p^6 / (2^9x^2(p - x)^2(p - 2x)^2)\n\nTaking the derivative of g(x) with respect to x, we get:\n\ng'(x) = -2p^6(3p^2 - 10px + 8x^2) / (2^9x^3(p - x)^3(p - 2x)^3)\n\nSetting g'(x) = 0, we find the critical point:\n\n3p^2 - 10px + 8x^2 = 0\nx = p/3, 2p/3\n\nSince g'(x) changes sign at x = p/3 and x = 2p/3, we know that g(x) has a maximum at x = p/3 and x = 2p/3. Therefore, we have:\n\ng(x) \u2264 g(p/3) = p^6 / (2^9(p/3)^2(2p/3)^2(p/3)^2)\n\nSimplifying, we get:\n\ng(x) \u2264 1/8\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "wenhuchen/wiener_process3.json",
    "question": "Let W(t) be the standard Brownian motion. Define X(t) = exp{W(t)}, for all t \\in [0, \\infty). Let 0 < s < t. Find Cov(X(s=1/2), X(t=1)).",
    "prediction": 1.1146859711788915,
    "answer": 1.3733,
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the given values\n    s = 1/2\n    t = 1\n\n    # Calculate the covariance\n    cov = (np.exp(s) - 1) * (np.exp(t) - 1)\n\n    return cov",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/modulararithmetic6.json",
    "question": "Find which digit is at 1001th place after the decimal point in the decimal expansion of the fraction 9/28.",
    "prediction": 0,
    "answer": 2,
    "rationale": "def solve():\n    fraction = 9 / 28\n    decimal_expansion = str(fraction)\n    digit_at_1001th_place = int(decimal_expansion[1002])\n    return digit_at_1001th_place",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_3_5.json",
    "question": "Let h(x) = 1/(\\sqrt{x} + 1). What is h''(x) when x = 1?",
    "prediction": 0.125,
    "answer": 0.125,
    "rationale": "def solve():\n    import sympy as sp\n\n    x = sp.Symbol('x')\n    h_x = 1 / (sp.sqrt(x) + 1)\n    h_x_prime = h_x.diff(x)\n    h_x_double_prime = h_x_prime.diff(x)\n    ans = h_x_double_prime.subs(x, 1)\n\n    return float(ans)",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/divergence2.json",
    "question": "Use divergence therem to evaluate $\\iint_S \\vec{F} \\cdot d \\vec{S}$ where $\\vec{F} = yx^2 \\vec{i} + (xy^2 - 3z^4)\\vec{j} + (x^3+y^3)\\vec{k}$ and the surface $S$ consists of the sphere of radius 4 with $z \\le 0$ and $y \\le 0$. Note all three surfaces of this solid are included in $S$.",
    "prediction": 273.066666666667,
    "answer": 0.0,
    "rationale": "def solve():\n    import sympy as sp\n\n    x, y, z = sp.symbols('x y z')\n    F = sp.Matrix([y * x**2, x * y**2 - 3 * z**4, x**3 + y**3])\n\n    # Calculate the divergence of F\n    div_F = F[0].diff(x) + F[1].diff(y) + F[2].diff(z)\n\n    # Define the spherical coordinates\n    r, theta, phi = sp.symbols('r theta phi')\n    x_sph = r * sp.sin(theta) * sp.cos(phi)\n    y_sph = r * sp.sin(theta) * sp.sin(phi)\n    z_sph = r * sp.cos(theta)\n\n    # Replace x, y, z with spherical coordinates\n    div_F_sph = div_F.subs({x: x_sph, y: y_sph, z: z_sph})\n\n    # Calculate the Jacobian\n    J = sp.Matrix([[x_sph.diff(r), x_sph.diff(theta), x_sph.diff(phi)],\n                   [y_sph.diff(r), y_sph.diff(theta), y_sph.diff(phi)],\n                   [z_sph.diff(r), z_sph.diff(theta), z_sph.diff(phi)]])\n\n    jacobian = J.det()\n\n    # Integrate the divergence over the volume\n    integral = sp.integrate(sp.integrate(sp.integrate(div_F_sph * jacobian, (r, 0, 4)), (theta, sp.pi/2, sp.pi)), (phi, 0, sp.pi/2))\n\n    ans = integral.evalf()\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/double_integral2.json",
    "question": "Compute the integral $\\iint_D xy^2 dA$, where $D$ is the rectangle defined by 0 <= x <= 2 and 0 <= y <= 1.",
    "prediction": 0.666666666666667,
    "answer": 0.66667,
    "rationale": "def solve():\n    from sympy import symbols, integrate\n\n    x, y = symbols('x y')\n    f = x * y**2\n    integral = integrate(integrate(f, (x, 0, 2)), (y, 0, 1))\n    ans = integral.evalf()\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xinyi/binary_symmetric_channel_1.json",
    "question": "A cascade of $n$ identical independent binary symmetric channels each with raw error probability $p$, and $0<p<1$. What is the capacity of the cascade when $n$ goes to infinity?",
    "prediction": 1.0,
    "answer": 0.0,
    "rationale": "def solve():\n    import math\n\n    p = 0.5  # Assuming raw error probability p is 0.5, you can change it to any value between 0 and 1\n    n = 1000000  # Large value of n to approximate the limit as n goes to infinity\n\n    capacity = (1 - p) * math.log2(1 / (1 - p)) + p * math.log2(1 / p)\n    capacity_n = capacity ** n\n\n    return capacity_n",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_3_4.json",
    "question": "Let h(x) = (x^{-1/2} + 2x)(7 - x^{-1}). What is h'(x) when x = 4?",
    "prediction": 13.609375,
    "answer": 13.609,
    "rationale": "def solve():\n    import sympy as sp\n\n    x = sp.Symbol('x')\n    h_x = (x**(-1/2) + 2*x)*(7 - x**(-1))\n    h_prime_x = sp.diff(h_x, x)\n    ans = h_prime_x.subs(x, 4)\n\n    return float(ans)",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/math_abstact_algebra_7_5.json",
    "question": "What is the order of the element 5 in U_8?",
    "prediction": 2,
    "answer": 2,
    "rationale": "def solve():\n    def order_of_element(n, element):\n        for i in range(1, n):\n            if (element ** i) % n == 1:\n                return i\n        return -1\n\n    ans = order_of_element(8, 5)\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/Lagrange's_multiplier1.json",
    "question": "Find the minimum of $f(x,y)=2x - 5y$, subject to the constraint $x^2+y^2=144$.",
    "prediction": -64.62197768562903,
    "answer": -64.62,
    "rationale": "def solve():\n    from scipy.optimize import minimize\n\n    # Objective function\n    def f(xy):\n        x, y = xy\n        return 2 * x - 5 * y\n\n    # Constraint function\n    def constraint(xy):\n        x, y = xy\n        return x**2 + y**2 - 144\n\n    # Constraint dictionary\n    cons = {'type': 'eq', 'fun': constraint}\n\n    # Initial guess\n    x0 = [1, 1]\n\n    # Minimize the objective function subject to the constraint\n    result = minimize(f, x0, constraints=cons)\n\n    # Return the minimum value of the function\n    return result.fun",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/semiconductor4.json",
    "question": "Find the ratio of forward-bias to reverse-bias currents when the same voltage 1.5 V is applied in both forward and reverse. Assume room temperature 293 K.",
    "prediction": 5.9976049251397055e+25,
    "answer": -6e+25,
    "rationale": "def solve():\n    import math\n\n    # Constants\n    T = 293  # Temperature in Kelvin\n    V = 1.5  # Voltage in Volts\n    k = 1.38e-23  # Boltzmann constant in J/K\n    q = 1.6e-19  # Charge of an electron in Coulombs\n\n    # Calculate the ratio of forward-bias to reverse-bias currents\n    ratio = math.exp((q * V) / (k * T)) - 1\n\n    return ratio",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xueguangma/physics_gauss_law.json",
    "question": "The electric flux through a spherical surface is  $4.0\\times 10^4 N \\cdot m^2/C$. What is the net charge enclosed by the surface?",
    "prediction": 3.5416e-07,
    "answer": 3.54e-07,
    "rationale": "def solve():\n  electric_flux = 4.0 * 10**4  # N\u00b7m^2/C\n  permittivity_of_free_space = 8.854 * 10**-12  # C^2/N\u00b7m^2\n\n  net_charge_enclosed = electric_flux * permittivity_of_free_space\n  return net_charge_enclosed",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xinyi/channel_capacity_3.json",
    "question": "Adding a row to a channel transition matrix does not decrease capacity. True or False?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "panlu/black_hole1.json",
    "question": "Astrophysical theory suggests that a burned-out star whose mass is at least three solar masses will collapse under its own gravity to form a black hole. If it does, the radius of its event horizon is X * 10^3 m, what is X?",
    "prediction": 8.8501218,
    "answer": 8.9,
    "rationale": "def solve():\n  # import library\n  import math\n\n  # Constants\n  G = 6.67430 * 10**(-11)  # Gravitational constant, m^3 kg^(-1) s^(-2)\n  c = 3 * 10**8  # Speed of light, m/s\n  solar_mass = 1.989 * 10**30  # Solar mass, kg\n  mass = 3 * solar_mass  # Mass of the burned-out star, kg\n\n  # Calculate the radius of the event horizon\n  radius = (2 * G * mass) / (c**2)\n\n  # Convert the radius to X * 10^3 m\n  X = radius / 10**3\n\n  return X",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/econ_micro_19.json",
    "question": "A firm in a perfectly competitive industry has patented a new process for making widgets. The new process lowers the firm's average cost, meaning that this firm alone (although still a price taker) can earn real economic profits in the long run. Suppose a government study has found that the firm's new process is polluting the air and estimates the social marginal cost of widget production by this firm to be SMC = 0.5q. If the market price is $20, what should be the rate of a government-imposed excise tax to bring about optimal level of production?",
    "prediction": 10.0,
    "answer": 4,
    "rationale": "def solve():\n    # Given values\n    market_price = 20\n    social_marginal_cost = 0.5\n\n    # Calculate the optimal excise tax\n    optimal_excise_tax = market_price * social_marginal_cost\n\n    return optimal_excise_tax",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "panlu/triangle4.json",
    "question": "In triangle RST, X is located on the side RS, Y is located on the side RT, Z is located on the side ST, and XY and XZ are midsegments of \u25b3RST. If the length of side XY is 7, the length of side RT is 13, and the measure of angle YXZ is 124\u00b0, what is the measure of ange RYX?",
    "prediction": 27.664004496189346,
    "answer": 124,
    "rationale": "def solve():\n    import math\n\n    # Given values\n    XY = 7\n    RT = 13\n    angle_YXZ = 124\n\n    # Midsegment theorem states that the midsegment is half the length of the third side\n    # So, XY = 0.5 * RS\n    RS = 2 * XY\n\n    # Law of Cosines to find angle R\n    # RT^2 = RS^2 + ST^2 - 2 * RS * ST * cos(angle_R)\n    # We know that ST = RS (since XY and XZ are midsegments)\n    # So, RT^2 = 2 * RS^2 - 2 * RS^2 * cos(angle_R)\n    # cos(angle_R) = (2 * RS^2 - RT^2) / (2 * RS^2)\n    cos_angle_R = (2 * RS**2 - RT**2) / (2 * RS**2)\n    angle_R = math.degrees(math.acos(cos_angle_R))\n\n    # Angle RYX is half of angle R (since XY and XZ are midsegments)\n    angle_RYX = angle_R / 2\n\n    return angle_RYX",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "jianyu_xu/Stirling_number_second_kind_2.json",
    "question": "In how many ways can a group of 9 people be divided into 3 non-empty subsets?",
    "prediction": 721,
    "answer": 3025,
    "rationale": "def solve():\n    from math import comb\n\n    # There are 9 people, and we want to divide them into 3 non-empty subsets.\n    # We can use the Stirling numbers of the second kind to solve this problem.\n    # S(n, k) = k * S(n-1, k) + S(n-1, k-1)\n    # S(9, 3) = 3 * S(8, 3) + S(8, 2)\n\n    # Calculate S(8, 3) using the formula: S(n, k) = k * S(n-1, k) + S(n-1, k-1)\n    S_8_3 = 3 * (3 * comb(7, 2) + comb(7, 1)) + comb(7, 2)\n\n    # Calculate S(9, 3) using the formula: S(n, k) = k * S(n-1, k) + S(n-1, k-1)\n    S_9_3 = 3 * S_8_3 + comb(8, 2)\n\n    return S_9_3",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/probability-theory2.json",
    "question": "Toss a coin repeatedly until two consecutive heads appear. Assume that the probability of the coin landing on heads is 3/7. Calculate the average number of times the coin needs to be tossed before the experiment can end.",
    "prediction": 5.444444444444445,
    "answer": 7.77778,
    "rationale": "def solve():\n  # Probability of getting two consecutive heads\n  p_heads = 3/7\n  p_two_consecutive_heads = p_heads * p_heads\n\n  # Expected number of tosses to get two consecutive heads\n  ans = 1 / p_two_consecutive_heads\n  return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/divisibility6.json",
    "question": "How many pairs of (a, b) can we substitute for a and b in 30a0b03 so that the resulting integer is divisible by 13?",
    "prediction": 7,
    "answer": 3,
    "rationale": "def solve():\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            num = int(f\"30{a}0{b}03\")\n            if num % 13 == 0:\n                count += 1\n    return count",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/ipnetwork10-datatransmission.json",
    "question": "Suppose Host A wants to send a large file to Host B. The path from Host A to Host B has three links, of rates R1 = 500 kbps, R2 = 2 Mbps, and R3 = Mbps. Assuming no other traffic in the network, what is the throughput for the file transfer? (in kbps)",
    "prediction": 500,
    "answer": 500,
    "rationale": "def solve():\n  R1 = 500  # kbps\n  R2 = 2000  # kbps (2 Mbps)\n  R3 = 1000  # kbps (1 Mbps)\n\n  # The throughput is determined by the minimum rate among the three links\n  throughput = min(R1, R2, R3)\n  return throughput",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "xueguangma/jensen_alpha.json",
    "question": "You are interviewing two investment managers. Mr. Wong shows that the average return on his portfolio for the past 10 years has been 14%, with a standard deviation of 8% and a beta of 1.2. Ms. Petrov shows that the average return on her portfolio for the past 10 years has been 16%, with a standard deviation of 10% and a beta of 1.6. You know that over the past 10 years, the US Treasury security rate has averaged 2% and the return on the S&P 500 has averaged 11%. By measuring Jensen\u2019s alpha, Mr. Wong has done the better job. Is this correct? Answer True or False.",
    "prediction": true,
    "answer": true,
    "rationale": "To calculate Jensen's alpha, we use the formula:\n\nAlpha = Portfolio Return - (Risk-Free Rate + Beta * (Market Return - Risk-Free Rate))\n\nFor Mr. Wong:\nAlpha_Wong = 14% - (2% + 1.2 * (11% - 2%))\nAlpha_Wong = 14% - (2% + 1.2 * 9%)\nAlpha_Wong = 14% - (2% + 10.8%)\nAlpha_Wong = 1.2%\n\nFor Ms. Petrov:\nAlpha_Petrov = 16% - (2% + 1.6 * (11% - 2%))\nAlpha_Petrov = 16% - (2% + 1.6 * 9%)\nAlpha_Petrov = 16% - (2% + 14.4%)\nAlpha_Petrov = -0.4%\n\nSince Mr. Wong's alpha is higher than Ms. Petrov's alpha, the statement is correct. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "xueguangma/forward_rate_1.json",
    "question": "Given the following spot rates:\n1-year spot rate: 5%;\n2-year spot rate: 6%.\n Determine the one-year forward rate (between 0 and 1) one year from today.",
    "prediction": 0.07009523809523821,
    "answer": 0.070095,
    "rationale": "def solve():\n  # Spot rates\n  spot_rate_1 = 0.05\n  spot_rate_2 = 0.06\n\n  # Calculate the one-year forward rate one year from today\n  forward_rate = ((1 + spot_rate_2)**2 / (1 + spot_rate_1)) - 1\n\n  return forward_rate",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xinyi/channel_capacity_2.json",
    "question": "Consider a 26-key typewriter. Suppose that pushing a key results in printing that letter or the next (with equal probability). Thus A results in A or B, ..., Z results in Z or A. What is the capacity in bits?",
    "prediction": 26.0,
    "answer": 3.7,
    "rationale": "def solve():\n    import math\n    # There are 26 keys, each with 2 possible outcomes (the letter itself or the next one)\n    # So there are 2^26 possible outcomes in total\n    total_outcomes = 2 ** 26\n\n    # Calculate the capacity in bits using the formula: capacity = log2(total_outcomes)\n    capacity = math.log2(total_outcomes)\n\n    return capacity",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xueguangma/abnormal_return.json",
    "question": "Suppose we are given the following information. Use this information to calculate abnormal return. Rf: 4%\nRm: 12%\nBeta of the Portfolio: 1.8\nBeginning Value of Portfolio: $50,000\nEnding Value of Portfolio: $60,000\nWhat is the abnormal return?",
    "prediction": 0.016000000000000014,
    "answer": 0.016,
    "rationale": "def solve():\n    Rf = 0.04\n    Rm = 0.12\n    beta = 1.8\n    beginning_value = 50000\n    ending_value = 60000\n\n    # Calculate the expected return using the CAPM formula\n    expected_return = Rf + beta * (Rm - Rf)\n\n    # Calculate the actual return\n    actual_return = (ending_value - beginning_value) / beginning_value\n\n    # Calculate the abnormal return\n    abnormal_return = actual_return - expected_return\n\n    return abnormal_return",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "jianyu_xu/geometric_counting_1.json",
    "question": "How many triangles are there whose sides are all integers and whose maximum side length equals 11?",
    "prediction": 161,
    "answer": 36,
    "rationale": "def solve():\n    count = 0\n    for a in range(1, 12):\n        for b in range(a, 12):\n            for c in range(b, 12):\n                if a + b > c and a + c > b and b + c > a:\n                    count += 1\n    return count",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/definite_matrix2.json",
    "question": "Consider the matrix of A=[[1, -1], [-1, 4]], is this a positive definite matrix?",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if a matrix is positive definite, we can check if all its eigenvalues are positive. Let's find the eigenvalues of matrix A.\n\nThe characteristic equation of A is given by the determinant of (A - \u03bbI), where \u03bb is an eigenvalue and I is the identity matrix.\n\nA - \u03bbI = [[1 - \u03bb, -1], [-1, 4 - \u03bb]]\n\nThe determinant of (A - \u03bbI) is:\n\n(1 - \u03bb)(4 - \u03bb) - (-1)(-1) = \u03bb^2 - 5\u03bb + 3\n\nNow, we need to find the roots of this quadratic equation. We can use the quadratic formula:\n\n\u03bb = ( -b \u00b1 \u221a(b^2 - 4ac) ) / 2a\n\nIn our case, a = 1, b = -5, and c = 3.\n\n\u03bb = ( 5 \u00b1 \u221a((-5)^2 - 4(1)(3)) ) / 2(1)\n\u03bb = ( 5 \u00b1 \u221a(25 - 12) ) / 2\n\u03bb = ( 5 \u00b1 \u221a13 ) / 2\n\nThe roots are \u03bb1 = (5 + \u221a13) / 2 and \u03bb2 = (5 - \u221a13) / 2. Both of these eigenvalues are positive.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "elainewan/math_calculus_5_5.json",
    "question": "A survey shows that a mayoral candidate is gaining votes at a rate of 2000t + 1000 votes per day, where t is the number of days since she announced her candidacy. How many supporters will the candidate have after 60 days, assuming that she had no supporters at t = 0?",
    "prediction": 7260000,
    "answer": 3660000,
    "rationale": "def solve():\n  t = 60\n  votes_per_day = 2000 * t + 1000\n  total_votes = votes_per_day * t\n  return total_votes",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/Rolle's_theorem.json",
    "question": "for a given function f(x)=x^2*sin(x). Is there a value $x$ between 10pi and 11pi such that $f'(x) = 0$?",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if there is a value of $x$ between $10\\pi$ and $11\\pi$ such that $f'(x) = 0$, we first need to find the derivative of the given function $f(x) = x^2\\sin(x)$.\n\nUsing the product rule, we have:\n\n$f'(x) = (x^2)'\\sin(x) + x^2(\\sin(x))'$\n\n$f'(x) = 2x\\sin(x) + x^2\\cos(x)$\n\nNow, we need to find if there is a value of $x$ between $10\\pi$ and $11\\pi$ such that $f'(x) = 0$. \n\nSince $\\sin(x)$ and $\\cos(x)$ are periodic functions with a period of $2\\pi$, there will be values of $x$ between $10\\pi$ and $11\\pi$ where $\\sin(x) = 0$ and $\\cos(x) = 0$. However, we need to find if there is a value of $x$ in this interval that satisfies the equation $2x\\sin(x) + x^2\\cos(x) = 0$.\n\nLet's analyze the equation:\n\n$2x\\sin(x) + x^2\\cos(x) = 0$\n\n$x(2\\sin(x) + x\\cos(x)) = 0$\n\nSince $x$ is between $10\\pi$ and $11\\pi$, $x$ cannot be equal to 0. So, we need to find if there is a value of $x$ in this interval that satisfies the equation:\n\n$2\\sin(x) + x\\cos(x) = 0$\n\nWe can rewrite this equation as:\n\n$\\cos(x) = -\\frac{2\\sin(x)}{x}$\n\nSince $\\sin(x)$ and $\\cos(x)$ are bounded between -1 and 1, the right-hand side of the equation is also bounded. As $x$ increases, the magnitude of the right-hand side decreases. Therefore, there must be a value of $x$ between $10\\pi$ and $11\\pi$ that satisfies the equation, making the derivative equal to 0.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "wenhuchen/infinite_series_sum1.json",
    "question": "Find the sum of $\\sum_{n=1}^{\\infty} (cost(1/n^2) - cost(1/(n+1)^2))$",
    "prediction": -1.9999999955023662,
    "answer": -0.459,
    "rationale": "def solve():\n    import math\n\n    def cost(x):\n        return math.cos(math.pi * x)\n\n    def sum_series():\n        n = 1\n        total = 0\n        term = cost(1/n**2) - cost(1/(n+1)**2)\n        while abs(term) > 1e-10:\n            total += term\n            n += 1\n            term = cost(1/n**2) - cost(1/(n+1)**2)\n        return total\n\n    ans = sum_series()\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/green2.json",
    "question": "Use Green's Theorem to evaluate $\\oiint_{s} y^3 dx + x^3dy$ where $C$ is the positively oriented circle of radius 2 centered at origin.",
    "prediction": 0.0,
    "answer": -75.396,
    "rationale": "def solve():\n  import sympy as sp\n\n  x, y = sp.symbols('x y')\n  P = y**3\n  Q = x**3\n\n  # Partial derivatives\n  dP_dy = sp.diff(P, y)\n  dQ_dx = sp.diff(Q, x)\n\n  # Green's Theorem: \u222e(Pdx + Qdy) = \u222c(dQ/dx - dP/dy) dA\n  integrand = dQ_dx - dP_dy\n\n  # Polar coordinates\n  r, theta = sp.symbols('r theta')\n  integrand_polar = integrand.subs({x: r*sp.cos(theta), y: r*sp.sin(theta)})\n\n  # Jacobian for polar coordinates\n  jacobian = r\n\n  # Double integral\n  ans = sp.integrate(sp.integrate(integrand_polar * jacobian, (r, 0, 2)), (theta, 0, 2*sp.pi))\n\n  return float(ans)",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/cauchy_residue3.json",
    "question": "Compute $\\int_C dz / (z * (z-2)^2)dz$, where C: |z - 2| = 1. The answer is Ai with i denoting the imaginary unit, what is A?",
    "prediction": -1.5707963267948966,
    "answer": -0.3926,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.integrate import quad\n\n    def integrand(z):\n        return 1 / (z * (z - 2)**2)\n\n    # Parametrize the contour C: |z - 2| = 1\n    def parametrization(t):\n        return 2 + np.exp(1j * t)\n\n    def parametrization_derivative(t):\n        return 1j * np.exp(1j * t)\n\n    def integrand_parametrized(t):\n        z = parametrization(t)\n        dz_dt = parametrization_derivative(t)\n        return integrand(z) * dz_dt\n\n    # Integrate over the contour C\n    integral, _ = quad(lambda t: np.imag(integrand_parametrized(t)), 0, 2 * np.pi)\n\n    return integral",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "panlu/work_energy1.json",
    "question": "A glider with mass m = 0.200 kg sits on a frictionless horizontalair track, connected to a spring with force constant k = 5.00 N/m.You pull on the glider, stretching the spring 0.100 m, and release itfrom rest. The glider moves back toward its equilibrium position (x = 0).What is its x-velocity when  x = 0.080 m? (Unit: m/s))",
    "prediction": 0.30000000000000004,
    "answer": -0.3,
    "rationale": "def solve():\n    import math\n\n    m = 0.200  # mass of the glider in kg\n    k = 5.00  # force constant of the spring in N/m\n    x_initial = 0.100  # initial displacement of the spring in m\n    x_final = 0.080  # final displacement of the spring in m\n\n    # Calculate the potential energy stored in the spring at the initial position\n    potential_energy_initial = 0.5 * k * x_initial**2\n\n    # Calculate the potential energy stored in the spring at the final position\n    potential_energy_final = 0.5 * k * x_final**2\n\n    # Calculate the kinetic energy at the final position\n    kinetic_energy_final = potential_energy_initial - potential_energy_final\n\n    # Calculate the velocity of the glider at the final position\n    velocity_final = math.sqrt(2 * kinetic_energy_final / m)\n\n    return velocity_final",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/particle4.json",
    "question": "The Relativistic Heavy Ion Collider (RHIC) at the Brookhaven National Laboratory collides gold ions onto other gold ions head on. The energy of the gold ions is 100 GeV per nucleon. What is the center-of-mass energy of the collision in TeV?",
    "prediction": 39.4,
    "answer": 39.4,
    "rationale": "def solve():\n  energy_per_nucleon = 100  # GeV\n  gold_nucleons = 197  # Gold has 197 nucleons\n  energy_per_ion = energy_per_nucleon * gold_nucleons  # GeV\n\n  # Center-of-mass energy of the collision\n  center_of_mass_energy = 2 * energy_per_ion  # GeV\n\n  # Convert to TeV\n  center_of_mass_energy_TeV = center_of_mass_energy / 1000  # TeV\n\n  return center_of_mass_energy_TeV",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "panlu/angular_frequency2.json",
    "question": "A spring is mounted horizontally, with its left end fixed. A spring balance attached to the free end and pulled toward the right indicates that the stretching force is proportional to the displacement, and a force of 6.0 N causes a displacement of 0.030 m. We replace the spring balance with a 0.50-kg glider, pull it 0.020 m to the right along a frictionless air track, and release it from rest. Find the period T of the resulting oscillation. (Unit: s)",
    "prediction": 0.3141592653589793,
    "answer": 0.31,
    "rationale": "def solve():\n  import math\n\n  # Given values\n  force = 6.0  # N\n  displacement = 0.030  # m\n  mass = 0.50  # kg\n  initial_displacement = 0.020  # m\n\n  # Calculate the spring constant (k)\n  k = force / displacement\n\n  # Calculate the angular frequency (\u03c9)\n  omega = math.sqrt(k / mass)\n\n  # Calculate the period (T)\n  T = 2 * math.pi / omega\n\n  return T",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/nuclear6.json",
    "question": "A hospital has a 3.0 x 10^14 Bq Co-60 source for cancer therapy. The rate of gamma rays incident on a patient of area 0.30 m^2 located 4.0 m from the source is $X*10^11$ Bq, what is X? Co-60 emits a 1.1- and a 1.3-MeV gamma ray for each disintegration.",
    "prediction": 4.4762327744595565,
    "answer": 8.95,
    "rationale": "def solve():\n  source_strength = 3.0 * 10**14  # Bq\n  patient_area = 0.30  # m^2\n  distance = 4.0  # m\n\n  # Calculate the solid angle\n  solid_angle = patient_area / distance**2\n\n  # Calculate the rate of gamma rays incident on the patient\n  rate_of_gamma_rays = source_strength * solid_angle / (4 * 3.141592653589793)\n\n  # Convert the rate to the required format\n  X = rate_of_gamma_rays / 10**11\n\n  return X",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/basic-electronics-H2-3.json",
    "question": "Given $V_s$ = 5V, $R_1$ = 1k\u03a9, $R_2$ = 2.2k\u03a9, $R_3$ = 2.2k\u03a9, $R_4$ = 1.5k\u03a9, and $R_L$ = 4.7k\u03a9. Determine the voltage and current across $R_L$. Answer in unit of V (3 sig.fig.).",
    "prediction": [
      1.528,
      0.0
    ],
    "answer": 1.06,
    "rationale": "def solve():\n    # Constants\n    Vs = 5  # V\n    R1 = 1000  # Ohm\n    R2 = 2200  # Ohm\n    R3 = 2200  # Ohm\n    R4 = 1500  # Ohm\n    RL = 4700  # Ohm\n\n    # Calculate the equivalent resistance of R2 and R3 in parallel\n    Req_23 = (R2 * R3) / (R2 + R3)\n\n    # Calculate the equivalent resistance of the whole circuit\n    Req_total = R1 + Req_23 + R4\n\n    # Calculate the total current in the circuit\n    Itotal = Vs / Req_total\n\n    # Calculate the voltage across R2 and R3\n    V23 = Itotal * Req_23\n\n    # Calculate the current through RL\n    IRL = V23 / RL\n\n    # Calculate the voltage across RL\n    VRL = IRL * RL\n\n    # Round the answer to 3 significant figures\n    VRL = round(VRL, 3)\n    IRL = round(IRL, 3)\n\n    return VRL, IRL",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xinyi/random_walk_on_graph_min.json",
    "question": "Consider a random walk on a connected graph with 4 edges. What is the lowest possible entropy rate? Use base 2 logarithm and return the entropy rate in bits.",
    "prediction": 0,
    "answer": 0.75,
    "rationale": "def solve():\n    import math\n\n    # The lowest possible entropy rate occurs when the random walk is deterministic.\n    # In this case, the probability of taking each edge is either 0 or 1.\n    # The entropy rate is the sum of the probabilities of each edge multiplied by the logarithm of the probabilities.\n    # Since the probabilities are either 0 or 1, the logarithm of the probabilities is either undefined or 0.\n    # Therefore, the lowest possible entropy rate is 0 bits.\n\n    ans = 0\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/totient3.json",
    "question": "What is (6^83 + 8^83) mod 49?",
    "prediction": 35,
    "answer": 35,
    "rationale": "def solve():\n  # Calculate the powers\n  power_6 = 6 ** 83\n  power_8 = 8 ** 83\n\n  # Add the powers and find the remainder when divided by 49\n  ans = (power_6 + power_8) % 49\n\n  return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "maxku/cv-colorsci5-hsi.json",
    "question": "Given that the Hue-Saturation subspace shown in Fig. Q2 is a perfect circle and that colors A, B and C can be represented as the 3 points shown in the subspace. Which color has the smallest saturation coefficient?",
    "prediction": "(a)",
    "answer": "(b)",
    "rationale": "To determine which color has the smallest saturation coefficient, we need to find the distance of each color from the center of the Hue-Saturation circle. The color with the shortest distance will have the smallest saturation coefficient.\n\nLet's assume the coordinates of colors A, B, and C are (x1, y1), (x2, y2), and (x3, y3), respectively, and the center of the circle is at the origin (0, 0).\n\nThe distance of each color from the center can be calculated using the distance formula:\n\nDistance A = \u221a((x1 - 0)^2 + (y1 - 0)^2)\nDistance B = \u221a((x2 - 0)^2 + (y2 - 0)^2)\nDistance C = \u221a((x3 - 0)^2 + (y3 - 0)^2)\n\nNow, we need to compare the distances and find the smallest one. Let's assume the distances are as follows:\n\nDistance A < Distance B\nDistance A < Distance C\n\nTherefore, the answer is (a).",
    "answer_type": "option",
    "correct": false
  },
  {
    "id": "jianyu_xu/Lah_number_3.json",
    "question": "In how many ways can a group of 6 people be divided into 2 teams? Notice that members in each team are ordered.",
    "prediction": 720,
    "answer": 1800,
    "rationale": "def solve():\n  import math\n  ans = math.comb(6, 3) * math.factorial(3) * math.factorial(3)\n  return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "elainewan/math_algebra_4_2.json",
    "question": "Let V be the space of all infinite sequences of real numbers. Consider the transformation T(x_0, x_1, x_2, ...) = (x_1, x_2, x_3, ...) from V to V. Is the sequence (1,2,3,...) in the image of T?",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if the sequence (1, 2, 3, ...) is in the image of T, we need to find a sequence in V such that T applied to that sequence results in (1, 2, 3, ...).\n\nLet's consider the sequence (0, 1, 2, 3, ...). Applying the transformation T to this sequence, we get:\n\nT(0, 1, 2, 3, ...) = (1, 2, 3, ...)\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "wenhuchen/t_test2.json",
    "question": "A group of 5 patients treated with medicine. A is of weight 42,39,38,60 &41 kgs. Second group of 7 patients from the same hospital treated with medicine B is of weight 38, 42, 56, 64, 68, 69, & 62 kgs. Is there any difference between medicines under significance level of 5%?",
    "prediction": 0,
    "answer": false,
    "rationale": "To determine if there is a significant difference between the two groups of patients treated with medicine A and B, we can perform a two-sample t-test. The null hypothesis (H0) is that there is no significant difference between the two groups, while the alternative hypothesis (H1) is that there is a significant difference.\n\nFirst, let's calculate the mean and standard deviation for each group:\n\nGroup A:\nWeights: 42, 39, 38, 60, 41\nMean (\u00b5A) = (42 + 39 + 38 + 60 + 41) / 5 = 220 / 5 = 44\nStandard Deviation (\u03c3A) = \u221a[(\u03a3(x - \u00b5A)^2) / (nA - 1)] = \u221a[(2^2 + 5^2 + 6^2 + 16^2 + 3^2) / 4] = \u221a(4 + 25 + 36 + 256 + 9) / 4 = \u221a330 / 4 = \u221a82.5 \u2248 9.08\n\nGroup B:\nWeights: 38, 42, 56, 64, 68, 69, 62\nMean (\u00b5B) = (38 + 42 + 56 + 64 + 68 + 69 + 62) / 7 = 399 / 7 = 57\nStandard Deviation (\u03c3B) = \u221a[(\u03a3(x - \u00b5B)^2) / (nB - 1)] = \u221a[(19^2 + 15^2 + 1^2 + 7^2 + 11^2 + 12^2 + 5^2) / 6] = \u221a(361 + 225 + 1 + 49 + 121 + 144 + 25) / 6 = \u221a926 / 6 = \u221a154.33 \u2248 12.42\n\nNow, we can calculate the t-statistic:\n\nt = (\u00b5A - \u00b5B) / \u221a[(\u03c3A^2 / nA) + (\u03c3B^2 / nB)] = (44 - 57) / \u221a[(9.08^2 / 5) + (12.42^2 / 7)] = -13 / \u221a[(82.5 / 5) + (154.33 / 7)] \u2248 -13 / 6.63 \u2248 -1.96\n\nWith a significance level of 5% (\u03b1 = 0.05) and degrees of freedom (df) = nA + nB - 2 = 5 + 7 - 2 = 10, we can look up the critical t-value in a t-distribution table. The critical t-value for a two-tailed test with \u03b1 = 0.05 and df = 10 is approximately 2.228.\n\nSince the calculated t-statistic (-1.96) is less than the critical t-value (2.228), we fail to reject the null hypothesis. Therefore, there is no significant difference between the two groups of patients treated with medicine A and B at a 5% significance level.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "wenhuchen/divergence3.json",
    "question": "Use divergence therem to evaluate $\\iint_S \\vec{F} \\cdot d \\vec{S}$ where $\\vec{F} = sin(\\pi x) \\vec{i} + (z y^3)\\vec{j} + (z^2 + 4x)\\vec{k}$ and $S$ is the suface of the box with $-1 \\le x \\le 2, 0 \\le y \\le 1$ and $1 \\le z \\le 4$. Note that all six sides of the box are included in $S$.",
    "prediction": 67.5,
    "answer": 67.5,
    "rationale": "def solve():\n    from sympy import symbols, sin, pi, integrate\n\n    x, y, z = symbols('x y z')\n    Fx = sin(pi * x)\n    Fy = z * y**3\n    Fz = z**2 + 4 * x\n\n    # Calculate the divergence of F\n    div_F = Fx.diff(x) + Fy.diff(y) + Fz.diff(z)\n\n    # Integrate the divergence of F over the volume of the box\n    ans = integrate(integrate(integrate(div_F, (x, -1, 2)), (y, 0, 1)), (z, 1, 4))\n\n    return ans.evalf()",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xinyi/stationary_stochastic_process.json",
    "question": "The dependence between adjacent n-blocks of a stationary process grows linearly with n. True or False?",
    "prediction": false,
    "answer": false,
    "rationale": "Therefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "xueguangma/binomial_model_1.json",
    "question": "For a one-period binomial model for the price of a stock, you are given: (i) The period is one year. (ii) The stock pays no dividends. (iii) u =1.433, where u is one plus the rate of capital gain on the stock if the price goes up.  (iv) d = 0.756 , where d is one plus the rate of capital loss on the stock if the price goes down. (v) The continuously compounded annual expected return on the stock is 10%. What is the true probability of the stock price going up.",
    "prediction": 0.5157620651043541,
    "answer": 0.52,
    "rationale": "def solve():\n    import math\n\n    # Given values\n    u = 1.433\n    d = 0.756\n    r = 0.1\n\n    # Calculate the risk-neutral probability\n    p = (math.exp(r) - d) / (u - d)\n\n    return p",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/Poisson_process1.json",
    "question": "Let {N(t), t=[0, \\infty]} be a Poisson process with rate $\\lambda = 5$. Find the probability of no arrivals in [3, 5)",
    "prediction": 4.5399929762484854e-05,
    "answer": 0.37,
    "rationale": "def solve():\n  import math\n\n  # Parameters\n  lambda_rate = 5\n  t1 = 3\n  t2 = 5\n\n  # Time interval\n  delta_t = t2 - t1\n\n  # Poisson probability formula for k=0 arrivals\n  k = 0\n  ans = math.exp(-lambda_rate * delta_t) * (lambda_rate * delta_t)**k / math.factorial(k)\n\n  return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xueguangma/black_scholes_framework_1.json",
    "question": "You are asked to determine the price of a European put option on a stock. Assuming the Black-Scholes framework holds, you are given: (i) The stock price is $100. (ii) The put option will expire in 6 months. (iii) The strike price is $98. (iv) The continuously compounded risk-free interest rate is r = 0.055. (v) \u03b4 = 0.01 (vi) \u03c3 = 0.50. What is the price of the put option?",
    "prediction": 11.688584269473765,
    "answer": 11.9,
    "rationale": "def solve():\n    import math\n    from scipy.stats import norm\n\n    # Given parameters\n    S = 100  # Stock price\n    T = 0.5  # Time to expiration (6 months)\n    K = 98  # Strike price\n    r = 0.055  # Risk-free interest rate\n    delta = 0.01\n    sigma = 0.50  # Volatility\n\n    # Calculate d1 and d2\n    d1 = (math.log(S / K) + (r - delta + 0.5 * sigma ** 2) * T) / (sigma * math.sqrt(T))\n    d2 = d1 - sigma * math.sqrt(T)\n\n    # Calculate the price of the put option\n    put_price = K * math.exp(-r * T) * norm.cdf(-d2) - S * math.exp(-delta * T) * norm.cdf(-d1)\n\n    return put_price",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "maxku/basic-electronics-5-4.json",
    "question": "Determine the time constant (i.e. \u03c4 ) of the circuit in the figure. Answer in unit of seconds (3 sig.fig.).",
    "prediction": 3.84,
    "answer": 3.93,
    "rationale": "",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "panlu/liquid_compressibility1.json",
    "question": "A hydraulic press contains $0.25 m^3$ (250 L) of oil. Find the decrease in the volume of the oil when it is subjected to a pressure increase  $\\Delta p=1.6 \\times 10^7 Pa$ (about 160 atm or 2300 psi). The bulk modulus of the oil is $B=5.0 \\times 10^9 Pa$ (about $5.0 \\times 10^4 atm$) and its compressibility is $k=1 / B=20 \\times 10^{-6} atm^{-1}$. (Unit: 10^{-4} m^3)",
    "prediction": -8.0,
    "answer": -0.8,
    "rationale": "def solve():\n  initial_volume = 0.25  # m^3\n  pressure_increase = 1.6 * 10**7  # Pa\n  bulk_modulus = 5.0 * 10**9  # Pa\n\n  # Calculate the decrease in volume using the formula: \u0394V = -k * \u0394p * V\n  compressibility = 1 / bulk_modulus\n  decrease_in_volume = -compressibility * pressure_increase * initial_volume\n\n  # Convert the decrease in volume to the unit 10^-4 m^3\n  decrease_in_volume *= 10**4\n\n  return decrease_in_volume",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/infinite_series_sum2.json",
    "question": "Find the sum of $\\sum_{n=1}^{\\infty} (1/e^n + 1/(n*(n+1)))$",
    "prediction": 0,
    "answer": 1.581,
    "rationale": "def solve():\n    import math\n\n    # Initialize the sum\n    ans = 0\n\n    # Set a tolerance for the sum\n    tolerance = 1e-10\n\n    # Initialize the current term\n    current_term = 1\n\n    # Initialize the index n\n    n = 1\n\n    # Iterate until the current term is smaller than the tolerance\n    while current_term > tolerance:\n        # Calculate the current term\n        current_term = 1 / math.exp(n) + 1 / (n * (n + 1))\n\n        # Add the current term to the sum\n        ans += current_term\n\n        # Increment the index n\n        n += 1\n\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "elainewan/econ_micro_18_3.json",
    "question": "Suppose 100 cars will be offered on the used-car market. Let 50 of them be good cars, each worth $10,000 to a buyer, and let 50 be lemons, each worth only $2,000. Suppose that there are enough buyers relative to sellers that competition among them leads cars to be sold at their maximum willingness to pay. What would the market equilibrium price for good cars be if sellers value good cars at $6,000?",
    "prediction": 8000.0,
    "answer": 6000,
    "rationale": "def solve():\n  # Number of good cars and lemons\n  num_good_cars = 50\n  num_lemons = 50\n\n  # Value of good cars and lemons to buyers\n  value_good_cars_buyer = 10000\n  value_lemons_buyer = 2000\n\n  # Value of good cars to sellers\n  value_good_cars_seller = 6000\n\n  # Market equilibrium price for good cars\n  market_equilibrium_price_good_cars = (value_good_cars_buyer + value_good_cars_seller) / 2\n\n  return market_equilibrium_price_good_cars",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "panlu/circular_orbit1.json",
    "question": "You wish to put a 1000-kg satellite into a circular orbit 300 km above the earth's surface. How much work must be done to the satellite to put it in orbit? The earth's radius and mass are $R_E}=$ $6.38 \\times 10^6 m$ and $m_E=5.97 \\times 10^{24} kg$. (Unit: 10^10 J)",
    "prediction": 2.9824529191616755,
    "answer": 3.26,
    "rationale": "def solve():\n  import math\n\n  # Constants\n  G = 6.67430e-11  # Gravitational constant, m^3 kg^-1 s^-2\n  m_satellite = 1000  # Satellite mass, kg\n  h = 300000  # Height above Earth's surface, m\n  R_E = 6.38e6  # Earth's radius, m\n  m_E = 5.97e24  # Earth's mass, kg\n\n  # Calculate the work done\n  r = R_E + h  # Distance from the center of the Earth\n  v = math.sqrt(G * m_E / r)  # Orbital velocity, m/s\n  E_kinetic = 0.5 * m_satellite * v**2  # Kinetic energy, J\n  E_potential = -G * m_satellite * m_E / r  # Gravitational potential energy, J\n  E_total = E_kinetic + E_potential  # Total energy, J\n  work_done = -E_total  # Work done, J\n\n  # Convert to 10^10 J\n  ans = work_done / 1e10\n\n  return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/Lebesgue-measure4.json",
    "question": "Suppose $E \\subset(0,2 \\pi) is a measurable set. \\left\\{\\xi_n\right\\}$ is an arbitrary sequence of real numbers. If the Lebesgue measure of E is 2, what is $\\lim _{n \rightarrow \\infty} \\int_E \\cos ^2 (n x+\\xi_n ) dx$? Return the numeric.",
    "prediction": 1.0,
    "answer": 1.0,
    "rationale": "def solve():\n    import numpy as np\n\n    # Since the Lebesgue measure of E is 2, the integral of the constant function 1 over E is 2.\n    # We can use the following trigonometric identity: cos^2(x) = (1 + cos(2x))/2\n    # Therefore, we have:\n    # lim (n -> infinity) integral_E cos^2(nx + xi_n) dx = lim (n -> infinity) integral_E (1 + cos(2nx + 2xi_n))/2 dx\n    # The integral of cos(2nx + 2xi_n) over E oscillates between positive and negative values as n goes to infinity,\n    # so the limit of this integral is 0.\n    # Thus, the limit of the integral of cos^2(nx + xi_n) over E is the integral of the constant function 1/2 over E.\n    ans = 1/2 * 2\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "panlu/similarity2.json",
    "question": "If polygon ACDF is similar to polygon VWYZ, AF = 12, CD = 9, YZ = 10, YW = 6, and ZV = 3y-1, find y.",
    "prediction": -0.777777777777778,
    "answer": 3,
    "rationale": "def solve():\n    # Given values\n    AF = 12\n    CD = 9\n    YZ = 10\n    YW = 6\n\n    # Since the polygons are similar, their corresponding sides are proportional\n    # AF/VW = CD/YZ\n    # AF/YW = CD/YZ\n    # We can find the value of VW\n    VW = AF * YZ / CD\n\n    # Now, we know that ZV = 3y - 1 and ZV + VW = YZ\n    # So, we can write the equation: 3y - 1 + VW = YZ\n    # Solving for y\n    y = (YZ - VW + 1) / 3\n\n    return y",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "xueguangma/elasticity.json",
    "question": "Suppose the demand curve for oPads is given by $p=\\frac{500-x}{10}, What is the elasticity value of this demand function.",
    "prediction": 0,
    "answer": -1.5,
    "rationale": "def solve():\n    from sympy import symbols, diff\n\n    x = symbols('x')\n    p = (500 - x) / 10\n\n    # Calculate the derivative of the demand function with respect to x\n    dp_dx = diff(p, x)\n\n    # Calculate the elasticity value\n    elasticity = (-x / (500 - x)) * (dp_dx / p)\n\n    return float(elasticity)",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/divisibility2.json",
    "question": "Find the largest integer for which (x+11)/(x+7) is an integer.",
    "prediction": 3,
    "answer": -3,
    "rationale": "def solve():\n    # We are looking for the largest integer x such that (x+11)/(x+7) is an integer\n    # Let's call the integer result k, so (x+11)/(x+7) = k\n    # Then, x+11 = k(x+7)\n    # Rearranging, we get x = 7k - 4\n    # Since x is an integer, k must be an integer as well\n    # We want to find the largest possible x, so we need to find the largest possible k\n    # Since x is an integer, 7k - 4 must be positive, so k > 4/7\n    # The largest possible k is the largest integer greater than 4/7, which is 1\n    # So, the largest possible x is 7*1 - 4 = 3\n\n    return 3",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/graphtheory4-vertexcover.json",
    "question": "Let a undirected graph G with edges E = {<0,3>, <1,3>, <2,3>}, which <A,B> represent Node A is connected to Node B. What is the minimum vertex cover of G? Represent the vertex cover in a list of ascending order.",
    "prediction": [
      3
    ],
    "answer": [
      3
    ],
    "rationale": "def solve():\n    # The given graph G has edges E = {<0,3>, <1,3>, <2,3>}\n    # A minimum vertex cover is a smallest set of vertices that cover all the edges in the graph.\n    # In this case, we can choose vertex 3 to cover all the edges, since it is connected to all other vertices.\n    # So, the minimum vertex cover is [3].\n    return [3]",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "tonyxia/euler-graph1.json",
    "question": "Suppose a convex 3d-object has k pentagonal faces and m hexagonal faces. All faces are regular. What is k?",
    "prediction": 0,
    "answer": 12,
    "rationale": "def solve(m):\n    # According to Euler's formula for convex polyhedra: V - E + F = 2\n    # Where V is the number of vertices, E is the number of edges, and F is the number of faces.\n    # In this case, F = k + m (pentagonal faces + hexagonal faces)\n\n    # Each pentagonal face has 5 edges and each hexagonal face has 6 edges.\n    # Since each edge is shared by 2 faces, we have E = (5k + 6m) / 2\n\n    # Each pentagonal face has 5 vertices and each hexagonal face has 6 vertices.\n    # However, we need to account for the fact that vertices are shared by multiple faces.\n    # In this case, each vertex is shared by 3 faces, so we have V = (5k + 6m) / 3\n\n    # Plugging V, E, and F into Euler's formula, we get:\n    # ((5k + 6m) / 3) - ((5k + 6m) / 2) + (k + m) = 2\n\n    # Solving for k, we get:\n    k = (6 * m - 12) / 4\n\n    return k",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/Banach-Steinhaus-theorem1.json",
    "question": "Suppose H is a Banach space, and {x_n}\\in H, x\\in H. Then x_n weakly converges to x is equivalent to: ||x_n|| is bounded; for a dense set M* in H*, it holds \\lim_{n\\rightarrow\\infty} f(x_n)=f(x) for all f\\in M*. Is this correct? Answer 1 for yes and 0 for no.",
    "prediction": 1,
    "answer": 1.0,
    "rationale": "def solve():\n    ans = 1\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/scent.json",
    "question": "Given the following equation: x^4 - x - 10 = 0. determine the initial approximations for finding the smallest positive root. Use these to find the root correct to three decimal places with Secant method.",
    "prediction": 1.856,
    "answer": 1.856,
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the function and its derivative\n    def f(x):\n        return x**4 - x - 10\n\n    def df(x):\n        return 4*x**3 - 1\n\n    # Find the initial approximations\n    x1 = 1\n    while f(x1) * f(x1 + 1) > 0:\n        x1 += 1\n    x2 = x1 + 1\n\n    # Implement the Secant method\n    def secant_method(x1, x2, tol=1e-3, max_iter=100):\n        for _ in range(max_iter):\n            x3 = x2 - f(x2) * (x2 - x1) / (f(x2) - f(x1))\n            if abs(x3 - x2) < tol:\n                return x3\n            x1, x2 = x2, x3\n        return None\n\n    # Find the smallest positive root\n    root = secant_method(x1, x2)\n\n    return round(root, 3)",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "jianyu_xu/Catalan_1.json",
    "question": "How many ways are there to arrange 6 pairs of parentheses such that they are balanced?",
    "prediction": 132,
    "answer": 132,
    "rationale": "def solve():\n    from math import factorial\n\n    # Using the formula for the number of balanced parentheses: C_n = (2n)! / ((n+1)! * n!)\n    n = 6\n    ans = factorial(2 * n) // (factorial(n + 1) * factorial(n))\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "xinyi/fano_inequality.json",
    "question": "A train pulls out of the station at constant velocity. The received signal energy thus falls off with time as $1/i^2$. The total received signal at time $i$ is $Y_i = \\frac{1}{i}X_i + Z_i$ where $Z_1, Z_2, \\ldots$ are i.i.d. drawn from $N(0,1)$. The transmitter constraint for block length $n$ is $\\frac{1}{n}\\sum_{i=1}^n x_i^2(w) \\leq 2  $ for $w \\in \\{1,2,\\ldots, 2^{nR}\\}$. Use Fano's inequality to find the capacity for this channel.",
    "prediction": -991401535822.0109,
    "answer": 0.0,
    "rationale": "import numpy as np\nfrom scipy.stats import norm\ndef mutual_information(x, y):\n    joint_prob = np.outer(x, y)\n    marginal_x = np.sum(joint_prob, axis=1)\n    marginal_y = np.sum(joint_prob, axis=0)\n    mi = np.sum(joint_prob * np.log2(joint_prob / np.outer(marginal_x, marginal_y)))\n    return mi\ndef entropy_fano(pe, x_size):\n    return 1 + pe * np.log2(x_size - 1)\ndef capacity(n, R):\n    w = np.arange(1, 2**(n * R) + 1)\n    x = np.sqrt(2 / n) * w\n    y = 1 / np.arange(1, n + 1) * x[:, np.newaxis] + norm.rvs(size=(len(w), n))\n    mi = mutual_information(x, y)\n    pe = np.mean(np.min(np.abs(y - x[:, np.newaxis]), axis=0))\n    hx_y = entropy_fano(pe, len(x))\n    c = np.max(mi - hx_y)\n    return c\ndef solve():\n    n = 100\n    R = 0.1\n    ans = capacity(n, R)\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/rectangle3.json",
    "question": "Square ABCD. Rectangle AEFG. The degree of \u2220AFG=20. Please find \u2220AEB in terms of degree. Return the numeric value.",
    "prediction": 70,
    "answer": 25.0,
    "rationale": "def solve():\n    # Since square ABCD and rectangle AEFG share the same angle A,\n    # the angle AFG is equal to angle AFE, which is 20 degrees.\n    angle_AFG = 20\n\n    # Since AEFG is a rectangle, angle EAF is a right angle (90 degrees).\n    angle_EAF = 90\n\n    # Now we can find angle AEB using the triangle AEF.\n    # The sum of angles in a triangle is 180 degrees.\n    angle_AEB = 180 - angle_EAF - angle_AFG\n\n    return angle_AEB",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/statisticalphysics3.json",
    "question": "Compute the mean molecular speed v in the light gas hydrogen (H2) in m/s",
    "prediction": 6.0677565592826305e-21,
    "answer": 1750.0,
    "rationale": "",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/totient6.json",
    "question": "Find the last 3 digits of 2003^(2002^2001).",
    "prediction": 281,
    "answer": 241,
    "rationale": "def solve():\n    # We will use the pow() function with the third argument as the modulo\n    modulo = 1000  # We want the last 3 digits, so we will use modulo 1000\n    base = 2003\n    exponent = pow(2002, 2001, modulo - 1)  # Euler's theorem: a^(phi(m)) = 1 (mod m) for a and m coprime\n    ans = pow(base, exponent, modulo)\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/graphtheory2-vertexcover.json",
    "question": "Let a undirected graph G with edges E = {<0,1>,<4,1>,<2,0>,<2,1>,<2,3>,<1,3>}, which <A,B> represent Node A is connected to Node B. What is the minimum vertex cover of G? Represent the vertex cover in a list of ascending order.",
    "prediction": [
      1,
      2
    ],
    "answer": [
      1,
      2
    ],
    "rationale": "def solve():\n    # import library\n    import itertools\n\n    # implement the code\n    edges = [(0, 1), (4, 1), (2, 0), (2, 1), (2, 3), (1, 3)]\n    nodes = set()\n    for edge in edges:\n        nodes.add(edge[0])\n        nodes.add(edge[1])\n\n    def is_vertex_cover(cover, edges):\n        for edge in edges:\n            if edge[0] not in cover and edge[1] not in cover:\n                return False\n        return True\n\n    min_cover = len(nodes)\n    min_cover_set = None\n    for i in range(1, len(nodes) + 1):\n        for subset in itertools.combinations(nodes, i):\n            if is_vertex_cover(subset, edges):\n                if len(subset) < min_cover:\n                    min_cover = len(subset)\n                    min_cover_set = subset\n                break\n\n    ans = sorted(list(min_cover_set))\n    return ans",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "jianyu_xu/Stirling_number_first_kind_3.json",
    "question": "In how many ways can 7 people be seated at 5 identical round tables? Each table must have at least 1 person seated.",
    "prediction": 53,
    "answer": 175,
    "rationale": "def solve():\n    from math import comb\n\n    # We will use the stars and bars method to distribute the people among the tables.\n    # We have 7 people and 5 tables, so we need to distribute 7 - 1 = 6 stars among 5 - 1 = 4 bars.\n    # The number of ways to do this is C(6 + 4 - 1, 6) = C(9, 6).\n    ways_to_distribute = comb(9, 6)\n\n    # Now, we need to subtract the cases where one or more tables are empty.\n    # If one table is empty, we have C(8, 5) ways to distribute the people among the remaining 4 tables.\n    one_empty_table = comb(8, 5)\n\n    # If two tables are empty, we have C(7, 4) ways to distribute the people among the remaining 3 tables.\n    two_empty_tables = comb(7, 4)\n\n    # If three tables are empty, we have C(6, 3) ways to distribute the people among the remaining 2 tables.\n    three_empty_tables = comb(6, 3)\n\n    # If four tables are empty, we have C(5, 2) ways to distribute the people among the remaining 1 table.\n    four_empty_tables = comb(5, 2)\n\n    # We need to use the principle of inclusion-exclusion to find the total number of ways.\n    ans = ways_to_distribute - one_empty_table + two_empty_tables - three_empty_tables + four_empty_tables\n\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "maxku/graphtheory6-shortestpath.json",
    "question": "Let a undirected graph G with edges E = {<0,1>,<0,2>,<0,3>,<0,5>,<2,3>,<2,4>,<4,5>}, which <A,B> represent Node A is connected to Node B. What is the shortest path from node 0 to node 5? Represent the path as a list.",
    "prediction": [
      0,
      5
    ],
    "answer": [
      0,
      5
    ],
    "rationale": "def solve():\n    from collections import deque\n\n    graph = {\n        0: [1, 2, 3, 5],\n        1: [0],\n        2: [0, 3, 4],\n        3: [0, 2],\n        4: [2, 5],\n        5: [0, 4]\n    }\n\n    def bfs_shortest_path(graph, start, end):\n        visited = set()\n        queue = deque([[start]])\n\n        while queue:\n            path = queue.popleft()\n            node = path[-1]\n\n            if node == end:\n                return path\n\n            if node not in visited:\n                visited.add(node)\n                for neighbor in graph[node]:\n                    new_path = list(path)\n                    new_path.append(neighbor)\n                    queue.append(new_path)\n\n    ans = bfs_shortest_path(graph, 0, 5)\n    return ans",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "xinyi/differential_entropy.json",
    "question": "Roughly how many bits are required on the average to describe to 3 digit accuracy the decay time (in years) of a radium atom if the half-life of radium is 80 years? Note that half-life is the median of the distribution.",
    "prediction": 0.0002490789823851784,
    "answer": 19,
    "rationale": "def solve():\n  import math\n\n  # The half-life of radium is 80 years\n  half_life = 80\n\n  # We want to describe the decay time to 3-digit accuracy\n  accuracy = 0.001\n\n  # The decay time follows an exponential distribution with parameter lambda = ln(2) / half_life\n  decay_lambda = math.log(2) / half_life\n\n  # The maximum decay time we need to consider for 3-digit accuracy is given by the inverse of the accuracy\n  max_decay_time = 1 / accuracy\n\n  # The probability of a radium atom decaying within the maximum decay time is given by the cumulative distribution function (CDF) of the exponential distribution\n  prob_decay_within_max_time = 1 - math.exp(-decay_lambda * max_decay_time)\n\n  # The average number of bits required to describe the decay time is given by the entropy of the distribution, which is the negative logarithm of the probability\n  avg_bits = -math.log2(prob_decay_within_max_time)\n\n  return avg_bits",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_5_2.json",
    "question": "dy/dt = \\sqrt{t}, y(1) = 1. What is y(4)?",
    "prediction": 5.6666666628857785,
    "answer": 5.667,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.integrate import odeint\n\n    def dy_dt(y, t):\n        return np.sqrt(t)\n\n    t = np.linspace(1, 4, 1000)\n    y0 = 1\n    y = odeint(dy_dt, y0, t)\n\n    return y[-1][0]",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/black_scholes_framework_2.json",
    "question": "For an American perpetual option within the Black-Scholes framework, you are given: (i) $h_1 + h_2$ = 7/9 (ii) The continuously compounded risk-free interest rate is 5%. (iii) \u03c3 = 0.30. What is the value of $h_1$?",
    "prediction": 0.3166666666666667,
    "answer": 1.51,
    "rationale": "def solve():\n    import math\n\n    # Given values\n    h1_plus_h2 = 7 / 9\n    r = 0.05\n    sigma = 0.30\n\n    # Calculate h1 using the formula: h1 = (r + 0.5 * sigma^2) / sigma\n    h1 = (r + 0.5 * sigma**2) / sigma\n\n    return h1",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/probability-theory1.json",
    "question": "Consider a horizontal strip of N+2 squares in which the first and the last square are black and the remaining N squares are all white. Choose a white square uniformly at random, choose one of its two neighbors with equal probability, and color this neighboring square black if it is not already black. Repeat this process until all the remaining white squares have only black neighbors. Let $w(N)$ be the expected number of white squares remaining. What is the limit of $w(N)/N$ as $N$ goes to infinity?",
    "prediction": 0,
    "answer": 0.36787944,
    "rationale": "def solve():\n    import numpy as np\n\n    def expected_white_squares(N, iterations=100000):\n        total_white_squares = 0\n        for _ in range(iterations):\n            white_squares = N\n            black_squares = [0, N + 1]\n            while white_squares > 0:\n                chosen_white = np.random.randint(1, N + 1)\n                chosen_neighbor = chosen_white + np.random.choice([-1, 1])\n                if chosen_neighbor not in black_squares:\n                    black_squares.append(chosen_neighbor)\n                    white_squares -= 1\n            total_white_squares += white_squares\n        return total_white_squares / iterations\n\n    N_values = np.arange(10, 101, 10)\n    w_N_ratios = [expected_white_squares(N) / N for N in N_values]\n    limit = np.mean(w_N_ratios)\n    return limit",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xinyi/cramer_rao_lower_bound_1.json",
    "question": "What is the Cramer-Rao lower bound on $E_\\theta(\\hat{\\theta}(X)-\\theta)^2$, where $\\hat{\\theta}(X)$ is an unbaised estimator of $\\theta$ for the Gaussian distribution family $f_\\theta(x)=N(0,\\theta)$? (a) $2\\theta$. (b) $2\\theta^2$. (c) $0.5\\theta^{-1}$. (d) $0.5\\theta^{-2}$. Which option is correct?",
    "prediction": "(b)",
    "answer": "(b)",
    "rationale": "The Cramer-Rao lower bound states that the variance of any unbiased estimator $\\hat{\\theta}(X)$ of a parameter $\\theta$ is bounded below by the inverse of the Fisher information $I(\\theta)$, i.e., $Var(\\hat{\\theta}(X)) \\geq \\frac{1}{I(\\theta)}$. For the Gaussian distribution family $f_\\theta(x) = N(0, \\theta)$, the Fisher information is given by:\n\n$I(\\theta) = -E\\left[\\frac{\\partial^2}{\\partial \\theta^2} \\log f_\\theta(x)\\right]$\n\nThe probability density function of the Gaussian distribution is:\n\n$f_\\theta(x) = \\frac{1}{\\sqrt{2\\pi\\theta}} e^{-\\frac{x^2}{2\\theta}}$\n\nTaking the natural logarithm, we get:\n\n$\\log f_\\theta(x) = -\\frac{1}{2}\\log(2\\pi\\theta) - \\frac{x^2}{2\\theta}$\n\nNow, we compute the second derivative with respect to $\\theta$:\n\n$\\frac{\\partial^2}{\\partial \\theta^2} \\log f_\\theta(x) = \\frac{1}{2\\theta^2} - \\frac{x^2}{\\theta^3}$\n\nTaking the expectation, we have:\n\n$I(\\theta) = -E\\left[\\frac{1}{2\\theta^2} - \\frac{x^2}{\\theta^3}\\right]$\n\nSince $E[x^2] = \\theta$ for a Gaussian distribution with mean 0 and variance $\\theta$, we get:\n\n$I(\\theta) = -\\left(\\frac{1}{2\\theta^2} - \\frac{\\theta}{\\theta^3}\\right) = \\frac{1}{2\\theta^2}$\n\nThus, the Cramer-Rao lower bound on $E_\\theta(\\hat{\\theta}(X)-\\theta)^2$ is:\n\n$\\frac{1}{I(\\theta)} = 2\\theta^2$\n\nTherefore, the answer is (b) $2\\theta^2$.",
    "answer_type": "option",
    "correct": true
  },
  {
    "id": "mingyin/gamma-function2.json",
    "question": "what is the limit of $2/\\sqrt{\\pi}*\\sqrt{n}\\int_0^1(1-x^2)^n dx$ as n goes to infinity?",
    "prediction": 0,
    "answer": 1.0,
    "rationale": "def solve():\n    import math\n\n    def integral(n):\n        return (math.gamma(n + 1) * math.gamma(1.5)) / math.gamma(n + 1.5)\n\n    n = 1000  # large enough value to approximate the limit\n    ans = (2 / math.sqrt(math.pi)) * math.sqrt(n) * integral(n)\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/optics6.json",
    "question": "Malus' law: $I=I_0*cos^2($\\theta$)$. Where I is the intensity of polarized light that has passed through the polarizer, I_0 is the intensity of polarized light before the polarizer, and $\\theta$ is the angle between the polarized light and the polarizer. Unpolarized light passes through a polarizer. It then passes through another polarizer at angle 30 degree to the first, and then another at angle 50 degree to the second. What percentage of the original intensity was the light coming out of the third polarizer?",
    "prediction": 1.1307633602642189,
    "answer": 31.0,
    "rationale": "def solve():\n    import math\n\n    # Angle between first and second polarizer\n    theta1 = 30\n\n    # Angle between second and third polarizer\n    theta2 = 50\n\n    # Angle between first and third polarizer\n    theta3 = theta1 + theta2\n\n    # Convert angles to radians\n    theta1_rad = math.radians(theta1)\n    theta2_rad = math.radians(theta2)\n    theta3_rad = math.radians(theta3)\n\n    # Calculate the intensity after each polarizer\n    I0 = 1  # Assuming initial intensity is 1\n    I1 = 0.5 * I0  # Intensity after first polarizer (unpolarized light becomes polarized)\n    I2 = I1 * math.cos(theta1_rad)**2  # Intensity after second polarizer\n    I3 = I2 * math.cos(theta3_rad)**2  # Intensity after third polarizer\n\n    # Calculate the percentage of the original intensity\n    percentage = (I3 / I0) * 100\n\n    return percentage",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "panlu/angular_frequency3.json",
    "question": "The shock absorbers in an old car with mass 1000 kg are completely worn out. When a 980-N person climbs slowly into the car at its center of gravity, the car sinks 2.8 cm. The car (with the person aboard) hits a bump, and the car starts oscillating up and down in SHM. Model the car and person as a single body on a single spring, and find the frequency of the oscillation. (Unit: Hz)",
    "prediction": 0.8977965561564868,
    "answer": 0.9,
    "rationale": "def solve():\n  import math\n\n  # Given values\n  mass_car = 1000  # kg\n  mass_person = 980 / 9.81  # kg (converting weight to mass)\n  total_mass = mass_car + mass_person  # kg\n  displacement = 0.028  # m (converting cm to m)\n\n  # Calculate the spring constant (k) using Hooke's Law: F = k * x\n  force = 980  # N (weight of the person)\n  spring_constant = force / displacement  # N/m\n\n  # Calculate the angular frequency (\u03c9) using the formula: \u03c9 = sqrt(k/m)\n  angular_frequency = math.sqrt(spring_constant / total_mass)  # rad/s\n\n  # Calculate the frequency (f) using the formula: f = \u03c9 / (2 * \u03c0)\n  frequency = angular_frequency / (2 * math.pi)  # Hz\n\n  return frequency",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "jianyu_xu/Cayley_6.json",
    "question": "How many trees are there on 5 unlabeled vertices?",
    "prediction": 3,
    "answer": 3,
    "rationale": "def solve():\n    # Number of trees on n unlabeled vertices is given by the nth term of the sequence A000055\n    # A000055 = 1, 1, 1, 2, 3, 6, 11, 23, 47, 106, ...\n    # The 5th term of the sequence is the answer\n    sequence = [1, 1, 1, 2, 3]\n    ans = sequence[4]\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "xueguangma/effective_rates_1.json",
    "question": "What is the effective rates (between 0 and 1) for 18% compounded quarterly? Return the numeric value.",
    "prediction": 0.1925186006249997,
    "answer": 0.1925,
    "rationale": "def solve():\n  nominal_rate = 0.18\n  compounding_periods = 4\n  effective_rate = (1 + nominal_rate / compounding_periods) ** compounding_periods - 1\n  return effective_rate",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "jianyu_xu/integer_programming_1.json",
    "question": "30 students from 5 classes solved 40 math problems. Each student must answer at least one question. Every two students in the same class solved the same number of questions. The number of questions answered by any two students in different classes is also different. Question: What's maximum possible number of students who only answered one question?",
    "prediction": 12,
    "answer": 26,
    "rationale": "Let's denote the number of questions solved by students in each class as a, b, c, d, and e, where a < b < c < d < e. Since each student must answer at least one question, we have a = 1. Also, the total number of questions solved is 40, so we have:\n\n6a + 6b + 6c + 6d + 6e = 40\n\nSimplifying the equation, we get:\n\na + b + c + d + e = 40/6 \u2248 6.67\n\nSince a, b, c, d, and e are integers, we can round up the value of 6.67 to 7. So, we have:\n\na + b + c + d + e = 7\n\nNow, we need to find the maximum possible number of students who only answered one question. Since a = 1, we have 6 students from the first class who answered only one question. To maximize the number of students who answered only one question, we need to minimize the values of b, c, d, and e. The smallest possible values for b, c, d, and e are 2, 3, 4, and 5, respectively. In this case, we have:\n\n1 + 2 + 3 + 4 + 5 = 15\n\nHowever, this sum is greater than 7, so we need to adjust the values of b, c, d, and e. We can set b = 1, c = 2, d = 2, and e = 3. In this case, we have:\n\n1 + 1 + 2 + 2 + 3 = 9\n\nThis sum is still greater than 7, so we need to adjust the values again. We can set b = 1, c = 1, d = 2, and e = 2. In this case, we have:\n\n1 + 1 + 1 + 2 + 2 = 7\n\nNow the sum is equal to 7, which is the desired value. In this case, there are 6 students from the first class and 6 students from the second class who answered only one question. Therefore, the answer is 12.",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "xueguangma/forward_price_3.json",
    "question": "The current price of gold is $412 per ounce. The storage cost is $2 per ounce per year, payable quaterly in advance. Assuming a constant intrest rate of 9% compounded quarterly, what is the theoretial forward price of gold for delivery in 9 months?",
    "prediction": 441.00830856456855,
    "answer": 442.02,
    "rationale": "def solve():\n  current_price = 412\n  storage_cost_per_ounce_per_year = 2\n  interest_rate = 0.09\n  delivery_time_in_months = 9\n\n  # Convert delivery time to quarters\n  delivery_time_in_quarters = delivery_time_in_months / 3\n\n  # Calculate the quarterly interest rate\n  quarterly_interest_rate = (1 + interest_rate) ** (1/4) - 1\n\n  # Calculate the quarterly storage cost\n  quarterly_storage_cost = storage_cost_per_ounce_per_year / 4\n\n  # Calculate the forward price\n  forward_price = current_price * (1 + quarterly_interest_rate) ** delivery_time_in_quarters + quarterly_storage_cost * delivery_time_in_quarters\n\n  return forward_price",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/bayes-rule2.json",
    "question": "Let X_1, X_2 , X_3 be independent random variables taking values in the positive integers and having mass functions given by P(X_i=x)=(1-p_i)*p_i^{x-1} for x=1,2,... and i=1,2,3. Suppose p_1=1/2,p_2=1/4,p_3=1/8, what is the probability of X_1<X_2<X_3 (i.e. P(X_1<X_2<X_3))?",
    "prediction": 0,
    "answer": 0.00153609831,
    "rationale": "def solve():\n    p1 = 1/2\n    p2 = 1/4\n    p3 = 1/8\n\n    ans = 0\n    for x1 in range(1, 1000):\n        for x2 in range(x1 + 1, 1000):\n            for x3 in range(x2 + 1, 1000):\n                ans += (1 - p1) * (p1 ** (x1 - 1)) * (1 - p2) * (p2 ** (x2 - 1)) * (1 - p3) * (p3 ** (x3 - 1))\n\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/quantum4.json",
    "question": "Calculate the minimum kinetic energy of an electron that is localized within a typical nuclear radius of 6 x 10^-15 m in MeV.",
    "prediction": 3.2755002473465777e-32,
    "answer": 15.9,
    "rationale": "def solve():\n    import math\n\n    # Constants\n    h_bar = 6.582119569e-22  # Reduced Planck constant in MeV*s\n    m_e = 0.5109989461  # Electron mass in MeV/c^2\n    c = 2.99792458e8  # Speed of light in m/s\n    delta_x = 6e-15  # Nuclear radius in m\n\n    # Heisenberg Uncertainty Principle: delta_p * delta_x >= h_bar / 2\n    delta_p = h_bar / (2 * delta_x)\n\n    # Kinetic energy: KE = p^2 / (2 * m_e)\n    min_ke = (delta_p ** 2) / (2 * m_e * (c ** 2))\n\n    return min_ke",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/atom4.json",
    "question": "Given that the spacing between vibrational energy levels of the HCl molecule is 0.36 eV, calculate the effective force constant in N/m.",
    "prediction": 484.29634137630336,
    "answer": 490.0,
    "rationale": "def solve():\n  import math\n\n  # Constants\n  h = 6.626e-34  # Planck's constant in J.s\n  c = 3.0e8      # Speed of light in m/s\n  eV_to_J = 1.6e-19  # Conversion factor from eV to J\n\n  # Given\n  spacing_eV = 0.36  # Spacing between vibrational energy levels in eV\n\n  # Convert spacing to J\n  spacing_J = spacing_eV * eV_to_J\n\n  # Calculate the vibrational frequency (v) in Hz\n  v = spacing_J / h\n\n  # Calculate the reduced mass (mu) of HCl\n  m_H = 1.67e-27  # Mass of hydrogen in kg\n  m_Cl = 5.81e-26  # Mass of chlorine in kg\n  mu = (m_H * m_Cl) / (m_H + m_Cl)\n\n  # Calculate the effective force constant (k) in N/m\n  k = (4 * math.pi**2 * mu * v**2)\n\n  return k",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/determinant2.json",
    "question": "For matrix A = [[2, 4, 3], [3, 3, 1], [42, 20, 51]], what is its determinant?",
    "prediction": -376,
    "answer": -376,
    "rationale": "def solve():\n  import numpy as np\n\n  A = np.array([[2, 4, 3], [3, 3, 1], [42, 20, 51]])\n  ans = np.linalg.det(A)\n  return round(ans)",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "maxku/cv-videoprocessing3-motion-vector.json",
    "question": "Fig 1(a) and 1(b) show the situation of a reference frame and a current block for block matching motion estimation. The size of searching window is 14x2 while the block size is 2x2. The numbers within the squares are the pixel values. Determine the optimum motion vector.",
    "prediction": 72.991,
    "answer": [
      -4,
      0
    ],
    "rationale": "",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "xinyi/rate_distortion_function_2.json",
    "question": "Let $R(D)$ be the rate distortion function for an i.i.d. process with probability mass function $p(x)$ and distortion function $d(x, \\hat{x})$ , $x \\in \\mathcal{X}$ , $\\hat{x} \\in \\hat{\\mathcal{X}}$. If we add a new reproduction symbol $\\hat{x}_0$ to $\\hat{\\mathcal{X}}$ with associated distortion $d(x, \\hat{x}_0)$, $x \\in \\mathcal{X}$, $R(D)$ will decrease. True or False?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "mingyin/complete-metric-space1.json",
    "question": "Let P[0,1] denotes all the polynomials on the interval [0,1]. Define the distance \\rho(p, q)=\\int_0^1|p(x)-q(x)| dx. Is (P[0,1],\\rho) a complete space? Return 1 for yes and 0 for no.",
    "prediction": 0,
    "answer": 0.0,
    "rationale": "def solve():\n    # In a complete space, every Cauchy sequence converges to a limit within the space.\n    # However, in the space of polynomials P[0, 1], there exist Cauchy sequences that do not converge to a polynomial.\n    # For example, consider the sequence of polynomials p_n(x) = x^n. This sequence converges pointwise to a function\n    # that is not a polynomial (it converges to 0 for x in [0, 1) and to 1 for x = 1).\n    # Therefore, (P[0, 1], rho) is not a complete space.\n    return 0",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "panlu/center_of_gravity2.json",
    "question": "An auto magazine reports that a certain sports car has 53% of its weight on the front wheels and 47% on its rear wheels. (That is, the total normal forces on the front and rear wheels are 0.53w and 0.47w, respectively, where w is the car\u2019s weight.) The distance between the axles is 2.46 m. How far in front of the rear axle is the car\u2019s center of gravity?",
    "prediction": 1.3038,
    "answer": 1.3,
    "rationale": "def solve():\n  # Given data\n  weight_on_front_wheels = 0.53\n  weight_on_rear_wheels = 0.47\n  distance_between_axles = 2.46\n\n  # Calculate the distance of the center of gravity from the rear axle\n  distance_from_rear_axle = (weight_on_front_wheels * distance_between_axles) / (weight_on_front_wheels + weight_on_rear_wheels)\n\n  return distance_from_rear_axle",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "jianyu_xu/Binomial_2.json",
    "question": "How many different 6-letter arrangements can be made from the letters in the word BANANA?",
    "prediction": 60,
    "answer": 60,
    "rationale": "def solve():\n    import math\n    # The word BANANA has 6 letters, with 3 A's, 2 N's, and 1 B.\n    # We can use the formula for permutations with repetitions:\n    # P(n; n1, n2, ..., nk) = n! / (n1! * n2! * ... * nk!)\n    # where n is the total number of items, and n1, n2, ..., nk are the number of repetitions of each item.\n    n = 6\n    n_A = 3\n    n_N = 2\n    n_B = 1\n\n    ans = math.factorial(n) / (math.factorial(n_A) * math.factorial(n_N) * math.factorial(n_B))\n    return int(ans)",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "panlu/kepler\u2019s_third_law1.json",
    "question": "The asteroid Pallas has an orbital period of 4.62 years and an orbital eccentricity of 0.233. Find the semi-major axis of its orbit. (Unit: 10^11 m)",
    "prediction": 414979118571.4522,
    "answer": 4.15,
    "rationale": "def solve():\n  T = 4.62\n  AU_to_meters = 1.496e11\n\n  a = (T**2)**(1/3)\n  a_meters = a * AU_to_meters\n\n  return a_meters",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "jianyu_xu/Stirling_number_first_kind_2.json",
    "question": "In how many ways can 6 people be seated at 2 identical round tables? Each table must have at least 1 person seated.",
    "prediction": 20,
    "answer": 225,
    "rationale": "def solve():\n    from math import factorial\n\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # There are 6 people, so we can divide them into groups of 1 and 5, 2 and 4, or 3 and 3.\n    # We will use combinations to calculate the number of ways to seat the people at the tables.\n    ans = nCr(6, 1) * nCr(5, 5) + nCr(6, 2) * nCr(4, 4) + nCr(6, 3) * nCr(3, 3)\n\n    # Since the tables are identical, we need to divide the answer by 2 to avoid overcounting.\n    ans //= 2\n\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/trapezoidal_rule2.json",
    "question": "A function f(x) is given by f(0)=3, f(2)=7, f(4)=11, f(6)=9, f(8)=3. Approximate the area under the curve y=f(x) between x=0 and x=8 using Trapezoidal rule with n=4 subintervals.",
    "prediction": 60.0,
    "answer": 60.0,
    "rationale": "def solve():\n    # Import necessary libraries\n    import numpy as np\n\n    # Define the function f(x)\n    def f(x):\n        if x == 0:\n            return 3\n        elif x == 2:\n            return 7\n        elif x == 4:\n            return 11\n        elif x == 6:\n            return 9\n        elif x == 8:\n            return 3\n\n    # Define the Trapezoidal rule function\n    def trapezoidal_rule(a, b, n):\n        h = (b - a) / n\n        x = np.linspace(a, b, n + 1)\n        y = np.vectorize(f)(x)\n        return h * (0.5 * y[0] + np.sum(y[1:-1]) + 0.5 * y[-1])\n\n    # Calculate the area under the curve using Trapezoidal rule\n    ans = trapezoidal_rule(0, 8, 4)\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/semiconductor1.json",
    "question": "A pure lead bar 10 cm long is maintained with one end at T &=300 K and the other at 310 K. The thermoelectric potential difference thus induced across the ends is 12.8 micro-volts. Find the thermoelectric power for lead in this temperature range in V/K. (Note: Q varies nonlinearly with temperature, but over this narrow temperature range, you may use a linear approximation.)",
    "prediction": 1.28e-06,
    "answer": 1.28e-06,
    "rationale": "def solve():\n  # Given values\n  delta_T = 310 - 300  # Temperature difference in K\n  V = 12.8 * 10**(-6)  # Potential difference in V\n\n  # Calculate the thermoelectric power for lead\n  thermoelectric_power = V / delta_T  # in V/K\n\n  return thermoelectric_power",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/series4.json",
    "question": "For any poitie integer $n$, let $\\langle n\\rangle$ denote the closest integer to $\\sqrt{n}$. Evaluate $\\sum_{n=1}^{\\infty} \\frac{2^{\\langle n \\rangle}+2^{-\\langle n \\rangle}}{2^n}$.",
    "prediction": 2.9999999701758497,
    "answer": 3.0,
    "rationale": "def solve():\n    import math\n\n    def closest_integer(n):\n        return round(math.sqrt(n))\n\n    ans = 0\n    n = 1\n    prev_term = 0\n    epsilon = 1e-10\n\n    while True:\n        term = (2 ** closest_integer(n) + 2 ** (-closest_integer(n))) / (2 ** n)\n        ans += term\n        if abs(term - prev_term) < epsilon:\n            break\n        prev_term = term\n        n += 1\n\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/kinetics4.json",
    "question": "A 'fishbowl' of height 4r/3 is formed by removing the top third of a sphere of radius r=6. The fishbowl is fixed in sand so that its rim is parallel with the ground. A small marble of mass m rests at the bottom of the fishbowl. Assuming all surfaces are frictionless and ignoring air resistance, find the maximum initial velocity that could be given to the marble for it to land back in the fishbowl with g=9.8.",
    "prediction": 10.224154406763102,
    "answer": 18.25,
    "rationale": "def solve():\n    import math\n\n    r = 6\n    g = 9.8\n    h = (4 * r) / 3\n\n    # Calculate the angle at which the marble will leave the fishbowl\n    theta = math.acos(1 / 3)\n\n    # Calculate the maximum initial velocity\n    v_max = math.sqrt(2 * g * h * (1 - math.cos(theta)))\n\n    return v_max",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/signalprocessing12-nyquist.json",
    "question": "Consider $x(t)$ to be given as, $$ x(t)=\\cos (1000 \\pi t) $$ . Let the sampling frequency be $700 \\mathrm{~Hz}$. Does aliasing occur?",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if aliasing occurs, we need to compare the sampling frequency with the Nyquist frequency. The Nyquist frequency is half of the sampling frequency. In this case, the sampling frequency is 700 Hz, so the Nyquist frequency is 350 Hz.\n\nNow, let's find the frequency of the given signal x(t) = cos(1000\u03c0t). The general form of a cosine function is cos(2\u03c0ft), where f is the frequency. Comparing this with the given function, we have 2\u03c0f = 1000\u03c0, which gives us f = 500 Hz.\n\nSince the frequency of the signal (500 Hz) is greater than the Nyquist frequency (350 Hz), aliasing will occur.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "maxku/ipnetwork11a-tcp.json",
    "question": "Consider a file with a size of 350 Kbytes storing in a web server. Client A sends a request to the server to retrieve the file from a remote location. It is known that the link capacity between client A and the server is 10 Mbps and the round trip time (RTT) between the server and client is fixed at 20ms. Assume that the segment size is 20 Kbytes and the client has a receiver buffer of 200Kbytes. Assume that the window size (W) is fixed at 2. How long (in ms) does client A take to receive the whole file from the server after sending a request?",
    "prediction": 448.4375,
    "answer": 352,
    "rationale": "def solve():\n  file_size = 350 * 1024 * 8  # Convert file size to bits\n  link_capacity = 10 * 1024 * 1024  # Convert link capacity to bits per second\n  rtt = 20  # Round trip time in ms\n  segment_size = 20 * 1024 * 8  # Convert segment size to bits\n  window_size = 2\n\n  # Calculate the time to send one window of data\n  time_per_window = (window_size * segment_size) / link_capacity * 1000  # Convert to ms\n\n  # Calculate the number of windows needed to send the whole file\n  num_windows = file_size / (window_size * segment_size)\n\n  # Calculate the total time to send the whole file\n  total_time = num_windows * (time_per_window + rtt)\n\n  return total_time",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/baire-category-theorem1.json",
    "question": "The open mapping theorem can be proved by (a) Baire category theorem; (b) Cauchy integral theorem; (c) random graph theorem; (d) None of the above. Which option is correct?",
    "prediction": "(a)",
    "answer": "(a)",
    "rationale": "Therefore, the answer is (a).",
    "answer_type": "option",
    "correct": true
  },
  {
    "id": "panlu/angular_frequency1.json",
    "question": "An ultrasonic transducer used for medical diagnosis oscillates at 6.7 Mhz.How long does each oscillation take, and what is the angular frequency? (Unit: 10^7 rad/s)",
    "prediction": [
      1.4925373134328358e-07,
      4.209734155810323
    ],
    "answer": 4.2,
    "rationale": "def solve():\n    frequency = 6.7 * 10**6  # 6.7 MHz in Hz\n    time_per_oscillation = 1 / frequency  # Time for each oscillation in seconds\n\n    angular_frequency = 2 * 3.141592653589793 * frequency  # Angular frequency in rad/s\n    angular_frequency = angular_frequency / 10**7  # Convert to 10^7 rad/s\n\n    return [time_per_oscillation, angular_frequency]",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/bayes-rule1.json",
    "question": "A court is investigating the possible occurrence of an unlikely event T. The reliability of two independent witnesses called Alf and Bob is known to the court: Alf tells the truth with probability \\alpha and Bob with probability \\beta, and there is no collusion between the two of them. Let A and B be the events that Alf and Bob assert (respectively) that T occurred, and let \\tau=P(T). What is the probability that T occurred given that both Alf and Bob declare that T occurred? Suppose \\alpha=\\beta=9/10 and \\tau=1/1000. Return the answer up to the thousands decimal.",
    "prediction": 0.075,
    "answer": 0.075,
    "rationale": "def solve():\n    alpha = 9/10\n    beta = 9/10\n    tau = 1/1000\n\n    # Using Bayes' theorem\n    P_T_given_A_and_B = (alpha * beta * tau) / ((alpha * beta * tau) + (1 - alpha) * (1 - beta) * (1 - tau))\n\n    return round(P_T_given_A_and_B, 3)",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/amortization.json",
    "question": "A debt of $25,000 is to be amortized over 7 years at 7% interest. What value of monthly payments will achieve this?",
    "prediction": 377.32,
    "answer": 4638.83,
    "rationale": "def solve():\n  principal = 25000\n  annual_interest_rate = 0.07\n  years = 7\n  months = years * 12\n\n  # Convert annual interest rate to monthly interest rate\n  monthly_interest_rate = annual_interest_rate / 12\n\n  # Calculate the monthly payment using the amortization formula\n  numerator = principal * monthly_interest_rate * (1 + monthly_interest_rate)**months\n  denominator = (1 + monthly_interest_rate)**months - 1\n  monthly_payment = numerator / denominator\n\n  return round(monthly_payment, 2)",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "panlu/gravitational_force1.json",
    "question": "The mass of one of the small spheres of a Cavendish balance is 0.0100 kg, the mass of the nearest large sphere is 0.500 kg, and the center-to-center distance between them is 0.0500 m. Assuming the gravitational force on each sphere due to the other is $X * 10^{-10}$ N, what is X?",
    "prediction": 1.3348599999999995,
    "answer": 1.33,
    "rationale": "def solve():\n  import math\n\n  # Constants\n  G = 6.67430 * (10 ** -11)  # Gravitational constant, m^3 kg^-1 s^-2\n  m1 = 0.0100  # Mass of small sphere, kg\n  m2 = 0.500  # Mass of large sphere, kg\n  r = 0.0500  # Center-to-center distance, m\n\n  # Calculate gravitational force\n  F = G * (m1 * m2) / (r ** 2)\n\n  # Convert force to X * 10^-10 N\n  X = F / (10 ** -10)\n\n  return X",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "elainewan/math_abstact_algebra_7_7.json",
    "question": "The function f: U_5 \to U_5 given by f(x) = x^2 is a homomorphism. What is K_f?",
    "prediction": [
      0,
      1
    ],
    "answer": [
      4,
      1
    ],
    "rationale": "def solve():\n    def f(x):\n        return x**2\n\n    U_5 = [0, 1, 2, 3, 4]\n    K_f = []\n\n    for x in U_5:\n        if f(x) == x:\n            K_f.append(x)\n\n    return K_f",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "wenhuchen/cauchy_integral3.json",
    "question": "Compute the real integral $I=\\int_{-\\infty}^{\\infty} 1/(x^2 + 1)^2 dx$.",
    "prediction": 1.5707963267948966,
    "answer": 1.57,
    "rationale": "def solve():\n    import scipy.integrate as spi\n\n    def integrand(x):\n        return 1 / (x**2 + 1)**2\n\n    ans, _ = spi.quad(integrand, -float('inf'), float('inf'))\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "maxku/fourier2-FT.json",
    "question": "Is the Fourier transform of the signal $x_1(t)=\\left\\{\\begin{array}{cc}\\sin \\omega_0 t, & -\\frac{2 \\pi}{\\omega_0} \\leq t \\leq \\frac{2 \\pi}{\\omega_0} \\\\ 0, & \\text { otherwise }\\end{array}\\right.$ imaginary?",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if the Fourier transform of the given signal is imaginary, we need to compute the Fourier transform of x1(t). The Fourier transform of a continuous-time signal x(t) is given by:\n\n$X(\\omega) = \\int_{-\\infty}^{\\infty} x(t) e^{-j\\omega t} dt$\n\nFor the given signal x1(t), we have:\n\n$x_1(t) = \\sin(\\omega_0 t)$ for $-\\frac{2\\pi}{\\omega_0} \\leq t \\leq \\frac{2\\pi}{\\omega_0}$ and $x_1(t) = 0$ otherwise.\n\nSo, the Fourier transform of x1(t) is:\n\n$X_1(\\omega) = \\int_{-\\frac{2\\pi}{\\omega_0}}^{\\frac{2\\pi}{\\omega_0}} \\sin(\\omega_0 t) e^{-j\\omega t} dt$\n\nNow, we can use integration by parts to solve this integral. Let $u = \\sin(\\omega_0 t)$ and $dv = e^{-j\\omega t} dt$. Then, $du = \\omega_0 \\cos(\\omega_0 t) dt$ and $v = -\\frac{1}{j\\omega} e^{-j\\omega t}$.\n\nUsing integration by parts, we get:\n\n$X_1(\\omega) = -\\frac{1}{j\\omega} \\int_{-\\frac{2\\pi}{\\omega_0}}^{\\frac{2\\pi}{\\omega_0}} \\sin(\\omega_0 t) d(e^{-j\\omega t}) - \\frac{\\omega_0}{j\\omega} \\int_{-\\frac{2\\pi}{\\omega_0}}^{\\frac{2\\pi}{\\omega_0}} \\cos(\\omega_0 t) e^{-j\\omega t} dt$\n\n$X_1(\\omega) = -\\frac{1}{j\\omega} [\\sin(\\omega_0 t) e^{-j\\omega t}]_{-\\frac{2\\pi}{\\omega_0}}^{\\frac{2\\pi}{\\omega_0}} - \\frac{\\omega_0}{j\\omega} \\int_{-\\frac{2\\pi}{\\omega_0}}^{\\frac{2\\pi}{\\omega_0}} \\cos(\\omega_0 t) e^{-j\\omega t} dt$\n\nNow, we can see that the first term is purely imaginary, as it involves sine and exponential functions with imaginary arguments. For the second term, we can use integration by parts again. Let $u = \\cos(\\omega_0 t)$ and $dv = e^{-j\\omega t} dt$. Then, $du = -\\omega_0 \\sin(\\omega_0 t) dt$ and $v = -\\frac{1}{j\\omega} e^{-j\\omega t}$.\n\nUsing integration by parts, we get:\n\n$X_1(\\omega) = -\\frac{1}{j\\omega} [\\sin(\\omega_0 t) e^{-j\\omega t}]_{-\\frac{2\\pi}{\\omega_0}}^{\\frac{2\\pi}{\\omega_0}} + \\frac{\\omega_0^2}{\\omega^2} \\int_{-\\frac{2\\pi}{\\omega_0}}^{\\frac{2\\pi}{\\omega_0}} \\sin(\\omega_0 t) e^{-j\\omega t} dt$\n\nNow, we can see that the second term is also purely imaginary, as it involves sine and exponential functions with imaginary arguments.\n\nSince both terms in the expression for $X_1(\\omega)$ are purely imaginary, the Fourier transform of the signal x1(t) is indeed imaginary.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "xinyi/channel_capacity_4.json",
    "question": "Consider the discrete memoryless channel $Y=XZ$ where $X$ and $Z$ are independent binary random variables that take on values 0 and 1. Let $P(Z=1)=0.5$. Find the capacity of this channel in bits.",
    "prediction": 0,
    "answer": 0.322,
    "rationale": "def solve():\n  import numpy as np\n\n  # Probability of Z=1\n  p_z1 = 0.5\n\n  # Probability of Z=0\n  p_z0 = 1 - p_z1\n\n  # Probability of X=0 and X=1\n  p_x0 = 0.5\n  p_x1 = 0.5\n\n  # Joint probability distribution\n  p_xz = np.array([[p_x0 * p_z0, p_x0 * p_z1],\n                   [p_x1 * p_z0, p_x1 * p_z1]])\n\n  # Channel transition probability matrix\n  p_y_x = np.array([[1, 0],\n                    [0, 1]])\n\n  # Channel capacity calculation\n  capacity = 0\n  for i in range(2):\n    for j in range(2):\n      if p_xz[i, j] > 0:\n        capacity += p_xz[i, j] * np.log2(p_y_x[i, j] / np.sum(p_xz[:, j]))\n\n  return capacity",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/integral-theorem1.json",
    "question": "As shown in ./mingyin/integral1.png line $y=c$, $x=0$, and parabola $y=2x-3x^3$ splits the plane into the two shaded regions. Suppose two regions have the same areas. What is the value $c$?",
    "prediction": 0,
    "answer": 0.444444,
    "rationale": "def solve():\n    from scipy.integrate import quad\n    import numpy as np\n\n    # Define the parabola function\n    def parabola(x):\n        return 2 * x - 3 * x ** 3\n\n    # Define the function to find the area difference between the two regions\n    def area_difference(c):\n        # Integrate the parabola function from 0 to c\n        area1, _ = quad(parabola, 0, c)\n\n        # Integrate the parabola function from c to 1\n        area2, _ = quad(parabola, c, 1)\n\n        return abs(area1 - area2)\n\n    # Find the value of c that minimizes the area difference\n    c = np.linspace(0, 1, 1000)\n    min_diff = float('inf')\n    best_c = 0\n\n    for value in c:\n        diff = area_difference(value)\n        if diff < min_diff:\n            min_diff = diff\n            best_c = value\n\n    return best_c",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xueguangma/earnings_multiplier_1.json",
    "question": "Estimate the PE ratio for a firm that has the following characteristics:\nLength of high growth = five years\nGrowth rate in first five years = 25%\nPayout ratio in first five years = 20%\nGrowth rate after five years = 8%\nPayout ratio after five years = 50%\nBeta = 1.0 \nRisk-free rate = T-bond rate = 6%\nCost of equity = 6% + 1(5.5%) = 11.5%\nRisk premium = 5.5%\nWhat is the estimated PE ratio for this firm?",
    "prediction": 1.348381159936676,
    "answer": 28.75,
    "rationale": "def solve():\n    # Given values\n    length_of_high_growth = 5\n    growth_rate_first_five_years = 0.25\n    payout_ratio_first_five_years = 0.20\n    growth_rate_after_five_years = 0.08\n    payout_ratio_after_five_years = 0.50\n    beta = 1.0\n    risk_free_rate = 0.06\n    cost_of_equity = 0.115\n    risk_premium = 0.055\n\n    # Calculate the present value of dividends during the high growth period\n    dividend_growth_rate = growth_rate_first_five_years * payout_ratio_first_five_years\n    present_value_dividends_high_growth = dividend_growth_rate / (cost_of_equity - dividend_growth_rate)\n\n    # Calculate the present value of dividends during the stable growth period\n    dividend_growth_rate_stable = growth_rate_after_five_years * payout_ratio_after_five_years\n    present_value_dividends_stable = dividend_growth_rate_stable / (cost_of_equity - dividend_growth_rate_stable)\n\n    # Calculate the present value of dividends at the end of the high growth period\n    present_value_dividends_end_high_growth = present_value_dividends_stable / (1 + cost_of_equity) ** length_of_high_growth\n\n    # Calculate the PE ratio\n    pe_ratio = (present_value_dividends_high_growth + present_value_dividends_end_high_growth) / (1 - payout_ratio_first_five_years)\n\n    return pe_ratio",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/Wallis-theorem2.json",
    "question": "what is the value of $2/\\pi*\\prod_{k=1}^{\\infty} \\frac{(2*k)^2}{(2*k-1)(2*k+1)}$?",
    "prediction": 0.999995000062505,
    "answer": 1.0,
    "rationale": "def solve():\n    import math\n\n    def product_term(k):\n        return (2 * k) ** 2 / ((2 * k - 1) * (2 * k + 1))\n\n    def infinite_product(tol=1e-10):\n        k = 1\n        product = 1\n        while True:\n            term = product_term(k)\n            if term - 1 < tol:\n                break\n            product *= term\n            k += 1\n        return product\n\n    ans = 2 / math.pi * infinite_product()\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "maxku/basic-electronics-3-1.json",
    "question": "In the figure, at what rate is thermal energy being generated in the 2R-resistor when $V_s = 12V$ and $R = 3.0\\Omega$? Answer in unit of W.",
    "prediction": 3.84,
    "answer": 6,
    "rationale": "def solve():\n  Vs = 12  # Voltage source in Volts\n  R = 3.0  # Resistance in Ohms\n\n  # In the given problem, we have a 2R resistor in parallel with a R resistor.\n  # The equivalent resistance of the parallel resistors can be calculated as:\n  Req_parallel = (R * (2 * R)) / (R + (2 * R))\n\n  # Now, we can find the current flowing through the equivalent resistance using Ohm's law:\n  I = Vs / (R + Req_parallel)\n\n  # Next, we can find the voltage across the 2R resistor:\n  V_2R = I * Req_parallel\n\n  # Finally, we can find the rate of thermal energy generation in the 2R resistor using the formula P = V^2 / R:\n  P_2R = (V_2R ** 2) / (2 * R)\n\n  return P_2R",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/Limit-of-sequence6.json",
    "question": "Evaluate $\\lim _{x \\rightarrow 1^{-}} \\prod_{n=0}^{\\infty}(\\frac{1+x^{n+1}}{1+x^n})^{x^n}$?",
    "prediction": 0.9999994999999999,
    "answer": 0.73575888,
    "rationale": "def solve():\n    import numpy as np\n\n    def f(x, n):\n        return (1 + x**(n+1)) / (1 + x**n)\n\n    def limit(x, tol=1e-6, max_iter=1000):\n        ans = 1\n        n = 0\n        while True:\n            term = f(x, n)**(x**n)\n            ans *= term\n            if abs(term - 1) < tol or n >= max_iter:\n                break\n            n += 1\n        return ans\n\n    x = 1 - 1e-6\n    ans = limit(x)\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/Birg_vieta1.json",
    "question": "Use the Birge-Vieta method to find a real root correct to three decimals of the following equation: x^3 - 11x^2 + 32x - 22 = 0, p = 0.5",
    "prediction": 4.579,
    "answer": 1,
    "rationale": "def solve():\n    def birge_vieta(p, iterations):\n        for _ in range(iterations):\n            b1 = 1\n            b2 = -11 + p * b1\n            b3 = 32 + p * b2\n            c1 = b1\n            c2 = b2 + p * c1\n            p = p - b3 / c2\n        return round(p, 3)\n\n    p = 0.5\n    iterations = 10\n    ans = birge_vieta(p, iterations)\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/Fundamental-Theorem-of-Calculus3.json",
    "question": "what is the value of \\int_a^b \\frac{dx}{\\sqrt{(x-a)(b-x)}}? Round the answer to the thousands decimal.",
    "prediction": 0,
    "answer": 3.1415926,
    "rationale": "def solve(a, b):\n    from scipy.integrate import quad\n    import numpy as np\n\n    def integrand(x, a, b):\n        return 1 / np.sqrt((x - a) * (b - x))\n\n    ans, _ = quad(integrand, a, b, args=(a, b))\n    return round(ans, 3)",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/binomial.json",
    "question": "What is the coefficient of $x^2y^5$ for the formula $(x + 2y)^7$?",
    "prediction": 672,
    "answer": 672,
    "rationale": "def solve():\n    from math import comb\n\n    # The formula is (x + 2y)^7\n    # We need to find the coefficient of x^2y^5\n    # Using binomial theorem, we can write the term as C(7, 2) * x^2 * (2y)^5\n    # The coefficient will be C(7, 2) * 2^5\n\n    coefficient = comb(7, 2) * (2 ** 5)\n    return coefficient",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "elainewan/math_calculus_2.json",
    "question": "What is \\lim_{x \to 9} ((x - 9)/(\\sqrt{x} - 3))?",
    "prediction": 6.0,
    "answer": 6,
    "rationale": "def solve():\n    import sympy as sp\n\n    x = sp.Symbol('x')\n    expr = (x - 9) / (sp.sqrt(x) - 3)\n    limit = sp.limit(expr, x, 9)\n\n    return float(limit)",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "mingyin/linear-dependence1.json",
    "question": "Finding all the real roots of the equation $\\sqrt{x^2+x+1}+\\sqrt{2 x^2+x+5}=\\sqrt{x^2-3 x+13}$. Return the answer as a list with ascending order.",
    "prediction": [
      -1.7807764064044151,
      0.28077640640441515
    ],
    "answer": [
      -1.7807764064,
      0.2807764064
    ],
    "rationale": "def solve():\n    import sympy as sp\n\n    x = sp.Symbol('x')\n    equation = sp.sqrt(x**2 + x + 1) + sp.sqrt(2*x**2 + x + 5) - sp.sqrt(x**2 - 3*x + 13)\n    real_roots = [float(root) for root in sp.solve(equation, x) if root.is_real]\n\n    return sorted(real_roots)",
    "answer_type": "list of float",
    "correct": true
  },
  {
    "id": "wenhuchen/covariance1.json",
    "question": "Compute covariance of x=(1,2,3,4), y=(2,3,4,5)",
    "prediction": 1.6666666666666667,
    "answer": 1.67,
    "rationale": "def solve():\n    x = [1, 2, 3, 4]\n    y = [2, 3, 4, 5]\n\n    n = len(x)\n    mean_x = sum(x) / n\n    mean_y = sum(y) / n\n\n    covariance = sum((x[i] - mean_x) * (y[i] - mean_y) for i in range(n)) / (n - 1)\n\n    return covariance",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/maxplanar3.json",
    "question": "True of false: one can draw a simple connected planar graph with 200 vertices and 400 faces",
    "prediction": false,
    "answer": false,
    "rationale": "To determine if a simple connected planar graph with 200 vertices and 400 faces can be drawn, we can use Euler's formula for planar graphs:\n\nV - E + F = 2\n\nwhere V is the number of vertices, E is the number of edges, and F is the number of faces.\n\nIn this case, V = 200 and F = 400. We need to find the value of E.\n\nSubstituting the given values into Euler's formula:\n\n200 - E + 400 = 2\n\nSolving for E:\n\nE = 200 - 2 + 400\nE = 598\n\nNow, we need to check if this number of edges is possible for a simple connected planar graph with 200 vertices. In a simple graph, the maximum number of edges is given by the formula:\n\nE_max = V * (V - 1) / 2\n\nFor 200 vertices:\n\nE_max = 200 * (200 - 1) / 2\nE_max = 200 * 199 / 2\nE_max = 19900\n\nSince 598 is less than 19900, it is possible to have a simple connected planar graph with 200 vertices and 598 edges. However, we need to check if it satisfies the condition for planar graphs, which states that for a simple connected planar graph:\n\nE \u2264 3V - 6\n\nSubstituting the values:\n\n598 \u2264 3 * 200 - 6\n598 \u2264 600 - 6\n598 \u2264 594\n\nThe inequality is false, which means that it is not possible to draw a simple connected planar graph with 200 vertices and 400 faces.\n\nTherefore, the answer is False.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "mingyin/compact-operator-theorem1.json",
    "question": "Suppose H is a Banach space. Let A be a linear functional on the space H that maps H to H. Suppose operator A satisfies: for all $x\\in H$, $||Ax||\\geq a ||x||$ for some a>0. If A is not a compact operator on H, Is the dimension of H finite or infinite? Return 1 for finite dimension and 0 for infinite dimension",
    "prediction": 0,
    "answer": 0.0,
    "rationale": "def solve():\n    # Since A is a linear functional on the space H that maps H to H and satisfies ||Ax|| >= a ||x|| for some a > 0,\n    # A is a bounded linear operator with a bounded inverse.\n    # If A is not a compact operator on H, then H must have infinite dimension.\n    return 0",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xueguangma/intermediate_value_theorem.json",
    "question": "Does $p(x) = x^5 + x \u2212 1$ have any real roots?",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if the polynomial $p(x) = x^5 + x - 1$ has any real roots, we can use the Intermediate Value Theorem. The theorem states that if a continuous function has values of opposite signs at two points, then it must have at least one root between those two points.\n\nLet's evaluate the polynomial at two points, say $x = -1$ and $x = 0$:\n\n$p(-1) = (-1)^5 + (-1) - 1 = -1 - 1 - 1 = -3$\n\n$p(0) = (0)^5 + (0) - 1 = -1$\n\nSince the polynomial is continuous and has negative values at both $x = -1$ and $x = 0$, we need to find a positive value to apply the Intermediate Value Theorem. Let's try $x = 1$:\n\n$p(1) = (1)^5 + (1) - 1 = 1 + 1 - 1 = 1$\n\nNow we have a negative value at $x = 0$ and a positive value at $x = 1$. By the Intermediate Value Theorem, there must be at least one real root between $x = 0$ and $x = 1$.\n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "xinyi/Gaussian_channel.json",
    "question": "Consider an additive white Gaussian noise channel with an expected output power constraint $P=2$. Thus $Y = X + Z$, $Z \\sim N(0, 1)$, $Z$ is independent of $X$, and $E(Y)^2 \\leq 2$. Find the channel capacity in bits.",
    "prediction": [
      0.79248125
    ],
    "answer": 0.5,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.optimize import minimize\n\n    # Define the objective function to minimize\n    def objective_function(x):\n        return -0.5 * np.log2(1 + x)\n\n    # Define the constraint function\n    def constraint_function(x):\n        return 2 - x\n\n    # Define the constraint dictionary\n    constraint = {'type': 'ineq', 'fun': constraint_function}\n\n    # Set the initial guess\n    x0 = 1\n\n    # Perform the optimization\n    result = minimize(objective_function, x0, constraints=constraint)\n\n    # Get the channel capacity\n    channel_capacity = -result.fun\n\n    return channel_capacity",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/central-limit-theorem1.json",
    "question": "Let X_1, X_2,... be independent variables each taking values +1 or -1 with probabilities 1/2 and 1/2. It is know that $\\sqrt{3/n^3}*\\sum_{k=1}^n k*X_k$ converges in distribution normal distribution N(a,b) as n goes to infinity. Here a is the expectation and b is the variance. What are the values of a and b? Return the answers as a list. For example, if a=2, b=100, return [2,100].",
    "prediction": [
      0,
      0.5
    ],
    "answer": [
      0,
      1
    ],
    "rationale": "def solve():\n    # Since X_k takes values +1 or -1 with probabilities 1/2 and 1/2, the expectation E(X_k) = 0\n    # The variance Var(X_k) = E(X_k^2) - E(X_k)^2 = 1 - 0 = 1\n\n    # Now, let's find the expectation and variance of k*X_k\n    # E(k*X_k) = k*E(X_k) = k*0 = 0\n    # Var(k*X_k) = k^2 * Var(X_k) = k^2 * 1 = k^2\n\n    # Now, let's find the expectation and variance of the sum\n    # E(sum(k*X_k)) = sum(E(k*X_k)) = sum(0) = 0\n    # Var(sum(k*X_k)) = sum(Var(k*X_k)) = sum(k^2)\n\n    # Now, let's find the expectation and variance of the normalized sum\n    # E(sqrt(3/n^3) * sum(k*X_k)) = sqrt(3/n^3) * E(sum(k*X_k)) = 0\n    # Var(sqrt(3/n^3) * sum(k*X_k)) = (3/n^3) * Var(sum(k*X_k)) = (3/n^3) * sum(k^2)\n\n    # As n goes to infinity, the normalized sum converges to a normal distribution N(a, b)\n    # Therefore, a = 0 and b = lim(n->infinity) (3/n^3) * sum(k^2)\n\n    # We know that sum(k^2) = n*(n+1)*(2n+1)/6\n    # So, b = lim(n->infinity) (3/n^3) * (n*(n+1)*(2n+1)/6)\n    # After simplifying, we get b = 1/2\n\n    a = 0\n    b = 1/2\n\n    return [a, b]",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "mingyin/markov-chain3.json",
    "question": "Place the little house mouse into a maze for animal learning experiments, as shown in the figure ./mingyin/maze.png. In the seventh grid of the maze, there is a delicious food, while in the eighth grid, there is an electric shock mouse trap. Assuming that when the mouse is in a certain grid, there are k exits that it can leave from, it always randomly chooses one with a probability of 1/k. Also, assume that the mouse can only run to adjacent grids each time. Let the process $X_n$ denote the grid number where the mouse is located at time n.  Calculate the probability that the mouse can find food before being shocked if: the mouse start from 0, $X_0=0$;  the mouse start from 4, $X_0=4$? Return the two answers as a list.",
    "prediction": [
      0.9999999999999996,
      0.9999999999999997
    ],
    "answer": [
      0.5,
      0.66667
    ],
    "rationale": "def solve():\n    import numpy as np\n\n    # Transition matrix\n    P = np.array([\n        [0, 1, 0, 0, 0, 0, 0, 0, 0],\n        [1/2, 0, 1/2, 0, 0, 0, 0, 0, 0],\n        [0, 1/3, 0, 1/3, 0, 1/3, 0, 0, 0],\n        [0, 0, 1/2, 0, 1/2, 0, 0, 0, 0],\n        [0, 0, 0, 1/3, 0, 1/3, 0, 0, 1/3],\n        [0, 0, 1/4, 0, 1/4, 0, 1/4, 0, 1/4],\n        [0, 0, 0, 0, 0, 0, 1, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 1, 0],\n        [0, 0, 0, 0, 1/2, 1/2, 0, 0, 0]\n    ])\n\n    # Absorbing states\n    absorbing_states = [6, 7]\n\n    # Non-absorbing states\n    non_absorbing_states = [i for i in range(9) if i not in absorbing_states]\n\n    # Q matrix\n    Q = P[np.ix_(non_absorbing_states, non_absorbing_states)]\n\n    # Identity matrix\n    I = np.eye(len(non_absorbing_states))\n\n    # N matrix\n    N = np.linalg.inv(I - Q)\n\n    # R matrix\n    R = P[np.ix_(non_absorbing_states, absorbing_states)]\n\n    # B matrix\n    B = np.dot(N, R)\n\n    # Probabilities of reaching food (state 6) starting from state 0 and state 4\n    ans = [B[0, 0], B[4, 0]]\n\n    return ans",
    "answer_type": "list of float",
    "correct": false
  },
  {
    "id": "wenhuchen/Simpson's_rule1.json",
    "question": "Using n=6 approximate the value of $\\int_{-1}^2 \\sqrt{e^{-x^2} + 1} dx$ using the Simpson's rule.",
    "prediction": 3.7035814477099316,
    "answer": 3.70358145,
    "rationale": "def solve():\n    import math\n\n    def f(x):\n        return math.sqrt(math.exp(-x**2) + 1)\n\n    def simpsons_rule(a, b, n):\n        h = (b - a) / n\n        s = f(a) + f(b)\n\n        for i in range(1, n, 2):\n            s += 4 * f(a + i * h)\n        for i in range(2, n-1, 2):\n            s += 2 * f(a + i * h)\n\n        return s * h / 3\n\n    a = -1\n    b = 2\n    n = 6\n\n    ans = simpsons_rule(a, b, n)\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/kepler's_law3.json",
    "question": "The planet Mercury travels around the Sun with a mean orbital radius of 5.8x10^10 m. The mass of the Sun is 1.99x10^30 kg. Use Newton's version of Kepler's third law to determine how long it takes Mercury to orbit the Sun. Give your answer in Earth days.",
    "prediction": 88.14115073640791,
    "answer": 88.3,
    "rationale": "def solve():\n  import math\n\n  # Constants\n  G = 6.67430e-11  # Gravitational constant, m^3 kg^-1 s^-2\n  mean_orbital_radius = 5.8e10  # meters\n  mass_sun = 1.99e30  # kg\n  seconds_in_day = 86400  # seconds\n\n  # Newton's version of Kepler's third law\n  orbital_period_squared = (4 * math.pi**2 * mean_orbital_radius**3) / (G * mass_sun)\n\n  # Calculate the orbital period in seconds\n  orbital_period = math.sqrt(orbital_period_squared)\n\n  # Convert the orbital period to Earth days\n  orbital_period_days = orbital_period / seconds_in_day\n\n  return orbital_period_days",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/relativity1.json",
    "question": "In 1985 the space shuttle Challenger flew a cesium clock and compared its time with a fixed clock left on Earth. The shuttle orbited at approximately 330 km above Earth with a speed of 7712 m/s. Calculate the expected time lost per second (in picoseconds) for the moving clock and compare with the measured result of $-295.02 \\pm 0.29 ps/s$, which includes a predicted effect due to general Relativity of $35.0 \\pm 0.06 ps/s$",
    "prediction": 330.41636093855686,
    "answer": 330.76,
    "rationale": "def solve():\n    import math\n\n    v = 7712  # m/s, velocity of the space shuttle\n    c = 3e8  # m/s, speed of light\n    delta_t = 1  # s, time interval measured by the stationary clock\n\n    delta_t_prime = delta_t * math.sqrt(1 - (v ** 2) / (c ** 2))\n    delta_t_lost = delta_t - delta_t_prime\n\n    # Convert the time lost to picoseconds\n    delta_t_lost_ps = delta_t_lost * 1e12\n\n    return delta_t_lost_ps",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "mingyin/abel-second-theorem1.json",
    "question": "what is the value of \\sum_{n=0}^{\\infty}(-1)^n \\frac{1}{3 n+1}? Round the answer to the thousands decimal.",
    "prediction": 0.836,
    "answer": 0.8356488482647211,
    "rationale": "def solve():\n    import math\n\n    def term(n):\n        return (-1)**n * (1 / (3 * n + 1))\n\n    ans = 0\n    prev_ans = None\n    n = 0\n\n    while prev_ans is None or abs(ans - prev_ans) > 1e-6:\n        prev_ans = ans\n        ans += term(n)\n        n += 1\n\n    return round(ans, 3)",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/wiener_process1.json",
    "question": "Let W(t) be the standard Brownian motion. Find P(W(1) + W(2) > 2).",
    "prediction": 0,
    "answer": 0.186,
    "rationale": "def solve():\n    import numpy as np\n    import scipy.stats as stats\n\n    # Define the mean and covariance matrix for the joint distribution of W(1) and W(2)\n    mean = np.array([0, 0])\n    covariance_matrix = np.array([[1, 1], [1, 2]])\n\n    # Define the function to integrate\n    def integrand(x, y):\n        return stats.multivariate_normal.pdf([x, y], mean=mean, cov=covariance_matrix)\n\n    # Integrate the function over the region where W(1) + W(2) > 2\n    ans, _ = scipy.integrate.nquad(integrand, [[-np.inf, np.inf], [2 - np.inf, np.inf]])\n\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "mingyin/double-integral2.json",
    "question": "Suppose $f(x, y)= \\begin{cases}1-x-y, & x+y \\leqslant 1 \\ 0, & x+y>1\\end{cases}$. What is the integral of f(x,y) over the region I=[0,1]\\times[0,1]?",
    "prediction": 0,
    "answer": 0.16667,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.integrate import dblquad\n\n    def f(x, y):\n        if x + y <= 1:\n            return 1 - x - y\n        else:\n            return 0\n\n    region_I = lambda y: 0, lambda y: 1\n    ans, _ = dblquad(f, 0, 1, region_I)\n\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "maxku/signalprocessing17-noiseshaper.json",
    "question": "Fig. Q2 shows a 1st-order noise shaper. The input is bounded by 0 v and 1 v. A constant 0.4 v input is fed into the noise shaper. The output is a periodic pattern sequence. What is the period of the sequence?",
    "prediction": 0,
    "answer": 5,
    "rationale": "def solve():\n    input_voltage = 0.4\n    min_voltage = 0\n    max_voltage = 1\n    output_voltage = 0\n    sequence = []\n\n    while True:\n        error = input_voltage - output_voltage\n        output_voltage = min(max(min_voltage, error), max_voltage)\n        sequence.append(output_voltage)\n\n        if len(sequence) > 1 and sequence[-1] == sequence[-2]:\n            break\n\n    period = len(sequence) - 1\n    return period",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/curvature2.json",
    "question": "Find the curvature for f(x) = \\sqrt{4x - x^2}, x = 2.",
    "prediction": 0.5,
    "answer": 0.5,
    "rationale": "def solve():\n    import sympy as sp\n\n    x = sp.Symbol('x')\n    f_x = sp.sqrt(4*x - x**2)\n\n    # First derivative\n    f_x_prime = f_x.diff(x)\n\n    # Second derivative\n    f_x_double_prime = f_x_prime.diff(x)\n\n    # Curvature formula\n    curvature = abs(f_x_double_prime.subs(x, 2)) / ((1 + f_x_prime.subs(x, 2)**2)**(3/2))\n\n    return float(curvature)",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "tonyxia/wave1.json",
    "question": "X rays scattered from rock salt (NaCl) are observed to have an intense maximum at an angle of 20\u00b0 from the incident direction. Assuming n = 1 (from the intensity), what must be the Wavelength of the incident radiation in nm?",
    "prediction": 0.19289936083567713,
    "answer": 0.098,
    "rationale": "import math\ndef solve():\n    n = 1\n    d = 0.282  # lattice constant for NaCl in nm\n    theta = 20  # angle in degrees\n\n    # Convert the angle to radians\n    theta_rad = math.radians(theta)\n\n    # Calculate the wavelength using Bragg's Law\n    wavelength = (2 * d * math.sin(theta_rad)) / n\n\n    return wavelength",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/euler's_method3.json",
    "question": "Use Euler's method to find the solution to the differential equation dy/dx=y^2e^x at x=6 with the initial condition y(0)=0.01 and step size h=0.5. What is y(6)?",
    "prediction": 5.113465052928555,
    "answer": 5.113,
    "rationale": "def solve():\n    import math\n\n    def dy_dx(x, y):\n        return y**2 * math.exp(x)\n\n    def euler_method(x0, y0, x, h):\n        while x0 < x:\n            y0 = y0 + h * dy_dx(x0, y0)\n            x0 += h\n        return y0\n\n    x0 = 0\n    y0 = 0.01\n    x = 6\n    h = 0.5\n\n    ans = euler_method(x0, y0, x, h)\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "jianyu_xu/Stirling_number_second_kind_4.json",
    "question": "In how many ways can 10 distinct balls be placed into 4 identical boxes if each box must have at least 1 balls?",
    "prediction": 84,
    "answer": 26335,
    "rationale": "def solve():\n    from math import comb\n\n    # There are 10 distinct balls and 4 identical boxes\n    # We can use the stars and bars method to solve this problem\n    # Since each box must have at least 1 ball, we can place 1 ball in each box first\n    # Now we have 6 balls left to distribute among the 4 boxes\n    # Using the stars and bars method, we can calculate the number of ways as C(n+k-1, k-1)\n    # where n is the number of balls left (6) and k is the number of boxes (4)\n\n    n = 6\n    k = 4\n    ans = comb(n + k - 1, k - 1)\n    return ans",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "wenhuchen/eigen_value2.json",
    "question": "For matrix A = [[3, 1, 1], [2, 4, 2], [1, 1, 3]], what are its eigen values?",
    "prediction": [
      2.0,
      6.0,
      2.0
    ],
    "answer": [
      2,
      6
    ],
    "rationale": "def solve():\n  import numpy as np\n\n  A = np.array([[3, 1, 1], [2, 4, 2], [1, 1, 3]])\n  eigen_values, _ = np.linalg.eig(A)\n  return eigen_values.tolist()",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "elainewan/math_calculus_2_8.json",
    "question": "Does \\lim_{x \\to 0} (cos(mx - 1)/(x^2) = -(m^2)/2 for m = 2?",
    "prediction": false,
    "answer": true,
    "rationale": "To find the limit, we can use L'Hopital's rule since the limit is in the indeterminate form 0/0 as x approaches 0. \n\nL'Hopital's rule states that if the limit of the ratio of the derivatives of the functions exists, then the limit of the original functions also exists and is equal to the limit of the ratio of the derivatives.\n\nSo, let's find the first derivative of the numerator and denominator with respect to x.\n\nNumerator: f(x) = cos(mx - 1)\nf'(x) = -m*sin(mx - 1)\n\nDenominator: g(x) = x^2\ng'(x) = 2x\n\nNow, we can apply L'Hopital's rule:\n\n\\lim_{x \\to 0} (cos(mx - 1)/(x^2) = \\lim_{x \\to 0} (-m*sin(mx - 1)/(2x)\n\nSince the limit is still in the indeterminate form 0/0, we can apply L'Hopital's rule again:\n\nSecond derivative of the numerator:\nf''(x) = -m^2*cos(mx - 1)\n\nSecond derivative of the denominator:\ng''(x) = 2\n\nNow, we can find the limit:\n\n\\lim_{x \\to 0} (-m*sin(mx - 1)/(2x) = \\lim_{x \\to 0} (-m^2*cos(mx - 1)/2)\n\nFor m = 2:\n\n\\lim_{x \\to 0} (-2^2*cos(2x - 1)/2) = -4*cos(-1)/2 = -2*cos(-1)\n\nSince -2*cos(-1) is not equal to -(2^2)/2, the given statement is False.\n\nTherefore, the answer is False.",
    "answer_type": "bool",
    "correct": false
  },
  {
    "id": "tonyxia/divisibility1.json",
    "question": "The two-digit integers from 19 to 92 are written consecutively to form the large integer N = 192021 \u00b7 \u00b7 \u00b7 909192. Suppose that 3^k is the highest power of 3 that is a factor of N. What is k?",
    "prediction": 36,
    "answer": 1,
    "rationale": "def solve():\n    # Initialize variables\n    N = 1\n    k = 0\n\n    # Calculate the product of all two-digit integers from 19 to 92\n    for i in range(19, 93):\n        N *= i\n\n    # Find the highest power of 3 that is a factor of N\n    while N % 3 == 0:\n        N //= 3\n        k += 1\n\n    return k",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "elainewan/math_algebra_5.json",
    "question": "Find the orthogonal projection of 9e_1 onto the subspace of R^4 spanned by [2, 2, 1, 0] and [-2, 2, 0, 1].",
    "prediction": [
      8.0,
      0.0,
      2.0,
      -2.0
    ],
    "answer": [
      8,
      0,
      2,
      -2
    ],
    "rationale": "def solve():\n    import numpy as np\n\n    # Define the given vectors\n    e1 = np.array([1, 0, 0, 0])\n    v1 = np.array([2, 2, 1, 0])\n    v2 = np.array([-2, 2, 0, 1])\n\n    # Calculate the orthogonal projection\n    A = np.column_stack((v1, v2))\n    proj_matrix = A @ np.linalg.inv(A.T @ A) @ A.T\n    proj_e1 = proj_matrix @ (9 * e1)\n\n    return proj_e1.tolist()",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "mingyin/random-walk2.json",
    "question": "For a simple random walk S_n with S_0=0 and P(S_n-S_{n-1}=1)=1/4, P(S_n-S_{n-1}=-1)=3/4. Let M=\\max{S_n:n\\geq 0}. What is the probability of the event {M\\geq 5}? Round the answer to the thousands decimal.",
    "prediction": 0,
    "answer": 0.01234567,
    "rationale": "def solve():\n    import numpy as np\n\n    def random_walk_prob(steps, prob_up, prob_down, target):\n        # Initialize the probability matrix\n        prob_matrix = np.zeros((steps + 1, 2 * steps + 1))\n        prob_matrix[0, steps] = 1\n\n        # Fill in the probability matrix using dynamic programming\n        for i in range(1, steps + 1):\n            for j in range(1, 2 * steps):\n                prob_matrix[i, j] = prob_up * prob_matrix[i - 1, j - 1] + prob_down * prob_matrix[i - 1, j + 1]\n\n        return prob_matrix[steps, steps + target]\n\n    # Set the parameters for the random walk\n    steps = 1000\n    prob_up = 1 / 4\n    prob_down = 3 / 4\n    target = 5\n\n    # Calculate the probability of reaching the target\n    prob_reach_target = 0\n    for i in range(target, steps + 1):\n        prob_reach_target += random_walk_prob(i, prob_up, prob_down, target)\n\n    # Round the answer to the thousands decimal\n    ans = round(prob_reach_target, 3)\n    return ans",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xueguangma/sigma_estimation.json",
    "question": "Traders in major financial institutions use the Black-Scholes formula in a backward fashion to infer other traders' estimation of $\\sigma$ from option prices. In fact, traders frequently quote sigmas to each other, rather than prices, to arrange trades. Suppose a call option on a stock that pays no dividend for 6 months has a strike price of $35, a premium of $2.15, and time to maturity of 7 weeks. The current short-term T-bill rate is 7%, and the price of the underlying stock is $36.12. What is the implied volatility of the underlying security?",
    "prediction": 0.2509467711811188,
    "answer": 0.251,
    "rationale": "def solve():\n    import scipy.optimize as opt\n    import math\n\n    def black_scholes_call(S, K, T, r, sigma):\n        d1 = (math.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * math.sqrt(T))\n        d2 = d1 - sigma * math.sqrt(T)\n        call_price = S * norm.cdf(d1) - K * math.exp(-r * T) * norm.cdf(d2)\n        return call_price\n\n    def implied_volatility_objective_function(sigma, S, K, T, r, call_price):\n        return black_scholes_call(S, K, T, r, sigma) - call_price\n\n    S = 36.12\n    K = 35\n    T = 7 / 52\n    r = 0.07\n    call_price = 2.15\n\n    from scipy.stats import norm\n    implied_volatility = opt.newton(implied_volatility_objective_function, 0.1, args=(S, K, T, r, call_price))\n\n    return implied_volatility",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "xinyi/maximum_entropy_2.json",
    "question": "Find the maximum entropy density $f$, defined for $x\\geq 0$, satisfying $E(X)=\\alpha_1$, $E(\\ln{X})=\\alpha_2$. Which family of densities is this? (a) Exponential. (b) Gamma. (c) Beta. (d) Uniform.",
    "prediction": "(b)",
    "answer": "(b)",
    "rationale": "To find the maximum entropy density $f(x)$, we need to use the method of Lagrange multipliers. The entropy functional is given by:\n\n$H[f] = -\\int_0^\\infty f(x) \\ln{f(x)} dx$\n\nWe need to maximize this functional subject to the constraints:\n\n$\\int_0^\\infty f(x) dx = 1$\n\n$\\int_0^\\infty x f(x) dx = \\alpha_1$\n\n$\\int_0^\\infty \\ln{x} f(x) dx = \\alpha_2$\n\nUsing the method of Lagrange multipliers, we form the following functional:\n\n$J[f] = -\\int_0^\\infty f(x) \\ln{f(x)} dx + \\lambda_0 \\left(\\int_0^\\infty f(x) dx - 1\\right) + \\lambda_1 \\left(\\int_0^\\infty x f(x) dx - \\alpha_1\\right) + \\lambda_2 \\left(\\int_0^\\infty \\ln{x} f(x) dx - \\alpha_2\\right)$\n\nTaking the functional derivative with respect to $f(x)$ and setting it to zero, we get:\n\n$-\\ln{f(x)} - 1 + \\lambda_0 + \\lambda_1 x + \\lambda_2 \\ln{x} = 0$\n\nSolving for $f(x)$, we obtain:\n\n$f(x) = e^{-1 + \\lambda_0 + \\lambda_1 x + \\lambda_2 \\ln{x}} = e^{\\lambda_0} x^{\\lambda_2 - 1} e^{\\lambda_1 x}$\n\nThis is the form of the Gamma distribution with parameters $k = \\lambda_2$ and $\\theta = \\frac{1}{\\lambda_1}$. Therefore, the answer is (b) Gamma.",
    "answer_type": "option",
    "correct": true
  },
  {
    "id": "elainewan/math_calculus_3_6.json",
    "question": "Find acceleration in m/(min^2) at time t = 5 min of a helicopter whose height is s(t) = 300t - 4t^3 m.",
    "prediction": -120.0,
    "answer": -120,
    "rationale": "def solve():\n    import sympy as sp\n\n    t = sp.Symbol('t')\n    s_t = 300*t - 4*t**3\n\n    # First derivative of s(t) with respect to t gives velocity\n    v_t = sp.diff(s_t, t)\n\n    # Second derivative of s(t) with respect to t gives acceleration\n    a_t = sp.diff(v_t, t)\n\n    # Evaluate acceleration at t = 5 min\n    ans = a_t.subs(t, 5)\n\n    return ans.evalf()",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "mingyin/markov-chain2.json",
    "question": "Suppose the Markov Chain satisfies the diagram ./mingyin/diagram.png What is the period of state 0? What is the period of state 1? Return the two answers as a list.",
    "prediction": [
      2,
      2
    ],
    "answer": [
      2,
      2
    ],
    "rationale": "def solve():\n    # Define the transition matrix\n    transition_matrix = [\n        [0, 1, 0, 0],\n        [0.5, 0, 0.5, 0],\n        [0, 0, 0, 1],\n        [0, 0, 1, 0]\n    ]\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def find_period(state):\n        current_state = state\n        steps = 0\n        visited = set()\n\n        while current_state not in visited:\n            visited.add(current_state)\n            steps += 1\n            next_state_probs = transition_matrix[current_state]\n            next_state = next_state_probs.index(max(next_state_probs))\n            current_state = next_state\n\n        return steps\n\n    period_state_0 = find_period(0)\n    period_state_1 = find_period(1)\n\n    return [period_state_0, period_state_1]",
    "answer_type": "list of integer",
    "correct": true
  },
  {
    "id": "maxku/cv-imageprocessing8-fourier.json",
    "question": "In the process of searching circles in an image, object O is detected. The contour of the object O is represented with the Fourier Descriptors (80,40,0,0,-1,0,0,1). Given that the Fourier Descriptors of a circle are (0,40,0,0,0,0,0,0). Is the object O a circle-like polygon in the image? Bear in mind that there is some high frequency noise in the image. You should take this into account when you make your judgment.",
    "prediction": true,
    "answer": true,
    "rationale": "Considering the Fourier Descriptors of object O (80,40,0,0,-1,0,0,1) and the Fourier Descriptors of a circle (0,40,0,0,0,0,0,0), we can see that the first, fifth, and eighth elements are different. However, since there is high-frequency noise in the image, these differences could be due to the noise. The second element, which represents the radius of the circle, is the same in both cases. \n\nTherefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "xinyi/huffman_code_3.json",
    "question": "Let $X$ be uniformly distributed over $\\{1, 2, \\ldots, 256\\}$. We ask random questions: Is $X\\in S_1$? Is $X\\in S_2$? ... until only one integer remains. All $2^256$ subsets of $\\{1, 2, \\ldots, 256\\}$ are equally likely. How many deterministic questions are needed to determine $X$?",
    "prediction": 8,
    "answer": 8,
    "rationale": "def solve():\n    import math\n    ans = math.ceil(math.log2(256))\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "wenhuchen/fermat_little.json",
    "question": "If p is a prime number and a is an integer, what is (a^p  - a) mod p?",
    "prediction": 0,
    "answer": 0,
    "rationale": "def solve(p, a):\n    if p < 2:\n        return \"p must be a prime number\"\n    \n    # Check if p is prime\n    for i in range(2, int(p**0.5) + 1):\n        if p % i == 0:\n            return \"p must be a prime number\"\n    \n    ans = (a**p - a) % p\n    return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "xueguangma/fundamental_theorem_of_calculus.json",
    "question": "Find $\\int_{0}^{\\sqrt{3}} \\frac{dx}{1+x^2}$.",
    "prediction": 1.0471975511965979,
    "answer": 1.0472,
    "rationale": "def solve():\n    from scipy.integrate import quad\n\n    def integrand(x):\n        return 1 / (1 + x**2)\n\n    ans, _ = quad(integrand, 0, 3**0.5)\n    return ans",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/cauchy_residue1.json",
    "question": "Compute $\\int_{|z| = 2} (5z - 2) / (z * (z - 1)) dz$. The answer is Ai with i denoting the imaginary unit, what is A?",
    "prediction": 1.463437174776639e-16,
    "answer": 31.4,
    "rationale": "def solve():\n    import numpy as np\n    from scipy.integrate import quad\n\n    def integrand(theta):\n        z = 2 * np.exp(1j * theta)\n        dz = 2 * 1j * np.exp(1j * theta)\n        f = (5 * z - 2) / (z * (z - 1))\n        return np.real(f * dz)\n\n    integral, _ = quad(integrand, 0, 2 * np.pi)\n    A = integral / (2 * np.pi)\n    return A",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "tonyxia/atom2.json",
    "question": "What is the minimum kinetic energy in MeV of a proton in a medium-sized nucleus having a diameter of 8.0 x 10^-15 m?",
    "prediction": 0.32475374937788465,
    "answer": 0.08,
    "rationale": "def solve():\n  import math\n\n  # Constants\n  h = 6.626e-34  # Planck's constant (J s)\n  m_p = 1.67e-27  # Mass of proton (kg)\n  eV_to_J = 1.602e-19  # Conversion factor from eV to J\n  MeV_to_eV = 1e6  # Conversion factor from MeV to eV\n\n  # Given\n  diameter = 8.0e-15  # Diameter of nucleus (m)\n  radius = diameter / 2  # Radius of nucleus (m)\n\n  # Calculate the minimum kinetic energy using the uncertainty principle\n  delta_x = radius\n  delta_p = h / (4 * math.pi * delta_x)  # Uncertainty in momentum (kg m/s)\n  min_kinetic_energy = (delta_p ** 2) / (2 * m_p)  # Minimum kinetic energy (J)\n\n  # Convert the minimum kinetic energy to MeV\n  min_kinetic_energy_MeV = min_kinetic_energy / (eV_to_J * MeV_to_eV)\n\n  return min_kinetic_energy_MeV",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "wenhuchen/differential_equation1.json",
    "question": "is the following function $f(t, y) = \\frac{t^3+t^2y+ty+y^3}{t^3 + ty^2}$ scale invariant function",
    "prediction": true,
    "answer": true,
    "rationale": "To determine if the function $f(t, y) = \\frac{t^3+t^2y+ty+y^3}{t^3 + ty^2}$ is scale invariant, we need to check if it remains unchanged under the scaling transformation $t \\rightarrow \\lambda t$ and $y \\rightarrow \\lambda y$ for some constant $\\lambda > 0$. \n\nLet's apply the scaling transformation to the function:\n\n$f(\\lambda t, \\lambda y) = \\frac{(\\lambda t)^3+(\\lambda t)^2(\\lambda y)+(\\lambda t)(\\lambda y)+(\\lambda y)^3}{(\\lambda t)^3 + (\\lambda t)(\\lambda y)^2}$\n\nSimplify the expression:\n\n$f(\\lambda t, \\lambda y) = \\frac{\\lambda^3t^3+\\lambda^3t^2y+\\lambda^2ty+\\lambda^3y^3}{\\lambda^3t^3 + \\lambda^3ty^2}$\n\nNow, factor out $\\lambda^3$ from the numerator and denominator:\n\n$f(\\lambda t, \\lambda y) = \\frac{\\lambda^3(t^3+t^2y+ty+y^3)}{\\lambda^3(t^3 + ty^2)}$\n\nCancel out the $\\lambda^3$ terms:\n\n$f(\\lambda t, \\lambda y) = \\frac{t^3+t^2y+ty+y^3}{t^3 + ty^2}$\n\nSince $f(\\lambda t, \\lambda y) = f(t, y)$, the function is scale invariant. Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  },
  {
    "id": "wenhuchen/newton3.json",
    "question": "Please solve the equation 2*x^3 + e^x = 10 using newton-raphson method.",
    "prediction": 1.4283498255367724,
    "answer": 1.42,
    "rationale": "def solve():\n    import math\n\n    # Define the function and its derivative\n    def f(x):\n        return 2 * x**3 + math.exp(x) - 10\n\n    def f_prime(x):\n        return 6 * x**2 + math.exp(x)\n\n    # Implement the Newton-Raphson method\n    x0 = 1  # Initial guess\n    tolerance = 1e-6\n    max_iterations = 100\n\n    for _ in range(max_iterations):\n        x1 = x0 - f(x0) / f_prime(x0)\n        if abs(x1 - x0) < tolerance:\n            break\n        x0 = x1\n\n    return x1",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "maxku/cv-imageprocessing16-chaincode.json",
    "question": "Fig. Q4 shows the contour of an object. Represent it with an 8-directional chain code. The resultant chain code should be normalized with respect to the starting point of the chain code. Represent the answer as a list with each digit as a element.",
    "prediction": [
      1.528,
      0.0
    ],
    "answer": [
      0,
      2,
      0,
      2,
      1,
      7,
      1,
      2,
      0,
      3,
      0,
      6
    ],
    "rationale": "",
    "answer_type": "list of integer",
    "correct": false
  },
  {
    "id": "xueguangma/present_value_1.json",
    "question": "If a cash flow of $100 has a discount rate of 5% and to be received in 5 years, what is the present value of the cash flow?",
    "prediction": 78.35261664684589,
    "answer": 78.3526,
    "rationale": "def solve():\n  cash_flow = 100\n  discount_rate = 0.05\n  years = 5\n\n  present_value = cash_flow / (1 + discount_rate) ** years\n  return present_value",
    "answer_type": "float",
    "correct": true
  },
  {
    "id": "wenhuchen/triangle3.json",
    "question": "Find the measure of angle A in the figure below. Return the numeric value.",
    "prediction": 55,
    "answer": 87,
    "rationale": "",
    "answer_type": "integer",
    "correct": false
  },
  {
    "id": "mingyin/double-integral4.json",
    "question": "compute the line integral of \\int_K xy dx, \\int_L xy dx, where K is a straight line from (0,0) to (1,1) and L is the Parabola y=x^2 from (0,0) to (1,1). return the answer as a list",
    "prediction": [
      0.6666666666666667,
      0.5
    ],
    "answer": [
      0.333,
      0.25
    ],
    "rationale": "def solve():\n    import numpy as np\n    from scipy.integrate import quad\n\n    # Define the functions for the line integral\n    def f_K(x):\n        return x * x\n\n    def f_L(x):\n        return x * (x**2)\n\n    # Define the parametric equations for the paths\n    def x_K(t):\n        return t\n\n    def y_K(t):\n        return t\n\n    def x_L(t):\n        return t\n\n    def y_L(t):\n        return t**2\n\n    # Define the derivatives of the parametric equations\n    def dx_K(t):\n        return 1\n\n    def dy_K(t):\n        return 1\n\n    def dx_L(t):\n        return 1\n\n    def dy_L(t):\n        return 2 * t\n\n    # Define the integrands for the line integrals\n    def integrand_K(t):\n        return f_K(x_K(t)) * dx_K(t) + f_K(y_K(t)) * dy_K(t)\n\n    def integrand_L(t):\n        return f_L(x_L(t)) * dx_L(t) + f_L(y_L(t)) * dy_L(t)\n\n    # Compute the line integrals\n    integral_K, _ = quad(integrand_K, 0, 1)\n    integral_L, _ = quad(integrand_L, 0, 1)\n\n    ans = [integral_K, integral_L]\n    return ans",
    "answer_type": "list of float",
    "correct": false
  },
  {
    "id": "jianyu_xu/Stirling_number_first_kind_6.json",
    "question": "In how many ways can 10 people be seated at 1 identical round tables? Each table must have at least 1 person seated.",
    "prediction": 362880,
    "answer": 362880,
    "rationale": "def solve():\n  import math\n  # There are 10 people and 1 round table, so we need to find the number of ways to arrange them.\n  # For a round table, the number of arrangements is (n-1)! where n is the number of people.\n  ans = math.factorial(10 - 1)\n  return ans",
    "answer_type": "integer",
    "correct": true
  },
  {
    "id": "xinyi/potential_energy.json",
    "question": "A bungee cord is 30.0 m long and, when stretched a distance x, it exerts a restoring force of magnitude kx. Your father-in-law (mass 95.0 kg) stands on a platform 45.0 m above the ground, and one end of the cord is tied securely to his ankle and the other end to the platform. You have promised him that when he steps off the platform he will fall a maximum distance of only 41.0 m before the cord stops him. You had several bungee cords to select from, and you tested them by stretching them out, tying one end to a tree, and pulling on the other end with a force of 380.0 N. When you do this, what distance (in m) will the bungee cord that you should select have stretched?",
    "prediction": 0.23545964882054818,
    "answer": 0.602,
    "rationale": "def solve():\n    import math\n\n    # Constants\n    mass = 95.0  # kg\n    g = 9.81  # m/s^2, acceleration due to gravity\n    initial_height = 45.0  # m\n    max_fall_distance = 41.0  # m\n    test_force = 380.0  # N\n\n    # Calculate the spring constant k\n    stretched_length = 30.0 + max_fall_distance  # m\n    k = (mass * g * stretched_length) / max_fall_distance  # N/m\n\n    # Calculate the distance the bungee cord should stretch when tested\n    test_stretch_distance = test_force / k  # m\n\n    return test_stretch_distance",
    "answer_type": "float",
    "correct": false
  },
  {
    "id": "xinyi/distortion_rate_function_2.json",
    "question": "The distortion rate function $D(R)=\\min_{p(\\hat{x}|x):I(X;\\hat{X})\\leq R} E(d(X,\\hat{X}))$ is convex. True or False?",
    "prediction": true,
    "answer": true,
    "rationale": "Therefore, the answer is True.",
    "answer_type": "bool",
    "correct": true
  }
]